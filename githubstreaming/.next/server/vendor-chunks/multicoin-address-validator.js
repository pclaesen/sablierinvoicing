/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
exports.id = "vendor-chunks/multicoin-address-validator";
exports.ids = ["vendor-chunks/multicoin-address-validator"];
exports.modules = {

/***/ "(ssr)/./node_modules/multicoin-address-validator/src/ada_validator.js":
/*!***********************************************************************!*\
  !*** ./node_modules/multicoin-address-validator/src/ada_validator.js ***!
  \***********************************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

eval("var cbor = __webpack_require__(/*! cbor-js */ \"(ssr)/./node_modules/cbor-js/cbor.js\");\nvar CRC = __webpack_require__(/*! crc */ \"(ssr)/./node_modules/crc/index.js\");\nvar base58 = __webpack_require__(/*! ./crypto/base58 */ \"(ssr)/./node_modules/multicoin-address-validator/src/crypto/base58.js\");\nvar BIP173Validator = __webpack_require__(/*! ./bip173_validator */ \"(ssr)/./node_modules/multicoin-address-validator/src/bip173_validator.js\")\n\nfunction getDecoded(address) {\n    try {\n        var decoded = base58.decode(address);\n        return cbor.decode(new Uint8Array(decoded).buffer);\n    } catch (e) {\n        // if decoding fails, assume invalid address\n        return null;\n    }\n}\n\nfunction isValidAddressV1(address) {\n    var decoded = getDecoded(address);\n\n    if (!decoded || (!Array.isArray(decoded) && decoded.length != 2)) {\n        return false;\n    }\n\n    var tagged = decoded[0];\n    var validCrc = decoded[1];\n    if (typeof (validCrc) != 'number') {\n        return false;\n    }\n\n    // get crc of the payload\n    var crc = CRC.crc32(tagged);\n\n    return crc == validCrc;\n}\n\nfunction isValidAddressShelley(address, currency, opts) {\n    // shelley address are just bip 173 - bech32 addresses (https://cips.cardano.org/cips/cip4/)\n    return BIP173Validator.isValidAddress(address, currency, opts);\n}\n\nmodule.exports = {\n    isValidAddress: function (address, currency, opts = {}) {\n        return isValidAddressV1(address) || isValidAddressShelley(address, currency, opts);\n    }\n};\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvbXVsdGljb2luLWFkZHJlc3MtdmFsaWRhdG9yL3NyYy9hZGFfdmFsaWRhdG9yLmpzIiwibWFwcGluZ3MiOiJBQUFBLFdBQVcsbUJBQU8sQ0FBQyxxREFBUztBQUM1QixVQUFVLG1CQUFPLENBQUMsOENBQUs7QUFDdkIsYUFBYSxtQkFBTyxDQUFDLDhGQUFpQjtBQUN0QyxzQkFBc0IsbUJBQU8sQ0FBQyxvR0FBb0I7O0FBRWxEO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsTUFBTTtBQUNOO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTs7QUFFQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0EsMERBQTBEO0FBQzFEO0FBQ0E7QUFDQSIsInNvdXJjZXMiOlsid2VicGFjazovL2dpdGh1YnN0cmVhbWluZy8uL25vZGVfbW9kdWxlcy9tdWx0aWNvaW4tYWRkcmVzcy12YWxpZGF0b3Ivc3JjL2FkYV92YWxpZGF0b3IuanM/NGEwMCJdLCJzb3VyY2VzQ29udGVudCI6WyJ2YXIgY2JvciA9IHJlcXVpcmUoJ2Nib3ItanMnKTtcbnZhciBDUkMgPSByZXF1aXJlKCdjcmMnKTtcbnZhciBiYXNlNTggPSByZXF1aXJlKCcuL2NyeXB0by9iYXNlNTgnKTtcbnZhciBCSVAxNzNWYWxpZGF0b3IgPSByZXF1aXJlKCcuL2JpcDE3M192YWxpZGF0b3InKVxuXG5mdW5jdGlvbiBnZXREZWNvZGVkKGFkZHJlc3MpIHtcbiAgICB0cnkge1xuICAgICAgICB2YXIgZGVjb2RlZCA9IGJhc2U1OC5kZWNvZGUoYWRkcmVzcyk7XG4gICAgICAgIHJldHVybiBjYm9yLmRlY29kZShuZXcgVWludDhBcnJheShkZWNvZGVkKS5idWZmZXIpO1xuICAgIH0gY2F0Y2ggKGUpIHtcbiAgICAgICAgLy8gaWYgZGVjb2RpbmcgZmFpbHMsIGFzc3VtZSBpbnZhbGlkIGFkZHJlc3NcbiAgICAgICAgcmV0dXJuIG51bGw7XG4gICAgfVxufVxuXG5mdW5jdGlvbiBpc1ZhbGlkQWRkcmVzc1YxKGFkZHJlc3MpIHtcbiAgICB2YXIgZGVjb2RlZCA9IGdldERlY29kZWQoYWRkcmVzcyk7XG5cbiAgICBpZiAoIWRlY29kZWQgfHwgKCFBcnJheS5pc0FycmF5KGRlY29kZWQpICYmIGRlY29kZWQubGVuZ3RoICE9IDIpKSB7XG4gICAgICAgIHJldHVybiBmYWxzZTtcbiAgICB9XG5cbiAgICB2YXIgdGFnZ2VkID0gZGVjb2RlZFswXTtcbiAgICB2YXIgdmFsaWRDcmMgPSBkZWNvZGVkWzFdO1xuICAgIGlmICh0eXBlb2YgKHZhbGlkQ3JjKSAhPSAnbnVtYmVyJykge1xuICAgICAgICByZXR1cm4gZmFsc2U7XG4gICAgfVxuXG4gICAgLy8gZ2V0IGNyYyBvZiB0aGUgcGF5bG9hZFxuICAgIHZhciBjcmMgPSBDUkMuY3JjMzIodGFnZ2VkKTtcblxuICAgIHJldHVybiBjcmMgPT0gdmFsaWRDcmM7XG59XG5cbmZ1bmN0aW9uIGlzVmFsaWRBZGRyZXNzU2hlbGxleShhZGRyZXNzLCBjdXJyZW5jeSwgb3B0cykge1xuICAgIC8vIHNoZWxsZXkgYWRkcmVzcyBhcmUganVzdCBiaXAgMTczIC0gYmVjaDMyIGFkZHJlc3NlcyAoaHR0cHM6Ly9jaXBzLmNhcmRhbm8ub3JnL2NpcHMvY2lwNC8pXG4gICAgcmV0dXJuIEJJUDE3M1ZhbGlkYXRvci5pc1ZhbGlkQWRkcmVzcyhhZGRyZXNzLCBjdXJyZW5jeSwgb3B0cyk7XG59XG5cbm1vZHVsZS5leHBvcnRzID0ge1xuICAgIGlzVmFsaWRBZGRyZXNzOiBmdW5jdGlvbiAoYWRkcmVzcywgY3VycmVuY3ksIG9wdHMgPSB7fSkge1xuICAgICAgICByZXR1cm4gaXNWYWxpZEFkZHJlc3NWMShhZGRyZXNzKSB8fCBpc1ZhbGlkQWRkcmVzc1NoZWxsZXkoYWRkcmVzcywgY3VycmVuY3ksIG9wdHMpO1xuICAgIH1cbn07XG4iXSwibmFtZXMiOltdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/multicoin-address-validator/src/ada_validator.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/multicoin-address-validator/src/algo_validator.js":
/*!************************************************************************!*\
  !*** ./node_modules/multicoin-address-validator/src/algo_validator.js ***!
  \************************************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

eval("const cryptoUtils = __webpack_require__(/*! ./crypto/utils */ \"(ssr)/./node_modules/multicoin-address-validator/src/crypto/utils.js\");\n\nconst ALGORAND_CHECKSUM_BYTE_LENGTH = 4;\nconst ALGORAND_ADDRESS_LENGTH = 58;\n\nmodule.exports = {\n    isValidAddress: function (address, currency, opts = {}) {\n        const { networkType = 'prod' } = opts;\n\n        return this.verifyChecksum(address)\n    },\n\n    verifyChecksum: function (address) {\n        if (address.length !== ALGORAND_ADDRESS_LENGTH) {\n            return false\n        } else {\n            // Decode base32 Address\n            const decoded = cryptoUtils.base32.b32decode(address);\n            const addr = decoded.slice(0, decoded.length - ALGORAND_CHECKSUM_BYTE_LENGTH)\n            const checksum = cryptoUtils.byteArray2hexStr(decoded.slice(-4)).toString('HEX')\n\n            // Hash Address - Checksum\n            const code = cryptoUtils.sha512_256(cryptoUtils.byteArray2hexStr(addr)).substr(-ALGORAND_CHECKSUM_BYTE_LENGTH * 2);\n\n            return code === checksum\n        }\n    }\n}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvbXVsdGljb2luLWFkZHJlc3MtdmFsaWRhdG9yL3NyYy9hbGdvX3ZhbGlkYXRvci5qcyIsIm1hcHBpbmdzIjoiQUFBQSxvQkFBb0IsbUJBQU8sQ0FBQyw0RkFBZ0I7O0FBRTVDO0FBQ0E7O0FBRUE7QUFDQSwwREFBMEQ7QUFDMUQsZ0JBQWdCLHVCQUF1Qjs7QUFFdkM7QUFDQSxLQUFLOztBQUVMO0FBQ0E7QUFDQTtBQUNBLFVBQVU7QUFDVjtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vZ2l0aHVic3RyZWFtaW5nLy4vbm9kZV9tb2R1bGVzL211bHRpY29pbi1hZGRyZXNzLXZhbGlkYXRvci9zcmMvYWxnb192YWxpZGF0b3IuanM/ZDg5YyJdLCJzb3VyY2VzQ29udGVudCI6WyJjb25zdCBjcnlwdG9VdGlscyA9IHJlcXVpcmUoJy4vY3J5cHRvL3V0aWxzJyk7XG5cbmNvbnN0IEFMR09SQU5EX0NIRUNLU1VNX0JZVEVfTEVOR1RIID0gNDtcbmNvbnN0IEFMR09SQU5EX0FERFJFU1NfTEVOR1RIID0gNTg7XG5cbm1vZHVsZS5leHBvcnRzID0ge1xuICAgIGlzVmFsaWRBZGRyZXNzOiBmdW5jdGlvbiAoYWRkcmVzcywgY3VycmVuY3ksIG9wdHMgPSB7fSkge1xuICAgICAgICBjb25zdCB7IG5ldHdvcmtUeXBlID0gJ3Byb2QnIH0gPSBvcHRzO1xuXG4gICAgICAgIHJldHVybiB0aGlzLnZlcmlmeUNoZWNrc3VtKGFkZHJlc3MpXG4gICAgfSxcblxuICAgIHZlcmlmeUNoZWNrc3VtOiBmdW5jdGlvbiAoYWRkcmVzcykge1xuICAgICAgICBpZiAoYWRkcmVzcy5sZW5ndGggIT09IEFMR09SQU5EX0FERFJFU1NfTEVOR1RIKSB7XG4gICAgICAgICAgICByZXR1cm4gZmFsc2VcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIC8vIERlY29kZSBiYXNlMzIgQWRkcmVzc1xuICAgICAgICAgICAgY29uc3QgZGVjb2RlZCA9IGNyeXB0b1V0aWxzLmJhc2UzMi5iMzJkZWNvZGUoYWRkcmVzcyk7XG4gICAgICAgICAgICBjb25zdCBhZGRyID0gZGVjb2RlZC5zbGljZSgwLCBkZWNvZGVkLmxlbmd0aCAtIEFMR09SQU5EX0NIRUNLU1VNX0JZVEVfTEVOR1RIKVxuICAgICAgICAgICAgY29uc3QgY2hlY2tzdW0gPSBjcnlwdG9VdGlscy5ieXRlQXJyYXkyaGV4U3RyKGRlY29kZWQuc2xpY2UoLTQpKS50b1N0cmluZygnSEVYJylcblxuICAgICAgICAgICAgLy8gSGFzaCBBZGRyZXNzIC0gQ2hlY2tzdW1cbiAgICAgICAgICAgIGNvbnN0IGNvZGUgPSBjcnlwdG9VdGlscy5zaGE1MTJfMjU2KGNyeXB0b1V0aWxzLmJ5dGVBcnJheTJoZXhTdHIoYWRkcikpLnN1YnN0cigtQUxHT1JBTkRfQ0hFQ0tTVU1fQllURV9MRU5HVEggKiAyKTtcblxuICAgICAgICAgICAgcmV0dXJuIGNvZGUgPT09IGNoZWNrc3VtXG4gICAgICAgIH1cbiAgICB9XG59XG4iXSwibmFtZXMiOltdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/multicoin-address-validator/src/algo_validator.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/multicoin-address-validator/src/base58_validator.js":
/*!**************************************************************************!*\
  !*** ./node_modules/multicoin-address-validator/src/base58_validator.js ***!
  \**************************************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

eval("const base58 = __webpack_require__(/*! ./crypto/base58 */ \"(ssr)/./node_modules/multicoin-address-validator/src/crypto/base58.js\");\n\n// simple base58 validator.  Just checks if it can be decoded.\nmodule.exports = {\n    isValidAddress: function (address, currency, opts = {}) {\n        try {\n            if (!address || address.length == 0) {\n                return false;\n            }\n\n            if (currency.minLength && (address.length < currency.minLength)) {\n                return false;\n            }\n\n            if (currency.maxLength && (address.length > currency.maxLength)) {\n                return false;\n            }\n            try {\n                const decoded = base58.decode(address);\n                if (!decoded || !decoded.length) {\n                    return false;\n                }\n            } catch (e) {\n                // if decoding fails, assume invalid address\n                return false;\n            }\n            return true;\n        } catch (e) {\n            return false;\n        }\n    }\n};\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvbXVsdGljb2luLWFkZHJlc3MtdmFsaWRhdG9yL3NyYy9iYXNlNThfdmFsaWRhdG9yLmpzIiwibWFwcGluZ3MiOiJBQUFBLGVBQWUsbUJBQU8sQ0FBQyw4RkFBaUI7O0FBRXhDO0FBQ0E7QUFDQSwwREFBMEQ7QUFDMUQ7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxjQUFjO0FBQ2Q7QUFDQTtBQUNBO0FBQ0E7QUFDQSxVQUFVO0FBQ1Y7QUFDQTtBQUNBO0FBQ0EiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9naXRodWJzdHJlYW1pbmcvLi9ub2RlX21vZHVsZXMvbXVsdGljb2luLWFkZHJlc3MtdmFsaWRhdG9yL3NyYy9iYXNlNThfdmFsaWRhdG9yLmpzP2U3MDMiXSwic291cmNlc0NvbnRlbnQiOlsiY29uc3QgYmFzZTU4ID0gcmVxdWlyZSgnLi9jcnlwdG8vYmFzZTU4Jyk7XG5cbi8vIHNpbXBsZSBiYXNlNTggdmFsaWRhdG9yLiAgSnVzdCBjaGVja3MgaWYgaXQgY2FuIGJlIGRlY29kZWQuXG5tb2R1bGUuZXhwb3J0cyA9IHtcbiAgICBpc1ZhbGlkQWRkcmVzczogZnVuY3Rpb24gKGFkZHJlc3MsIGN1cnJlbmN5LCBvcHRzID0ge30pIHtcbiAgICAgICAgdHJ5IHtcbiAgICAgICAgICAgIGlmICghYWRkcmVzcyB8fCBhZGRyZXNzLmxlbmd0aCA9PSAwKSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICBpZiAoY3VycmVuY3kubWluTGVuZ3RoICYmIChhZGRyZXNzLmxlbmd0aCA8IGN1cnJlbmN5Lm1pbkxlbmd0aCkpIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gZmFsc2U7XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIGlmIChjdXJyZW5jeS5tYXhMZW5ndGggJiYgKGFkZHJlc3MubGVuZ3RoID4gY3VycmVuY3kubWF4TGVuZ3RoKSkge1xuICAgICAgICAgICAgICAgIHJldHVybiBmYWxzZTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIHRyeSB7XG4gICAgICAgICAgICAgICAgY29uc3QgZGVjb2RlZCA9IGJhc2U1OC5kZWNvZGUoYWRkcmVzcyk7XG4gICAgICAgICAgICAgICAgaWYgKCFkZWNvZGVkIHx8ICFkZWNvZGVkLmxlbmd0aCkge1xuICAgICAgICAgICAgICAgICAgICByZXR1cm4gZmFsc2U7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfSBjYXRjaCAoZSkge1xuICAgICAgICAgICAgICAgIC8vIGlmIGRlY29kaW5nIGZhaWxzLCBhc3N1bWUgaW52YWxpZCBhZGRyZXNzXG4gICAgICAgICAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgcmV0dXJuIHRydWU7XG4gICAgICAgIH0gY2F0Y2ggKGUpIHtcbiAgICAgICAgICAgIHJldHVybiBmYWxzZTtcbiAgICAgICAgfVxuICAgIH1cbn07XG4iXSwibmFtZXMiOltdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/multicoin-address-validator/src/base58_validator.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/multicoin-address-validator/src/bch_validator.js":
/*!***********************************************************************!*\
  !*** ./node_modules/multicoin-address-validator/src/bch_validator.js ***!
  \***********************************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

eval("var cryptoUtils = __webpack_require__(/*! ./crypto/utils */ \"(ssr)/./node_modules/multicoin-address-validator/src/crypto/utils.js\");\nvar bech32 = __webpack_require__(/*! ./crypto/bech32 */ \"(ssr)/./node_modules/multicoin-address-validator/src/crypto/bech32.js\");\nvar BTCValidator = __webpack_require__(/*! ./bitcoin_validator */ \"(ssr)/./node_modules/multicoin-address-validator/src/bitcoin_validator.js\");\n\nfunction validateAddress(address, currency, opts) {\n    var networkType = opts ? opts.networkType : ''\n    var prefix = 'bitcoincash';\n    var regexp = new RegExp(currency.regexp);\n    var raw_address;\n\n    var res = address.split(':');\n    if (res.length === 1) {\n        raw_address = address\n    } else {\n        if (res[0] !== 'bitcoincash') {\n            return false;\n        }\n        raw_address = res[1];\n    }\n\n    if (!regexp.test(raw_address)) {\n        return false;\n    }\n\n    if (raw_address.toLowerCase() != raw_address && raw_address.toUpperCase() != raw_address) {\n        return false;\n    }\n\n    var decoded = cryptoUtils.base32.b32decode(raw_address);\n    if (networkType === 'testnet') {\n        prefix = 'bchtest';\n    }\n\n    try {\n        if (bech32.verifyChecksum(prefix, decoded, bech32.encodings.BECH32)) {\n            return false;\n        }\n    } catch(e) {\n        return false;\n    }\n    return true;\n}\n\nmodule.exports = {\n    isValidAddress: function (address, currency, networkType) {\n        return validateAddress(address, currency, networkType) || BTCValidator.isValidAddress(address, currency, networkType);\n    }\n}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvbXVsdGljb2luLWFkZHJlc3MtdmFsaWRhdG9yL3NyYy9iY2hfdmFsaWRhdG9yLmpzIiwibWFwcGluZ3MiOiJBQUFBLGtCQUFrQixtQkFBTyxDQUFDLDRGQUFnQjtBQUMxQyxhQUFhLG1CQUFPLENBQUMsOEZBQWlCO0FBQ3RDLG1CQUFtQixtQkFBTyxDQUFDLHNHQUFxQjs7QUFFaEQ7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQSxNQUFNO0FBQ047QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsTUFBTTtBQUNOO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9naXRodWJzdHJlYW1pbmcvLi9ub2RlX21vZHVsZXMvbXVsdGljb2luLWFkZHJlc3MtdmFsaWRhdG9yL3NyYy9iY2hfdmFsaWRhdG9yLmpzP2VjNjEiXSwic291cmNlc0NvbnRlbnQiOlsidmFyIGNyeXB0b1V0aWxzID0gcmVxdWlyZSgnLi9jcnlwdG8vdXRpbHMnKTtcbnZhciBiZWNoMzIgPSByZXF1aXJlKCcuL2NyeXB0by9iZWNoMzInKTtcbnZhciBCVENWYWxpZGF0b3IgPSByZXF1aXJlKCcuL2JpdGNvaW5fdmFsaWRhdG9yJyk7XG5cbmZ1bmN0aW9uIHZhbGlkYXRlQWRkcmVzcyhhZGRyZXNzLCBjdXJyZW5jeSwgb3B0cykge1xuICAgIHZhciBuZXR3b3JrVHlwZSA9IG9wdHMgPyBvcHRzLm5ldHdvcmtUeXBlIDogJydcbiAgICB2YXIgcHJlZml4ID0gJ2JpdGNvaW5jYXNoJztcbiAgICB2YXIgcmVnZXhwID0gbmV3IFJlZ0V4cChjdXJyZW5jeS5yZWdleHApO1xuICAgIHZhciByYXdfYWRkcmVzcztcblxuICAgIHZhciByZXMgPSBhZGRyZXNzLnNwbGl0KCc6Jyk7XG4gICAgaWYgKHJlcy5sZW5ndGggPT09IDEpIHtcbiAgICAgICAgcmF3X2FkZHJlc3MgPSBhZGRyZXNzXG4gICAgfSBlbHNlIHtcbiAgICAgICAgaWYgKHJlc1swXSAhPT0gJ2JpdGNvaW5jYXNoJykge1xuICAgICAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgICAgICB9XG4gICAgICAgIHJhd19hZGRyZXNzID0gcmVzWzFdO1xuICAgIH1cblxuICAgIGlmICghcmVnZXhwLnRlc3QocmF3X2FkZHJlc3MpKSB7XG4gICAgICAgIHJldHVybiBmYWxzZTtcbiAgICB9XG5cbiAgICBpZiAocmF3X2FkZHJlc3MudG9Mb3dlckNhc2UoKSAhPSByYXdfYWRkcmVzcyAmJiByYXdfYWRkcmVzcy50b1VwcGVyQ2FzZSgpICE9IHJhd19hZGRyZXNzKSB7XG4gICAgICAgIHJldHVybiBmYWxzZTtcbiAgICB9XG5cbiAgICB2YXIgZGVjb2RlZCA9IGNyeXB0b1V0aWxzLmJhc2UzMi5iMzJkZWNvZGUocmF3X2FkZHJlc3MpO1xuICAgIGlmIChuZXR3b3JrVHlwZSA9PT0gJ3Rlc3RuZXQnKSB7XG4gICAgICAgIHByZWZpeCA9ICdiY2h0ZXN0JztcbiAgICB9XG5cbiAgICB0cnkge1xuICAgICAgICBpZiAoYmVjaDMyLnZlcmlmeUNoZWNrc3VtKHByZWZpeCwgZGVjb2RlZCwgYmVjaDMyLmVuY29kaW5ncy5CRUNIMzIpKSB7XG4gICAgICAgICAgICByZXR1cm4gZmFsc2U7XG4gICAgICAgIH1cbiAgICB9IGNhdGNoKGUpIHtcbiAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgIH1cbiAgICByZXR1cm4gdHJ1ZTtcbn1cblxubW9kdWxlLmV4cG9ydHMgPSB7XG4gICAgaXNWYWxpZEFkZHJlc3M6IGZ1bmN0aW9uIChhZGRyZXNzLCBjdXJyZW5jeSwgbmV0d29ya1R5cGUpIHtcbiAgICAgICAgcmV0dXJuIHZhbGlkYXRlQWRkcmVzcyhhZGRyZXNzLCBjdXJyZW5jeSwgbmV0d29ya1R5cGUpIHx8IEJUQ1ZhbGlkYXRvci5pc1ZhbGlkQWRkcmVzcyhhZGRyZXNzLCBjdXJyZW5jeSwgbmV0d29ya1R5cGUpO1xuICAgIH1cbn1cbiJdLCJuYW1lcyI6W10sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/multicoin-address-validator/src/bch_validator.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/multicoin-address-validator/src/bip173_validator.js":
/*!**************************************************************************!*\
  !*** ./node_modules/multicoin-address-validator/src/bip173_validator.js ***!
  \**************************************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

eval("var bech32 = __webpack_require__(/*! ./crypto/bech32 */ \"(ssr)/./node_modules/multicoin-address-validator/src/crypto/bech32.js\");\n\n// bip 173 bech 32 addresses (https://github.com/bitcoin/bips/blob/master/bip-0173.mediawiki)\nmodule.exports = {\n    isValidAddress: function (address, currency, opts = {}) {\n        const { networkType = 'prod' } = opts;\n        const decoded = bech32.decode(address, bech32.encodings.BECH32);\n        if (!decoded) {\n            return false;\n        }\n\n        const bech32Hrp = decoded.hrp;\n        let correctBech32Hrps;\n        if (networkType === 'prod' || networkType === 'testnet') {\n            correctBech32Hrps = currency.bech32Hrp[networkType];\n        } else if (currency.bech32Hrp) {\n            correctBech32Hrps = currency.bech32Hrp.prod.concat(currency.bech32Hrp.testnet)\n        } else {\n            return false;\n        }\n\n        if (correctBech32Hrps.indexOf(bech32Hrp) === -1) {\n            return false;\n        }\n\n        return true;\n    }\n};\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvbXVsdGljb2luLWFkZHJlc3MtdmFsaWRhdG9yL3NyYy9iaXAxNzNfdmFsaWRhdG9yLmpzIiwibWFwcGluZ3MiOiJBQUFBLGFBQWEsbUJBQU8sQ0FBQyw4RkFBaUI7O0FBRXRDO0FBQ0E7QUFDQSwwREFBMEQ7QUFDMUQsZ0JBQWdCLHVCQUF1QjtBQUN2QztBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLFVBQVU7QUFDVjtBQUNBLFVBQVU7QUFDVjtBQUNBOztBQUVBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0EiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9naXRodWJzdHJlYW1pbmcvLi9ub2RlX21vZHVsZXMvbXVsdGljb2luLWFkZHJlc3MtdmFsaWRhdG9yL3NyYy9iaXAxNzNfdmFsaWRhdG9yLmpzPzQzZTIiXSwic291cmNlc0NvbnRlbnQiOlsidmFyIGJlY2gzMiA9IHJlcXVpcmUoJy4vY3J5cHRvL2JlY2gzMicpO1xuXG4vLyBiaXAgMTczIGJlY2ggMzIgYWRkcmVzc2VzIChodHRwczovL2dpdGh1Yi5jb20vYml0Y29pbi9iaXBzL2Jsb2IvbWFzdGVyL2JpcC0wMTczLm1lZGlhd2lraSlcbm1vZHVsZS5leHBvcnRzID0ge1xuICAgIGlzVmFsaWRBZGRyZXNzOiBmdW5jdGlvbiAoYWRkcmVzcywgY3VycmVuY3ksIG9wdHMgPSB7fSkge1xuICAgICAgICBjb25zdCB7IG5ldHdvcmtUeXBlID0gJ3Byb2QnIH0gPSBvcHRzO1xuICAgICAgICBjb25zdCBkZWNvZGVkID0gYmVjaDMyLmRlY29kZShhZGRyZXNzLCBiZWNoMzIuZW5jb2RpbmdzLkJFQ0gzMik7XG4gICAgICAgIGlmICghZGVjb2RlZCkge1xuICAgICAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgICAgICB9XG5cbiAgICAgICAgY29uc3QgYmVjaDMySHJwID0gZGVjb2RlZC5ocnA7XG4gICAgICAgIGxldCBjb3JyZWN0QmVjaDMySHJwcztcbiAgICAgICAgaWYgKG5ldHdvcmtUeXBlID09PSAncHJvZCcgfHwgbmV0d29ya1R5cGUgPT09ICd0ZXN0bmV0Jykge1xuICAgICAgICAgICAgY29ycmVjdEJlY2gzMkhycHMgPSBjdXJyZW5jeS5iZWNoMzJIcnBbbmV0d29ya1R5cGVdO1xuICAgICAgICB9IGVsc2UgaWYgKGN1cnJlbmN5LmJlY2gzMkhycCkge1xuICAgICAgICAgICAgY29ycmVjdEJlY2gzMkhycHMgPSBjdXJyZW5jeS5iZWNoMzJIcnAucHJvZC5jb25jYXQoY3VycmVuY3kuYmVjaDMySHJwLnRlc3RuZXQpXG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICByZXR1cm4gZmFsc2U7XG4gICAgICAgIH1cblxuICAgICAgICBpZiAoY29ycmVjdEJlY2gzMkhycHMuaW5kZXhPZihiZWNoMzJIcnApID09PSAtMSkge1xuICAgICAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgICAgICB9XG5cbiAgICAgICAgcmV0dXJuIHRydWU7XG4gICAgfVxufTtcbiJdLCJuYW1lcyI6W10sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/multicoin-address-validator/src/bip173_validator.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/multicoin-address-validator/src/bitcoin_validator.js":
/*!***************************************************************************!*\
  !*** ./node_modules/multicoin-address-validator/src/bitcoin_validator.js ***!
  \***************************************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

eval("var base58 = __webpack_require__(/*! ./crypto/base58 */ \"(ssr)/./node_modules/multicoin-address-validator/src/crypto/base58.js\");\nvar segwit = __webpack_require__(/*! ./crypto/segwit_addr */ \"(ssr)/./node_modules/multicoin-address-validator/src/crypto/segwit_addr.js\");\nvar cryptoUtils = __webpack_require__(/*! ./crypto/utils */ \"(ssr)/./node_modules/multicoin-address-validator/src/crypto/utils.js\");\n\nvar DEFAULT_NETWORK_TYPE = 'prod';\n\nfunction getDecoded(address) {\n    try {\n        return base58.decode(address);\n    } catch (e) {\n        // if decoding fails, assume invalid address\n        return null;\n    }\n}\n\nfunction getChecksum(hashFunction, payload) {\n    // Each currency may implement different hashing algorithm\n    switch (hashFunction) {\n        // blake then keccak hash chain\n        case 'blake256keccak256':\n            var blake = cryptoUtils.blake2b256(payload);\n            return cryptoUtils.keccak256Checksum(Buffer.from(blake, 'hex'));\n        case 'blake256':\n            return cryptoUtils.blake256Checksum(payload);\n        case 'keccak256':\n            return cryptoUtils.keccak256Checksum(payload);\n        case 'sha256':\n        default:\n            return cryptoUtils.sha256Checksum(payload);\n    }\n}\n\nfunction getAddressType(address, currency) {\n    currency = currency || {};\n    // should be 25 bytes per btc address spec and 26 decred\n    var expectedLength = currency.expectedLength || 25;\n    var hashFunction = currency.hashFunction || 'sha256';\n    var decoded = getDecoded(address);\n\n    if (decoded) {\n        var length = decoded.length;\n\n        if (length !== expectedLength) {\n            return null;\n        }\n\n        if(currency.regex) {\n            if(!currency.regex.test(address)) {\n                return false;\n            }\n        }\n\n        var checksum = cryptoUtils.toHex(decoded.slice(length - 4, length)),\n            body = cryptoUtils.toHex(decoded.slice(0, length - 4)),\n            goodChecksum = getChecksum(hashFunction, body);\n\n        return checksum === goodChecksum ? cryptoUtils.toHex(decoded.slice(0, expectedLength - 24)) : null;\n    }\n\n    return null;\n}\n\nfunction isValidP2PKHandP2SHAddress(address, currency, opts) {\n    const { networkType = DEFAULT_NETWORK_TYPE} = opts;\n\n    var correctAddressTypes;\n    var addressType = getAddressType(address, currency);\n\n    if (addressType) {\n        if (networkType === 'prod' || networkType === 'testnet') {\n            correctAddressTypes = currency.addressTypes[networkType]\n        } else if (currency.addressTypes) {\n            correctAddressTypes = currency.addressTypes.prod.concat(currency.addressTypes.testnet);\n        } else {\n            return false;\n        }\n\n        return correctAddressTypes.indexOf(addressType) >= 0;\n    }\n\n    return false;\n}\n\nmodule.exports = {\n    isValidAddress: function (address, currency, opts = {}) {\n        return isValidP2PKHandP2SHAddress(address, currency, opts) || segwit.isValidAddress(address, currency, opts);\n    }\n};\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvbXVsdGljb2luLWFkZHJlc3MtdmFsaWRhdG9yL3NyYy9iaXRjb2luX3ZhbGlkYXRvci5qcyIsIm1hcHBpbmdzIjoiQUFBQSxhQUFhLG1CQUFPLENBQUMsOEZBQWlCO0FBQ3RDLGFBQWEsbUJBQU8sQ0FBQyx3R0FBc0I7QUFDM0Msa0JBQWtCLG1CQUFPLENBQUMsNEZBQWdCOztBQUUxQzs7QUFFQTtBQUNBO0FBQ0E7QUFDQSxNQUFNO0FBQ047QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBOztBQUVBO0FBQ0E7O0FBRUE7QUFDQTs7QUFFQTtBQUNBLFlBQVksb0NBQW9DOztBQUVoRDtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBLFVBQVU7QUFDVjtBQUNBLFVBQVU7QUFDVjtBQUNBOztBQUVBO0FBQ0E7O0FBRUE7QUFDQTs7QUFFQTtBQUNBLDBEQUEwRDtBQUMxRDtBQUNBO0FBQ0EiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9naXRodWJzdHJlYW1pbmcvLi9ub2RlX21vZHVsZXMvbXVsdGljb2luLWFkZHJlc3MtdmFsaWRhdG9yL3NyYy9iaXRjb2luX3ZhbGlkYXRvci5qcz9lMjRmIl0sInNvdXJjZXNDb250ZW50IjpbInZhciBiYXNlNTggPSByZXF1aXJlKCcuL2NyeXB0by9iYXNlNTgnKTtcbnZhciBzZWd3aXQgPSByZXF1aXJlKCcuL2NyeXB0by9zZWd3aXRfYWRkcicpO1xudmFyIGNyeXB0b1V0aWxzID0gcmVxdWlyZSgnLi9jcnlwdG8vdXRpbHMnKTtcblxudmFyIERFRkFVTFRfTkVUV09SS19UWVBFID0gJ3Byb2QnO1xuXG5mdW5jdGlvbiBnZXREZWNvZGVkKGFkZHJlc3MpIHtcbiAgICB0cnkge1xuICAgICAgICByZXR1cm4gYmFzZTU4LmRlY29kZShhZGRyZXNzKTtcbiAgICB9IGNhdGNoIChlKSB7XG4gICAgICAgIC8vIGlmIGRlY29kaW5nIGZhaWxzLCBhc3N1bWUgaW52YWxpZCBhZGRyZXNzXG4gICAgICAgIHJldHVybiBudWxsO1xuICAgIH1cbn1cblxuZnVuY3Rpb24gZ2V0Q2hlY2tzdW0oaGFzaEZ1bmN0aW9uLCBwYXlsb2FkKSB7XG4gICAgLy8gRWFjaCBjdXJyZW5jeSBtYXkgaW1wbGVtZW50IGRpZmZlcmVudCBoYXNoaW5nIGFsZ29yaXRobVxuICAgIHN3aXRjaCAoaGFzaEZ1bmN0aW9uKSB7XG4gICAgICAgIC8vIGJsYWtlIHRoZW4ga2VjY2FrIGhhc2ggY2hhaW5cbiAgICAgICAgY2FzZSAnYmxha2UyNTZrZWNjYWsyNTYnOlxuICAgICAgICAgICAgdmFyIGJsYWtlID0gY3J5cHRvVXRpbHMuYmxha2UyYjI1NihwYXlsb2FkKTtcbiAgICAgICAgICAgIHJldHVybiBjcnlwdG9VdGlscy5rZWNjYWsyNTZDaGVja3N1bShCdWZmZXIuZnJvbShibGFrZSwgJ2hleCcpKTtcbiAgICAgICAgY2FzZSAnYmxha2UyNTYnOlxuICAgICAgICAgICAgcmV0dXJuIGNyeXB0b1V0aWxzLmJsYWtlMjU2Q2hlY2tzdW0ocGF5bG9hZCk7XG4gICAgICAgIGNhc2UgJ2tlY2NhazI1Nic6XG4gICAgICAgICAgICByZXR1cm4gY3J5cHRvVXRpbHMua2VjY2FrMjU2Q2hlY2tzdW0ocGF5bG9hZCk7XG4gICAgICAgIGNhc2UgJ3NoYTI1Nic6XG4gICAgICAgIGRlZmF1bHQ6XG4gICAgICAgICAgICByZXR1cm4gY3J5cHRvVXRpbHMuc2hhMjU2Q2hlY2tzdW0ocGF5bG9hZCk7XG4gICAgfVxufVxuXG5mdW5jdGlvbiBnZXRBZGRyZXNzVHlwZShhZGRyZXNzLCBjdXJyZW5jeSkge1xuICAgIGN1cnJlbmN5ID0gY3VycmVuY3kgfHwge307XG4gICAgLy8gc2hvdWxkIGJlIDI1IGJ5dGVzIHBlciBidGMgYWRkcmVzcyBzcGVjIGFuZCAyNiBkZWNyZWRcbiAgICB2YXIgZXhwZWN0ZWRMZW5ndGggPSBjdXJyZW5jeS5leHBlY3RlZExlbmd0aCB8fCAyNTtcbiAgICB2YXIgaGFzaEZ1bmN0aW9uID0gY3VycmVuY3kuaGFzaEZ1bmN0aW9uIHx8ICdzaGEyNTYnO1xuICAgIHZhciBkZWNvZGVkID0gZ2V0RGVjb2RlZChhZGRyZXNzKTtcblxuICAgIGlmIChkZWNvZGVkKSB7XG4gICAgICAgIHZhciBsZW5ndGggPSBkZWNvZGVkLmxlbmd0aDtcblxuICAgICAgICBpZiAobGVuZ3RoICE9PSBleHBlY3RlZExlbmd0aCkge1xuICAgICAgICAgICAgcmV0dXJuIG51bGw7XG4gICAgICAgIH1cblxuICAgICAgICBpZihjdXJyZW5jeS5yZWdleCkge1xuICAgICAgICAgICAgaWYoIWN1cnJlbmN5LnJlZ2V4LnRlc3QoYWRkcmVzcykpIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gZmFsc2U7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cblxuICAgICAgICB2YXIgY2hlY2tzdW0gPSBjcnlwdG9VdGlscy50b0hleChkZWNvZGVkLnNsaWNlKGxlbmd0aCAtIDQsIGxlbmd0aCkpLFxuICAgICAgICAgICAgYm9keSA9IGNyeXB0b1V0aWxzLnRvSGV4KGRlY29kZWQuc2xpY2UoMCwgbGVuZ3RoIC0gNCkpLFxuICAgICAgICAgICAgZ29vZENoZWNrc3VtID0gZ2V0Q2hlY2tzdW0oaGFzaEZ1bmN0aW9uLCBib2R5KTtcblxuICAgICAgICByZXR1cm4gY2hlY2tzdW0gPT09IGdvb2RDaGVja3N1bSA/IGNyeXB0b1V0aWxzLnRvSGV4KGRlY29kZWQuc2xpY2UoMCwgZXhwZWN0ZWRMZW5ndGggLSAyNCkpIDogbnVsbDtcbiAgICB9XG5cbiAgICByZXR1cm4gbnVsbDtcbn1cblxuZnVuY3Rpb24gaXNWYWxpZFAyUEtIYW5kUDJTSEFkZHJlc3MoYWRkcmVzcywgY3VycmVuY3ksIG9wdHMpIHtcbiAgICBjb25zdCB7IG5ldHdvcmtUeXBlID0gREVGQVVMVF9ORVRXT1JLX1RZUEV9ID0gb3B0cztcblxuICAgIHZhciBjb3JyZWN0QWRkcmVzc1R5cGVzO1xuICAgIHZhciBhZGRyZXNzVHlwZSA9IGdldEFkZHJlc3NUeXBlKGFkZHJlc3MsIGN1cnJlbmN5KTtcblxuICAgIGlmIChhZGRyZXNzVHlwZSkge1xuICAgICAgICBpZiAobmV0d29ya1R5cGUgPT09ICdwcm9kJyB8fCBuZXR3b3JrVHlwZSA9PT0gJ3Rlc3RuZXQnKSB7XG4gICAgICAgICAgICBjb3JyZWN0QWRkcmVzc1R5cGVzID0gY3VycmVuY3kuYWRkcmVzc1R5cGVzW25ldHdvcmtUeXBlXVxuICAgICAgICB9IGVsc2UgaWYgKGN1cnJlbmN5LmFkZHJlc3NUeXBlcykge1xuICAgICAgICAgICAgY29ycmVjdEFkZHJlc3NUeXBlcyA9IGN1cnJlbmN5LmFkZHJlc3NUeXBlcy5wcm9kLmNvbmNhdChjdXJyZW5jeS5hZGRyZXNzVHlwZXMudGVzdG5ldCk7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICByZXR1cm4gZmFsc2U7XG4gICAgICAgIH1cblxuICAgICAgICByZXR1cm4gY29ycmVjdEFkZHJlc3NUeXBlcy5pbmRleE9mKGFkZHJlc3NUeXBlKSA+PSAwO1xuICAgIH1cblxuICAgIHJldHVybiBmYWxzZTtcbn1cblxubW9kdWxlLmV4cG9ydHMgPSB7XG4gICAgaXNWYWxpZEFkZHJlc3M6IGZ1bmN0aW9uIChhZGRyZXNzLCBjdXJyZW5jeSwgb3B0cyA9IHt9KSB7XG4gICAgICAgIHJldHVybiBpc1ZhbGlkUDJQS0hhbmRQMlNIQWRkcmVzcyhhZGRyZXNzLCBjdXJyZW5jeSwgb3B0cykgfHwgc2Vnd2l0LmlzVmFsaWRBZGRyZXNzKGFkZHJlc3MsIGN1cnJlbmN5LCBvcHRzKTtcbiAgICB9XG59O1xuIl0sIm5hbWVzIjpbXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/multicoin-address-validator/src/bitcoin_validator.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/multicoin-address-validator/src/crypto/base32.js":
/*!***********************************************************************!*\
  !*** ./node_modules/multicoin-address-validator/src/crypto/base32.js ***!
  \***********************************************************************/
/***/ ((module) => {

eval("var alphabet = \"ABCDEFGHIJKLMNOPQRSTUVWXYZ234567\";\n\n /**\n* Encode a string to base32\n*/\nvar b32encode = function(s) {\n    var parts = [];\n    var quanta = Math.floor((s.length / 5));\n    var leftover = s.length % 5;\n\n     if (leftover != 0) {\n        for (var i = 0; i < (5 - leftover); i++) {\n            s += '\\x00';\n        }\n        quanta += 1;\n    }\n\n     for (var i = 0; i < quanta; i++) {\n        parts.push(alphabet.charAt(s.charCodeAt(i * 5) >> 3));\n        parts.push(alphabet.charAt(((s.charCodeAt(i * 5) & 0x07) << 2) | (s.charCodeAt(i * 5 + 1) >> 6)));\n        parts.push(alphabet.charAt(((s.charCodeAt(i * 5 + 1) & 0x3F) >> 1)));\n        parts.push(alphabet.charAt(((s.charCodeAt(i * 5 + 1) & 0x01) << 4) | (s.charCodeAt(i * 5 + 2) >> 4)));\n        parts.push(alphabet.charAt(((s.charCodeAt(i * 5 + 2) & 0x0F) << 1) | (s.charCodeAt(i * 5 + 3) >> 7)));\n        parts.push(alphabet.charAt(((s.charCodeAt(i * 5 + 3) & 0x7F) >> 2)));\n        parts.push(alphabet.charAt(((s.charCodeAt(i * 5 + 3) & 0x03) << 3) | (s.charCodeAt(i * 5 + 4) >> 5)));\n        parts.push(alphabet.charAt(((s.charCodeAt(i * 5 + 4) & 0x1F))));\n    }\n\n     var replace = 0;\n    if (leftover == 1) replace = 6;\n    else if (leftover == 2) replace = 4;\n    else if (leftover == 3) replace = 3;\n    else if (leftover == 4) replace = 1;\n\n     for (var i = 0; i < replace; i++) parts.pop();\n    for (var i = 0; i < replace; i++) parts.push(\"=\");\n\n     return parts.join(\"\");\n}\n\n/**\n* Decode a base32 string.\n* This is made specifically for our use, deals only with proper strings\n*/\nvar b32decode = function(s) {\n    var r = new ArrayBuffer(s.length * 5 / 8);\n    var b = new Uint8Array(r);\n    for (var j = 0; j < s.length / 8; j++) {\n        var v = [0, 0, 0, 0, 0, 0, 0, 0];\n        for (var i = 0; i < 8; ++i) {\n            v[i] = alphabet.indexOf(s[j * 8 + i]);\n        }\n        var i = 0;\n        b[j * 5 + 0] = (v[i + 0] << 3) | (v[i + 1] >> 2);\n        b[j * 5 + 1] = ((v[i + 1] & 0x3) << 6) | (v[i + 2] << 1) | (v[i + 3] >> 4);\n        b[j * 5 + 2] = ((v[i + 3] & 0xf) << 4) | (v[i + 4] >> 1);\n        b[j * 5 + 3] = ((v[i + 4] & 0x1) << 7) | (v[i + 5] << 2) | (v[i + 6] >> 3);\n        b[j * 5 + 4] = ((v[i + 6] & 0x7) << 5) | (v[i + 7]);\n    }\n    return b;\n}\n\nmodule.exports = {\n    b32decode: b32decode,\n    b32encode: b32encode\n};//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvbXVsdGljb2luLWFkZHJlc3MtdmFsaWRhdG9yL3NyYy9jcnlwdG8vYmFzZTMyLmpzIiwibWFwcGluZ3MiOiJBQUFBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0Esd0JBQXdCLG9CQUFvQjtBQUM1QztBQUNBO0FBQ0E7QUFDQTs7QUFFQSxxQkFBcUIsWUFBWTtBQUNqQztBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQSxxQkFBcUIsYUFBYTtBQUNsQyxvQkFBb0IsYUFBYTs7QUFFakM7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLG9CQUFvQixrQkFBa0I7QUFDdEM7QUFDQSx3QkFBd0IsT0FBTztBQUMvQjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vZ2l0aHVic3RyZWFtaW5nLy4vbm9kZV9tb2R1bGVzL211bHRpY29pbi1hZGRyZXNzLXZhbGlkYXRvci9zcmMvY3J5cHRvL2Jhc2UzMi5qcz8wMmZhIl0sInNvdXJjZXNDb250ZW50IjpbInZhciBhbHBoYWJldCA9IFwiQUJDREVGR0hJSktMTU5PUFFSU1RVVldYWVoyMzQ1NjdcIjtcblxuIC8qKlxuKiBFbmNvZGUgYSBzdHJpbmcgdG8gYmFzZTMyXG4qL1xudmFyIGIzMmVuY29kZSA9IGZ1bmN0aW9uKHMpIHtcbiAgICB2YXIgcGFydHMgPSBbXTtcbiAgICB2YXIgcXVhbnRhID0gTWF0aC5mbG9vcigocy5sZW5ndGggLyA1KSk7XG4gICAgdmFyIGxlZnRvdmVyID0gcy5sZW5ndGggJSA1O1xuXG4gICAgIGlmIChsZWZ0b3ZlciAhPSAwKSB7XG4gICAgICAgIGZvciAodmFyIGkgPSAwOyBpIDwgKDUgLSBsZWZ0b3Zlcik7IGkrKykge1xuICAgICAgICAgICAgcyArPSAnXFx4MDAnO1xuICAgICAgICB9XG4gICAgICAgIHF1YW50YSArPSAxO1xuICAgIH1cblxuICAgICBmb3IgKHZhciBpID0gMDsgaSA8IHF1YW50YTsgaSsrKSB7XG4gICAgICAgIHBhcnRzLnB1c2goYWxwaGFiZXQuY2hhckF0KHMuY2hhckNvZGVBdChpICogNSkgPj4gMykpO1xuICAgICAgICBwYXJ0cy5wdXNoKGFscGhhYmV0LmNoYXJBdCgoKHMuY2hhckNvZGVBdChpICogNSkgJiAweDA3KSA8PCAyKSB8IChzLmNoYXJDb2RlQXQoaSAqIDUgKyAxKSA+PiA2KSkpO1xuICAgICAgICBwYXJ0cy5wdXNoKGFscGhhYmV0LmNoYXJBdCgoKHMuY2hhckNvZGVBdChpICogNSArIDEpICYgMHgzRikgPj4gMSkpKTtcbiAgICAgICAgcGFydHMucHVzaChhbHBoYWJldC5jaGFyQXQoKChzLmNoYXJDb2RlQXQoaSAqIDUgKyAxKSAmIDB4MDEpIDw8IDQpIHwgKHMuY2hhckNvZGVBdChpICogNSArIDIpID4+IDQpKSk7XG4gICAgICAgIHBhcnRzLnB1c2goYWxwaGFiZXQuY2hhckF0KCgocy5jaGFyQ29kZUF0KGkgKiA1ICsgMikgJiAweDBGKSA8PCAxKSB8IChzLmNoYXJDb2RlQXQoaSAqIDUgKyAzKSA+PiA3KSkpO1xuICAgICAgICBwYXJ0cy5wdXNoKGFscGhhYmV0LmNoYXJBdCgoKHMuY2hhckNvZGVBdChpICogNSArIDMpICYgMHg3RikgPj4gMikpKTtcbiAgICAgICAgcGFydHMucHVzaChhbHBoYWJldC5jaGFyQXQoKChzLmNoYXJDb2RlQXQoaSAqIDUgKyAzKSAmIDB4MDMpIDw8IDMpIHwgKHMuY2hhckNvZGVBdChpICogNSArIDQpID4+IDUpKSk7XG4gICAgICAgIHBhcnRzLnB1c2goYWxwaGFiZXQuY2hhckF0KCgocy5jaGFyQ29kZUF0KGkgKiA1ICsgNCkgJiAweDFGKSkpKTtcbiAgICB9XG5cbiAgICAgdmFyIHJlcGxhY2UgPSAwO1xuICAgIGlmIChsZWZ0b3ZlciA9PSAxKSByZXBsYWNlID0gNjtcbiAgICBlbHNlIGlmIChsZWZ0b3ZlciA9PSAyKSByZXBsYWNlID0gNDtcbiAgICBlbHNlIGlmIChsZWZ0b3ZlciA9PSAzKSByZXBsYWNlID0gMztcbiAgICBlbHNlIGlmIChsZWZ0b3ZlciA9PSA0KSByZXBsYWNlID0gMTtcblxuICAgICBmb3IgKHZhciBpID0gMDsgaSA8IHJlcGxhY2U7IGkrKykgcGFydHMucG9wKCk7XG4gICAgZm9yICh2YXIgaSA9IDA7IGkgPCByZXBsYWNlOyBpKyspIHBhcnRzLnB1c2goXCI9XCIpO1xuXG4gICAgIHJldHVybiBwYXJ0cy5qb2luKFwiXCIpO1xufVxuXG4vKipcbiogRGVjb2RlIGEgYmFzZTMyIHN0cmluZy5cbiogVGhpcyBpcyBtYWRlIHNwZWNpZmljYWxseSBmb3Igb3VyIHVzZSwgZGVhbHMgb25seSB3aXRoIHByb3BlciBzdHJpbmdzXG4qL1xudmFyIGIzMmRlY29kZSA9IGZ1bmN0aW9uKHMpIHtcbiAgICB2YXIgciA9IG5ldyBBcnJheUJ1ZmZlcihzLmxlbmd0aCAqIDUgLyA4KTtcbiAgICB2YXIgYiA9IG5ldyBVaW50OEFycmF5KHIpO1xuICAgIGZvciAodmFyIGogPSAwOyBqIDwgcy5sZW5ndGggLyA4OyBqKyspIHtcbiAgICAgICAgdmFyIHYgPSBbMCwgMCwgMCwgMCwgMCwgMCwgMCwgMF07XG4gICAgICAgIGZvciAodmFyIGkgPSAwOyBpIDwgODsgKytpKSB7XG4gICAgICAgICAgICB2W2ldID0gYWxwaGFiZXQuaW5kZXhPZihzW2ogKiA4ICsgaV0pO1xuICAgICAgICB9XG4gICAgICAgIHZhciBpID0gMDtcbiAgICAgICAgYltqICogNSArIDBdID0gKHZbaSArIDBdIDw8IDMpIHwgKHZbaSArIDFdID4+IDIpO1xuICAgICAgICBiW2ogKiA1ICsgMV0gPSAoKHZbaSArIDFdICYgMHgzKSA8PCA2KSB8ICh2W2kgKyAyXSA8PCAxKSB8ICh2W2kgKyAzXSA+PiA0KTtcbiAgICAgICAgYltqICogNSArIDJdID0gKCh2W2kgKyAzXSAmIDB4ZikgPDwgNCkgfCAodltpICsgNF0gPj4gMSk7XG4gICAgICAgIGJbaiAqIDUgKyAzXSA9ICgodltpICsgNF0gJiAweDEpIDw8IDcpIHwgKHZbaSArIDVdIDw8IDIpIHwgKHZbaSArIDZdID4+IDMpO1xuICAgICAgICBiW2ogKiA1ICsgNF0gPSAoKHZbaSArIDZdICYgMHg3KSA8PCA1KSB8ICh2W2kgKyA3XSk7XG4gICAgfVxuICAgIHJldHVybiBiO1xufVxuXG5tb2R1bGUuZXhwb3J0cyA9IHtcbiAgICBiMzJkZWNvZGU6IGIzMmRlY29kZSxcbiAgICBiMzJlbmNvZGU6IGIzMmVuY29kZVxufTsiXSwibmFtZXMiOltdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/multicoin-address-validator/src/crypto/base32.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/multicoin-address-validator/src/crypto/base58.js":
/*!***********************************************************************!*\
  !*** ./node_modules/multicoin-address-validator/src/crypto/base58.js ***!
  \***********************************************************************/
/***/ ((module) => {

eval("// Base58 encoding/decoding\n// Originally written by Mike Hearn for BitcoinJ\n// Copyright (c) 2011 Google Inc\n// Ported to JavaScript by Stefan Thomas\n// Merged Buffer refactorings from base58-native by Stephen Pair\n// Copyright (c) 2013 BitPay Inc\n\nvar ALPHABET = '123456789ABCDEFGHJKLMNPQRSTUVWXYZabcdefghijkmnopqrstuvwxyz';\nvar ALPHABET_MAP = {};\nfor (var i = 0; i < ALPHABET.length; ++i) {\n    ALPHABET_MAP[ALPHABET.charAt(i)] = i;\n}\nvar BASE = ALPHABET.length;\n\nmodule.exports = {\n    decode: function(string) {\n        if (string.length === 0) return [];\n\n        var i, j, bytes = [0];\n        for (i = 0; i < string.length; ++i) {\n            var c = string[i];\n            if (!(c in ALPHABET_MAP)) throw new Error('Non-base58 character');\n\n            for (j = 0; j < bytes.length; ++j) bytes[j] *= BASE\n            bytes[0] += ALPHABET_MAP[c];\n\n            var carry = 0;\n            for (j = 0; j < bytes.length; ++j) {\n                bytes[j] += carry;\n                carry = bytes[j] >> 8;\n                bytes[j] &= 0xff\n            }\n\n            while (carry) {\n                bytes.push(carry & 0xff);\n                carry >>= 8;\n            }\n        }\n        // deal with leading zeros\n        for (i = 0; string[i] === '1' && i < string.length - 1; ++i){\n            bytes.push(0);\n        }\n\n        return bytes.reverse();\n    }\n};\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvbXVsdGljb2luLWFkZHJlc3MtdmFsaWRhdG9yL3NyYy9jcnlwdG8vYmFzZTU4LmpzIiwibWFwcGluZ3MiOiJBQUFBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0EsZ0JBQWdCLHFCQUFxQjtBQUNyQztBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBOztBQUVBO0FBQ0Esb0JBQW9CLG1CQUFtQjtBQUN2QztBQUNBOztBQUVBLHdCQUF3QixrQkFBa0I7QUFDMUM7O0FBRUE7QUFDQSx3QkFBd0Isa0JBQWtCO0FBQzFDO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLG9CQUFvQiw0Q0FBNEM7QUFDaEU7QUFDQTs7QUFFQTtBQUNBO0FBQ0EiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9naXRodWJzdHJlYW1pbmcvLi9ub2RlX21vZHVsZXMvbXVsdGljb2luLWFkZHJlc3MtdmFsaWRhdG9yL3NyYy9jcnlwdG8vYmFzZTU4LmpzP2Q4NTUiXSwic291cmNlc0NvbnRlbnQiOlsiLy8gQmFzZTU4IGVuY29kaW5nL2RlY29kaW5nXG4vLyBPcmlnaW5hbGx5IHdyaXR0ZW4gYnkgTWlrZSBIZWFybiBmb3IgQml0Y29pbkpcbi8vIENvcHlyaWdodCAoYykgMjAxMSBHb29nbGUgSW5jXG4vLyBQb3J0ZWQgdG8gSmF2YVNjcmlwdCBieSBTdGVmYW4gVGhvbWFzXG4vLyBNZXJnZWQgQnVmZmVyIHJlZmFjdG9yaW5ncyBmcm9tIGJhc2U1OC1uYXRpdmUgYnkgU3RlcGhlbiBQYWlyXG4vLyBDb3B5cmlnaHQgKGMpIDIwMTMgQml0UGF5IEluY1xuXG52YXIgQUxQSEFCRVQgPSAnMTIzNDU2Nzg5QUJDREVGR0hKS0xNTlBRUlNUVVZXWFlaYWJjZGVmZ2hpamttbm9wcXJzdHV2d3h5eic7XG52YXIgQUxQSEFCRVRfTUFQID0ge307XG5mb3IgKHZhciBpID0gMDsgaSA8IEFMUEhBQkVULmxlbmd0aDsgKytpKSB7XG4gICAgQUxQSEFCRVRfTUFQW0FMUEhBQkVULmNoYXJBdChpKV0gPSBpO1xufVxudmFyIEJBU0UgPSBBTFBIQUJFVC5sZW5ndGg7XG5cbm1vZHVsZS5leHBvcnRzID0ge1xuICAgIGRlY29kZTogZnVuY3Rpb24oc3RyaW5nKSB7XG4gICAgICAgIGlmIChzdHJpbmcubGVuZ3RoID09PSAwKSByZXR1cm4gW107XG5cbiAgICAgICAgdmFyIGksIGosIGJ5dGVzID0gWzBdO1xuICAgICAgICBmb3IgKGkgPSAwOyBpIDwgc3RyaW5nLmxlbmd0aDsgKytpKSB7XG4gICAgICAgICAgICB2YXIgYyA9IHN0cmluZ1tpXTtcbiAgICAgICAgICAgIGlmICghKGMgaW4gQUxQSEFCRVRfTUFQKSkgdGhyb3cgbmV3IEVycm9yKCdOb24tYmFzZTU4IGNoYXJhY3RlcicpO1xuXG4gICAgICAgICAgICBmb3IgKGogPSAwOyBqIDwgYnl0ZXMubGVuZ3RoOyArK2opIGJ5dGVzW2pdICo9IEJBU0VcbiAgICAgICAgICAgIGJ5dGVzWzBdICs9IEFMUEhBQkVUX01BUFtjXTtcblxuICAgICAgICAgICAgdmFyIGNhcnJ5ID0gMDtcbiAgICAgICAgICAgIGZvciAoaiA9IDA7IGogPCBieXRlcy5sZW5ndGg7ICsraikge1xuICAgICAgICAgICAgICAgIGJ5dGVzW2pdICs9IGNhcnJ5O1xuICAgICAgICAgICAgICAgIGNhcnJ5ID0gYnl0ZXNbal0gPj4gODtcbiAgICAgICAgICAgICAgICBieXRlc1tqXSAmPSAweGZmXG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIHdoaWxlIChjYXJyeSkge1xuICAgICAgICAgICAgICAgIGJ5dGVzLnB1c2goY2FycnkgJiAweGZmKTtcbiAgICAgICAgICAgICAgICBjYXJyeSA+Pj0gODtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgICAvLyBkZWFsIHdpdGggbGVhZGluZyB6ZXJvc1xuICAgICAgICBmb3IgKGkgPSAwOyBzdHJpbmdbaV0gPT09ICcxJyAmJiBpIDwgc3RyaW5nLmxlbmd0aCAtIDE7ICsraSl7XG4gICAgICAgICAgICBieXRlcy5wdXNoKDApO1xuICAgICAgICB9XG5cbiAgICAgICAgcmV0dXJuIGJ5dGVzLnJldmVyc2UoKTtcbiAgICB9XG59O1xuIl0sIm5hbWVzIjpbXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/multicoin-address-validator/src/crypto/base58.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/multicoin-address-validator/src/crypto/bech32.js":
/*!***********************************************************************!*\
  !*** ./node_modules/multicoin-address-validator/src/crypto/bech32.js ***!
  \***********************************************************************/
/***/ ((module) => {

eval("// Copyright (c) 2017, 2021 Pieter Wuille\n//\n// Permission is hereby granted, free of charge, to any person obtaining a copy\n// of this software and associated documentation files (the \"Software\"), to deal\n// in the Software without restriction, including without limitation the rights\n// to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n// copies of the Software, and to permit persons to whom the Software is\n// furnished to do so, subject to the following conditions:\n//\n// The above copyright notice and this permission notice shall be included in\n// all copies or substantial portions of the Software.\n//\n// THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n// FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n// AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n// LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n// OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\n// THE SOFTWARE.\n\nvar CHARSET = 'qpzry9x8gf2tvdw0s3jn54khce6mua7l';\nvar GENERATOR = [0x3b6a57b2, 0x26508e6d, 0x1ea119fa, 0x3d4233dd, 0x2a1462b3];\n\nconst encodings = {\n    BECH32: \"bech32\",\n    BECH32M: \"bech32m\",\n};\n\nmodule.exports = {\n    decode: decode,\n    encode: encode,\n    encodings: encodings,\n    verifyChecksum: verifyChecksum\n};\n\nfunction getEncodingConst (enc) {\n    if (enc == encodings.BECH32) {\n        return 1;\n    } else if (enc == encodings.BECH32M) {\n        return 0x2bc830a3;\n    } else {\n        return null;\n    }\n}\n\nfunction polymod (values) {\n    var chk = 1;\n    for (var p = 0; p < values.length; ++p) {\n        var top = chk >> 25;\n        chk = (chk & 0x1ffffff) << 5 ^ values[p];\n        for (var i = 0; i < 5; ++i) {\n            if ((top >> i) & 1) {\n                chk ^= GENERATOR[i];\n            }\n        }\n    }\n    return chk;\n}\n\nfunction hrpExpand (hrp) {\n    var ret = [];\n    var p;\n    for (p = 0; p < hrp.length; ++p) {\n        ret.push(hrp.charCodeAt(p) >> 5);\n    }\n    ret.push(0);\n    for (p = 0; p < hrp.length; ++p) {\n        ret.push(hrp.charCodeAt(p) & 31);\n    }\n    return ret;\n}\n\nfunction verifyChecksum (hrp, data, enc) {\n    return polymod(hrpExpand(hrp).concat(data)) === getEncodingConst(enc);\n}\n\nfunction createChecksum (hrp, data, enc) {\n    var values = hrpExpand(hrp).concat(data).concat([0, 0, 0, 0, 0, 0]);\n    var mod = polymod(values) ^ getEncodingConst(enc);\n    var ret = [];\n    for (var p = 0; p < 6; ++p) {\n        ret.push((mod >> 5 * (5 - p)) & 31);\n    }\n    return ret;\n}\n\nfunction encode (hrp, data, enc) {\n    var combined = data.concat(createChecksum(hrp, data, enc));\n    var ret = hrp + '1';\n    for (var p = 0; p < combined.length; ++p) {\n        ret += CHARSET.charAt(combined[p]);\n    }\n    return ret;\n}\n\nfunction decode (bechString, enc) {\n    var p;\n    var has_lower = false;\n    var has_upper = false;\n    for (p = 0; p < bechString.length; ++p) {\n        if (bechString.charCodeAt(p) < 33 || bechString.charCodeAt(p) > 126) {\n            return null;\n        }\n        if (bechString.charCodeAt(p) >= 97 && bechString.charCodeAt(p) <= 122) {\n            has_lower = true;\n        }\n        if (bechString.charCodeAt(p) >= 65 && bechString.charCodeAt(p) <= 90) {\n            has_upper = true;\n        }\n    }\n    if (has_lower && has_upper) {\n        return null;\n    }\n    bechString = bechString.toLowerCase();\n    var pos = bechString.lastIndexOf('1');\n    if (pos < 1 || pos + 7 > bechString.length || bechString.length > 110) {\n        return null;\n    }\n    var hrp = bechString.substring(0, pos);\n    var data = [];\n    for (p = pos + 1; p < bechString.length; ++p) {\n        var d = CHARSET.indexOf(bechString.charAt(p));\n        if (d === -1) {\n            return null;\n        }\n        data.push(d);\n    }\n    if (!verifyChecksum(hrp, data, enc)) {\n        return null;\n    }\n    return {hrp: hrp, data: data.slice(0, data.length - 6)};\n}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvbXVsdGljb2luLWFkZHJlc3MtdmFsaWRhdG9yL3NyYy9jcnlwdG8vYmVjaDMyLmpzIiwibWFwcGluZ3MiOiJBQUFBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBLE1BQU07QUFDTjtBQUNBLE1BQU07QUFDTjtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBLG9CQUFvQixtQkFBbUI7QUFDdkM7QUFDQTtBQUNBLHdCQUF3QixPQUFPO0FBQy9CO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBLGdCQUFnQixnQkFBZ0I7QUFDaEM7QUFDQTtBQUNBO0FBQ0EsZ0JBQWdCLGdCQUFnQjtBQUNoQztBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQSxvQkFBb0IsT0FBTztBQUMzQjtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQSxvQkFBb0IscUJBQXFCO0FBQ3pDO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsZ0JBQWdCLHVCQUF1QjtBQUN2QztBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0Esc0JBQXNCLHVCQUF1QjtBQUM3QztBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxZQUFZO0FBQ1oiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9naXRodWJzdHJlYW1pbmcvLi9ub2RlX21vZHVsZXMvbXVsdGljb2luLWFkZHJlc3MtdmFsaWRhdG9yL3NyYy9jcnlwdG8vYmVjaDMyLmpzP2VjNWQiXSwic291cmNlc0NvbnRlbnQiOlsiLy8gQ29weXJpZ2h0IChjKSAyMDE3LCAyMDIxIFBpZXRlciBXdWlsbGVcbi8vXG4vLyBQZXJtaXNzaW9uIGlzIGhlcmVieSBncmFudGVkLCBmcmVlIG9mIGNoYXJnZSwgdG8gYW55IHBlcnNvbiBvYnRhaW5pbmcgYSBjb3B5XG4vLyBvZiB0aGlzIHNvZnR3YXJlIGFuZCBhc3NvY2lhdGVkIGRvY3VtZW50YXRpb24gZmlsZXMgKHRoZSBcIlNvZnR3YXJlXCIpLCB0byBkZWFsXG4vLyBpbiB0aGUgU29mdHdhcmUgd2l0aG91dCByZXN0cmljdGlvbiwgaW5jbHVkaW5nIHdpdGhvdXQgbGltaXRhdGlvbiB0aGUgcmlnaHRzXG4vLyB0byB1c2UsIGNvcHksIG1vZGlmeSwgbWVyZ2UsIHB1Ymxpc2gsIGRpc3RyaWJ1dGUsIHN1YmxpY2Vuc2UsIGFuZC9vciBzZWxsXG4vLyBjb3BpZXMgb2YgdGhlIFNvZnR3YXJlLCBhbmQgdG8gcGVybWl0IHBlcnNvbnMgdG8gd2hvbSB0aGUgU29mdHdhcmUgaXNcbi8vIGZ1cm5pc2hlZCB0byBkbyBzbywgc3ViamVjdCB0byB0aGUgZm9sbG93aW5nIGNvbmRpdGlvbnM6XG4vL1xuLy8gVGhlIGFib3ZlIGNvcHlyaWdodCBub3RpY2UgYW5kIHRoaXMgcGVybWlzc2lvbiBub3RpY2Ugc2hhbGwgYmUgaW5jbHVkZWQgaW5cbi8vIGFsbCBjb3BpZXMgb3Igc3Vic3RhbnRpYWwgcG9ydGlvbnMgb2YgdGhlIFNvZnR3YXJlLlxuLy9cbi8vIFRIRSBTT0ZUV0FSRSBJUyBQUk9WSURFRCBcIkFTIElTXCIsIFdJVEhPVVQgV0FSUkFOVFkgT0YgQU5ZIEtJTkQsIEVYUFJFU1MgT1Jcbi8vIElNUExJRUQsIElOQ0xVRElORyBCVVQgTk9UIExJTUlURUQgVE8gVEhFIFdBUlJBTlRJRVMgT0YgTUVSQ0hBTlRBQklMSVRZLFxuLy8gRklUTkVTUyBGT1IgQSBQQVJUSUNVTEFSIFBVUlBPU0UgQU5EIE5PTklORlJJTkdFTUVOVC4gSU4gTk8gRVZFTlQgU0hBTEwgVEhFXG4vLyBBVVRIT1JTIE9SIENPUFlSSUdIVCBIT0xERVJTIEJFIExJQUJMRSBGT1IgQU5ZIENMQUlNLCBEQU1BR0VTIE9SIE9USEVSXG4vLyBMSUFCSUxJVFksIFdIRVRIRVIgSU4gQU4gQUNUSU9OIE9GIENPTlRSQUNULCBUT1JUIE9SIE9USEVSV0lTRSwgQVJJU0lORyBGUk9NLFxuLy8gT1VUIE9GIE9SIElOIENPTk5FQ1RJT04gV0lUSCBUSEUgU09GVFdBUkUgT1IgVEhFIFVTRSBPUiBPVEhFUiBERUFMSU5HUyBJTlxuLy8gVEhFIFNPRlRXQVJFLlxuXG52YXIgQ0hBUlNFVCA9ICdxcHpyeTl4OGdmMnR2ZHcwczNqbjU0a2hjZTZtdWE3bCc7XG52YXIgR0VORVJBVE9SID0gWzB4M2I2YTU3YjIsIDB4MjY1MDhlNmQsIDB4MWVhMTE5ZmEsIDB4M2Q0MjMzZGQsIDB4MmExNDYyYjNdO1xuXG5jb25zdCBlbmNvZGluZ3MgPSB7XG4gICAgQkVDSDMyOiBcImJlY2gzMlwiLFxuICAgIEJFQ0gzMk06IFwiYmVjaDMybVwiLFxufTtcblxubW9kdWxlLmV4cG9ydHMgPSB7XG4gICAgZGVjb2RlOiBkZWNvZGUsXG4gICAgZW5jb2RlOiBlbmNvZGUsXG4gICAgZW5jb2RpbmdzOiBlbmNvZGluZ3MsXG4gICAgdmVyaWZ5Q2hlY2tzdW06IHZlcmlmeUNoZWNrc3VtXG59O1xuXG5mdW5jdGlvbiBnZXRFbmNvZGluZ0NvbnN0IChlbmMpIHtcbiAgICBpZiAoZW5jID09IGVuY29kaW5ncy5CRUNIMzIpIHtcbiAgICAgICAgcmV0dXJuIDE7XG4gICAgfSBlbHNlIGlmIChlbmMgPT0gZW5jb2RpbmdzLkJFQ0gzMk0pIHtcbiAgICAgICAgcmV0dXJuIDB4MmJjODMwYTM7XG4gICAgfSBlbHNlIHtcbiAgICAgICAgcmV0dXJuIG51bGw7XG4gICAgfVxufVxuXG5mdW5jdGlvbiBwb2x5bW9kICh2YWx1ZXMpIHtcbiAgICB2YXIgY2hrID0gMTtcbiAgICBmb3IgKHZhciBwID0gMDsgcCA8IHZhbHVlcy5sZW5ndGg7ICsrcCkge1xuICAgICAgICB2YXIgdG9wID0gY2hrID4+IDI1O1xuICAgICAgICBjaGsgPSAoY2hrICYgMHgxZmZmZmZmKSA8PCA1IF4gdmFsdWVzW3BdO1xuICAgICAgICBmb3IgKHZhciBpID0gMDsgaSA8IDU7ICsraSkge1xuICAgICAgICAgICAgaWYgKCh0b3AgPj4gaSkgJiAxKSB7XG4gICAgICAgICAgICAgICAgY2hrIF49IEdFTkVSQVRPUltpXTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgIH1cbiAgICByZXR1cm4gY2hrO1xufVxuXG5mdW5jdGlvbiBocnBFeHBhbmQgKGhycCkge1xuICAgIHZhciByZXQgPSBbXTtcbiAgICB2YXIgcDtcbiAgICBmb3IgKHAgPSAwOyBwIDwgaHJwLmxlbmd0aDsgKytwKSB7XG4gICAgICAgIHJldC5wdXNoKGhycC5jaGFyQ29kZUF0KHApID4+IDUpO1xuICAgIH1cbiAgICByZXQucHVzaCgwKTtcbiAgICBmb3IgKHAgPSAwOyBwIDwgaHJwLmxlbmd0aDsgKytwKSB7XG4gICAgICAgIHJldC5wdXNoKGhycC5jaGFyQ29kZUF0KHApICYgMzEpO1xuICAgIH1cbiAgICByZXR1cm4gcmV0O1xufVxuXG5mdW5jdGlvbiB2ZXJpZnlDaGVja3N1bSAoaHJwLCBkYXRhLCBlbmMpIHtcbiAgICByZXR1cm4gcG9seW1vZChocnBFeHBhbmQoaHJwKS5jb25jYXQoZGF0YSkpID09PSBnZXRFbmNvZGluZ0NvbnN0KGVuYyk7XG59XG5cbmZ1bmN0aW9uIGNyZWF0ZUNoZWNrc3VtIChocnAsIGRhdGEsIGVuYykge1xuICAgIHZhciB2YWx1ZXMgPSBocnBFeHBhbmQoaHJwKS5jb25jYXQoZGF0YSkuY29uY2F0KFswLCAwLCAwLCAwLCAwLCAwXSk7XG4gICAgdmFyIG1vZCA9IHBvbHltb2QodmFsdWVzKSBeIGdldEVuY29kaW5nQ29uc3QoZW5jKTtcbiAgICB2YXIgcmV0ID0gW107XG4gICAgZm9yICh2YXIgcCA9IDA7IHAgPCA2OyArK3ApIHtcbiAgICAgICAgcmV0LnB1c2goKG1vZCA+PiA1ICogKDUgLSBwKSkgJiAzMSk7XG4gICAgfVxuICAgIHJldHVybiByZXQ7XG59XG5cbmZ1bmN0aW9uIGVuY29kZSAoaHJwLCBkYXRhLCBlbmMpIHtcbiAgICB2YXIgY29tYmluZWQgPSBkYXRhLmNvbmNhdChjcmVhdGVDaGVja3N1bShocnAsIGRhdGEsIGVuYykpO1xuICAgIHZhciByZXQgPSBocnAgKyAnMSc7XG4gICAgZm9yICh2YXIgcCA9IDA7IHAgPCBjb21iaW5lZC5sZW5ndGg7ICsrcCkge1xuICAgICAgICByZXQgKz0gQ0hBUlNFVC5jaGFyQXQoY29tYmluZWRbcF0pO1xuICAgIH1cbiAgICByZXR1cm4gcmV0O1xufVxuXG5mdW5jdGlvbiBkZWNvZGUgKGJlY2hTdHJpbmcsIGVuYykge1xuICAgIHZhciBwO1xuICAgIHZhciBoYXNfbG93ZXIgPSBmYWxzZTtcbiAgICB2YXIgaGFzX3VwcGVyID0gZmFsc2U7XG4gICAgZm9yIChwID0gMDsgcCA8IGJlY2hTdHJpbmcubGVuZ3RoOyArK3ApIHtcbiAgICAgICAgaWYgKGJlY2hTdHJpbmcuY2hhckNvZGVBdChwKSA8IDMzIHx8IGJlY2hTdHJpbmcuY2hhckNvZGVBdChwKSA+IDEyNikge1xuICAgICAgICAgICAgcmV0dXJuIG51bGw7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKGJlY2hTdHJpbmcuY2hhckNvZGVBdChwKSA+PSA5NyAmJiBiZWNoU3RyaW5nLmNoYXJDb2RlQXQocCkgPD0gMTIyKSB7XG4gICAgICAgICAgICBoYXNfbG93ZXIgPSB0cnVlO1xuICAgICAgICB9XG4gICAgICAgIGlmIChiZWNoU3RyaW5nLmNoYXJDb2RlQXQocCkgPj0gNjUgJiYgYmVjaFN0cmluZy5jaGFyQ29kZUF0KHApIDw9IDkwKSB7XG4gICAgICAgICAgICBoYXNfdXBwZXIgPSB0cnVlO1xuICAgICAgICB9XG4gICAgfVxuICAgIGlmIChoYXNfbG93ZXIgJiYgaGFzX3VwcGVyKSB7XG4gICAgICAgIHJldHVybiBudWxsO1xuICAgIH1cbiAgICBiZWNoU3RyaW5nID0gYmVjaFN0cmluZy50b0xvd2VyQ2FzZSgpO1xuICAgIHZhciBwb3MgPSBiZWNoU3RyaW5nLmxhc3RJbmRleE9mKCcxJyk7XG4gICAgaWYgKHBvcyA8IDEgfHwgcG9zICsgNyA+IGJlY2hTdHJpbmcubGVuZ3RoIHx8IGJlY2hTdHJpbmcubGVuZ3RoID4gMTEwKSB7XG4gICAgICAgIHJldHVybiBudWxsO1xuICAgIH1cbiAgICB2YXIgaHJwID0gYmVjaFN0cmluZy5zdWJzdHJpbmcoMCwgcG9zKTtcbiAgICB2YXIgZGF0YSA9IFtdO1xuICAgIGZvciAocCA9IHBvcyArIDE7IHAgPCBiZWNoU3RyaW5nLmxlbmd0aDsgKytwKSB7XG4gICAgICAgIHZhciBkID0gQ0hBUlNFVC5pbmRleE9mKGJlY2hTdHJpbmcuY2hhckF0KHApKTtcbiAgICAgICAgaWYgKGQgPT09IC0xKSB7XG4gICAgICAgICAgICByZXR1cm4gbnVsbDtcbiAgICAgICAgfVxuICAgICAgICBkYXRhLnB1c2goZCk7XG4gICAgfVxuICAgIGlmICghdmVyaWZ5Q2hlY2tzdW0oaHJwLCBkYXRhLCBlbmMpKSB7XG4gICAgICAgIHJldHVybiBudWxsO1xuICAgIH1cbiAgICByZXR1cm4ge2hycDogaHJwLCBkYXRhOiBkYXRhLnNsaWNlKDAsIGRhdGEubGVuZ3RoIC0gNil9O1xufVxuIl0sIm5hbWVzIjpbXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/multicoin-address-validator/src/crypto/bech32.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/multicoin-address-validator/src/crypto/biginteger.js":
/*!***************************************************************************!*\
  !*** ./node_modules/multicoin-address-validator/src/crypto/biginteger.js ***!
  \***************************************************************************/
/***/ ((__unused_webpack_module, exports) => {

eval("/*\n\tJavaScript BigInteger library version 0.9.1\n\thttp://silentmatt.com/biginteger/\n\tCopyright (c) 2009 Matthew Crumley <email@matthewcrumley.com>\n\tCopyright (c) 2010,2011 by John Tobey <John.Tobey@gmail.com>\n\tLicensed under the MIT license.\n\tSupport for arbitrary internal representation base was added by\n\tVitaly Magerya.\n*/\n\n/*\n\tFile: biginteger.js\n\tExports:\n\t\t<BigInteger>\n*/\n(function(exports) {\n    \"use strict\";\n    /*\n        Class: BigInteger\n        An arbitrarily-large integer.\n        <BigInteger> objects should be considered immutable. None of the \"built-in\"\n        methods modify *this* or their arguments. All properties should be\n        considered private.\n        All the methods of <BigInteger> instances can be called \"statically\". The\n        static versions are convenient if you don't already have a <BigInteger>\n        object.\n        As an example, these calls are equivalent.\n        > BigInteger(4).multiply(5); // returns BigInteger(20);\n        > BigInteger.multiply(4, 5); // returns BigInteger(20);\n        > var a = 42;\n        > var a = BigInteger.toJSValue(\"0b101010\"); // Not completely useless...\n    */\n    \n    var CONSTRUCT = {}; // Unique token to call \"private\" version of constructor\n    \n    /*\n        Constructor: BigInteger()\n        Convert a value to a <BigInteger>.\n        Although <BigInteger()> is the constructor for <BigInteger> objects, it is\n        best not to call it as a constructor. If *n* is a <BigInteger> object, it is\n        simply returned as-is. Otherwise, <BigInteger()> is equivalent to <parse>\n        without a radix argument.\n        > var n0 = BigInteger();      // Same as <BigInteger.ZERO>\n        > var n1 = BigInteger(\"123\"); // Create a new <BigInteger> with value 123\n        > var n2 = BigInteger(123);   // Create a new <BigInteger> with value 123\n        > var n3 = BigInteger(n2);    // Return n2, unchanged\n        The constructor form only takes an array and a sign. *n* must be an\n        array of numbers in little-endian order, where each digit is between 0\n        and BigInteger.base.  The second parameter sets the sign: -1 for\n        negative, +1 for positive, or 0 for zero. The array is *not copied and\n        may be modified*. If the array contains only zeros, the sign parameter\n        is ignored and is forced to zero.\n        > new BigInteger([5], -1): create a new BigInteger with value -5\n        Parameters:\n            n - Value to convert to a <BigInteger>.\n        Returns:\n            A <BigInteger> value.\n        See Also:\n            <parse>, <BigInteger>\n    */\n    function BigInteger(n, s, token) {\n        \n        if (token !== CONSTRUCT) {\n            if (n instanceof BigInteger) {\n                return n;\n            }\n            else if (typeof n === \"undefined\") {\n                return ZERO;\n            }\n            return BigInteger.parse(n);\n        }\n    \n        n = n || [];  // Provide the nullary constructor for subclasses.\n        while (n.length && !n[n.length - 1]) {\n            --n.length;\n        }\n        this._d = n;\n        this._s = n.length ? (s || 1) : 0;\n    }\n    \n    BigInteger._construct = function(n, s) {\n        return new BigInteger(n, s, CONSTRUCT);\n    };\n    \n    // Base-10 speedup hacks in parse, toString, exp10 and log functions\n    // require base to be a power of 10. 10^7 is the largest such power\n    // that won't cause a precision loss when digits are multiplied.\n    var BigInteger_base = 10000000;\n    var BigInteger_base_log10 = 7;\n    \n    BigInteger.base = BigInteger_base;\n    BigInteger.base_log10 = BigInteger_base_log10;\n    \n    var ZERO = new BigInteger([], 0, CONSTRUCT);\n    // Constant: ZERO\n    // <BigInteger> 0.\n    BigInteger.ZERO = ZERO;\n    \n    var ONE = new BigInteger([1], 1, CONSTRUCT);\n    // Constant: ONE\n    // <BigInteger> 1.\n    BigInteger.ONE = ONE;\n    \n    var M_ONE = new BigInteger(ONE._d, -1, CONSTRUCT);\n    // Constant: M_ONE\n    // <BigInteger> -1.\n    BigInteger.M_ONE = M_ONE;\n    \n    // Constant: _0\n    // Shortcut for <ZERO>.\n    BigInteger._0 = ZERO;\n    \n    // Constant: _1\n    // Shortcut for <ONE>.\n    BigInteger._1 = ONE;\n    \n    /*\n        Constant: small\n        Array of <BigIntegers> from 0 to 36.\n        These are used internally for parsing, but useful when you need a \"small\"\n        <BigInteger>.\n        See Also:\n            <ZERO>, <ONE>, <_0>, <_1>\n    */\n    BigInteger.small = [\n        ZERO,\n        ONE,\n        /* Assuming BigInteger_base > 36 */\n        new BigInteger( [2], 1, CONSTRUCT),\n        new BigInteger( [3], 1, CONSTRUCT),\n        new BigInteger( [4], 1, CONSTRUCT),\n        new BigInteger( [5], 1, CONSTRUCT),\n        new BigInteger( [6], 1, CONSTRUCT),\n        new BigInteger( [7], 1, CONSTRUCT),\n        new BigInteger( [8], 1, CONSTRUCT),\n        new BigInteger( [9], 1, CONSTRUCT),\n        new BigInteger([10], 1, CONSTRUCT),\n        new BigInteger([11], 1, CONSTRUCT),\n        new BigInteger([12], 1, CONSTRUCT),\n        new BigInteger([13], 1, CONSTRUCT),\n        new BigInteger([14], 1, CONSTRUCT),\n        new BigInteger([15], 1, CONSTRUCT),\n        new BigInteger([16], 1, CONSTRUCT),\n        new BigInteger([17], 1, CONSTRUCT),\n        new BigInteger([18], 1, CONSTRUCT),\n        new BigInteger([19], 1, CONSTRUCT),\n        new BigInteger([20], 1, CONSTRUCT),\n        new BigInteger([21], 1, CONSTRUCT),\n        new BigInteger([22], 1, CONSTRUCT),\n        new BigInteger([23], 1, CONSTRUCT),\n        new BigInteger([24], 1, CONSTRUCT),\n        new BigInteger([25], 1, CONSTRUCT),\n        new BigInteger([26], 1, CONSTRUCT),\n        new BigInteger([27], 1, CONSTRUCT),\n        new BigInteger([28], 1, CONSTRUCT),\n        new BigInteger([29], 1, CONSTRUCT),\n        new BigInteger([30], 1, CONSTRUCT),\n        new BigInteger([31], 1, CONSTRUCT),\n        new BigInteger([32], 1, CONSTRUCT),\n        new BigInteger([33], 1, CONSTRUCT),\n        new BigInteger([34], 1, CONSTRUCT),\n        new BigInteger([35], 1, CONSTRUCT),\n        new BigInteger([36], 1, CONSTRUCT)\n    ];\n    \n    // Used for parsing/radix conversion\n    BigInteger.digits = \"0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZ\".split(\"\");\n    \n    /*\n        Method: toString\n        Convert a <BigInteger> to a string.\n        When *base* is greater than 10, letters are upper case.\n        Parameters:\n            base - Optional base to represent the number in (default is base 10).\n                   Must be between 2 and 36 inclusive, or an Error will be thrown.\n        Returns:\n            The string representation of the <BigInteger>.\n    */\n    BigInteger.prototype.toString = function(base) {\n        base = +base || 10;\n        if (base < 2 || base > 36) {\n            throw new Error(\"illegal radix \" + base + \".\");\n        }\n        if (this._s === 0) {\n            return \"0\";\n        }\n        if (base === 10) {\n            var str = this._s < 0 ? \"-\" : \"\";\n            str += this._d[this._d.length - 1].toString();\n            for (var i = this._d.length - 2; i >= 0; i--) {\n                var group = this._d[i].toString();\n                while (group.length < BigInteger_base_log10) group = '0' + group;\n                str += group;\n            }\n            return str;\n        }\n        else {\n            var numerals = BigInteger.digits;\n            base = BigInteger.small[base];\n            var sign = this._s;\n    \n            var n = this.abs();\n            var digits = [];\n            var digit;\n    \n            while (n._s !== 0) {\n                var divmod = n.divRem(base);\n                n = divmod[0];\n                digit = divmod[1];\n                // TODO: This could be changed to unshift instead of reversing at the end.\n                // Benchmark both to compare speeds.\n                digits.push(numerals[digit.valueOf()]);\n            }\n            return (sign < 0 ? \"-\" : \"\") + digits.reverse().join(\"\");\n        }\n    };\n    \n    // Verify strings for parsing\n    BigInteger.radixRegex = [\n        /^$/,\n        /^$/,\n        /^[01]*$/,\n        /^[012]*$/,\n        /^[0-3]*$/,\n        /^[0-4]*$/,\n        /^[0-5]*$/,\n        /^[0-6]*$/,\n        /^[0-7]*$/,\n        /^[0-8]*$/,\n        /^[0-9]*$/,\n        /^[0-9aA]*$/,\n        /^[0-9abAB]*$/,\n        /^[0-9abcABC]*$/,\n        /^[0-9a-dA-D]*$/,\n        /^[0-9a-eA-E]*$/,\n        /^[0-9a-fA-F]*$/,\n        /^[0-9a-gA-G]*$/,\n        /^[0-9a-hA-H]*$/,\n        /^[0-9a-iA-I]*$/,\n        /^[0-9a-jA-J]*$/,\n        /^[0-9a-kA-K]*$/,\n        /^[0-9a-lA-L]*$/,\n        /^[0-9a-mA-M]*$/,\n        /^[0-9a-nA-N]*$/,\n        /^[0-9a-oA-O]*$/,\n        /^[0-9a-pA-P]*$/,\n        /^[0-9a-qA-Q]*$/,\n        /^[0-9a-rA-R]*$/,\n        /^[0-9a-sA-S]*$/,\n        /^[0-9a-tA-T]*$/,\n        /^[0-9a-uA-U]*$/,\n        /^[0-9a-vA-V]*$/,\n        /^[0-9a-wA-W]*$/,\n        /^[0-9a-xA-X]*$/,\n        /^[0-9a-yA-Y]*$/,\n        /^[0-9a-zA-Z]*$/\n    ];\n    \n    /*\n        Function: parse\n        Parse a string into a <BigInteger>.\n        *base* is optional but, if provided, must be from 2 to 36 inclusive. If\n        *base* is not provided, it will be guessed based on the leading characters\n        of *s* as follows:\n        - \"0x\" or \"0X\": *base* = 16\n        - \"0c\" or \"0C\": *base* = 8\n        - \"0b\" or \"0B\": *base* = 2\n        - else: *base* = 10\n        If no base is provided, or *base* is 10, the number can be in exponential\n        form. For example, these are all valid:\n        > BigInteger.parse(\"1e9\");              // Same as \"1000000000\"\n        > BigInteger.parse(\"1.234*10^3\");       // Same as 1234\n        > BigInteger.parse(\"56789 * 10 ** -2\"); // Same as 567\n        If any characters fall outside the range defined by the radix, an exception\n        will be thrown.\n        Parameters:\n            s - The string to parse.\n            base - Optional radix (default is to guess based on *s*).\n        Returns:\n            a <BigInteger> instance.\n    */\n    BigInteger.parse = function(s, base) {\n        // Expands a number in exponential form to decimal form.\n        // expandExponential(\"-13.441*10^5\") === \"1344100\";\n        // expandExponential(\"1.12300e-1\") === \"0.112300\";\n        // expandExponential(1000000000000000000000000000000) === \"1000000000000000000000000000000\";\n        function expandExponential(str) {\n            str = str.replace(/\\s*[*xX]\\s*10\\s*(\\^|\\*\\*)\\s*/, \"e\");\n    \n            return str.replace(/^([+\\-])?(\\d+)\\.?(\\d*)[eE]([+\\-]?\\d+)$/, function(x, s, n, f, c) {\n                c = +c;\n                var l = c < 0;\n                var i = n.length + c;\n                x = (l ? n : f).length;\n                c = ((c = Math.abs(c)) >= x ? c - x + l : 0);\n                var z = (new Array(c + 1)).join(\"0\");\n                var r = n + f;\n                return (s || \"\") + (l ? r = z + r : r += z).substr(0, i += l ? z.length : 0) + (i < r.length ? \".\" + r.substr(i) : \"\");\n            });\n        }\n    \n        s = s.toString();\n        if (typeof base === \"undefined\" || +base === 10) {\n            s = expandExponential(s);\n        }\n    \n        var prefixRE;\n        if (typeof base === \"undefined\") {\n            prefixRE = '0[xcb]';\n        }\n        else if (base == 16) {\n            prefixRE = '0x';\n        }\n        else if (base == 8) {\n            prefixRE = '0c';\n        }\n        else if (base == 2) {\n            prefixRE = '0b';\n        }\n        else {\n            prefixRE = '';\n        }\n        var parts = new RegExp('^([+\\\\-]?)(' + prefixRE + ')?([0-9a-z]*)(?:\\\\.\\\\d*)?$', 'i').exec(s);\n        if (parts) {\n            var sign = parts[1] || \"+\";\n            var baseSection = parts[2] || \"\";\n            var digits = parts[3] || \"\";\n    \n            if (typeof base === \"undefined\") {\n                // Guess base\n                if (baseSection === \"0x\" || baseSection === \"0X\") { // Hex\n                    base = 16;\n                }\n                else if (baseSection === \"0c\" || baseSection === \"0C\") { // Octal\n                    base = 8;\n                }\n                else if (baseSection === \"0b\" || baseSection === \"0B\") { // Binary\n                    base = 2;\n                }\n                else {\n                    base = 10;\n                }\n            }\n            else if (base < 2 || base > 36) {\n                throw new Error(\"Illegal radix \" + base + \".\");\n            }\n    \n            base = +base;\n    \n            // Check for digits outside the range\n            if (!(BigInteger.radixRegex[base].test(digits))) {\n                throw new Error(\"Bad digit for radix \" + base);\n            }\n    \n            // Strip leading zeros, and convert to array\n            digits = digits.replace(/^0+/, \"\").split(\"\");\n            if (digits.length === 0) {\n                return ZERO;\n            }\n    \n            // Get the sign (we know it's not zero)\n            sign = (sign === \"-\") ? -1 : 1;\n    \n            // Optimize 10\n            if (base == 10) {\n                var d = [];\n                while (digits.length >= BigInteger_base_log10) {\n                    d.push(parseInt(digits.splice(digits.length-BigInteger.base_log10, BigInteger.base_log10).join(''), 10));\n                }\n                d.push(parseInt(digits.join(''), 10));\n                return new BigInteger(d, sign, CONSTRUCT);\n            }\n    \n            // Do the conversion\n            var d = ZERO;\n            base = BigInteger.small[base];\n            var small = BigInteger.small;\n            for (var i = 0; i < digits.length; i++) {\n                d = d.multiply(base).add(small[parseInt(digits[i], 36)]);\n            }\n            return new BigInteger(d._d, sign, CONSTRUCT);\n        }\n        else {\n            throw new Error(\"Invalid BigInteger format: \" + s);\n        }\n    };\n    \n    /*\n        Function: add\n        Add two <BigIntegers>.\n        Parameters:\n            n - The number to add to *this*. Will be converted to a <BigInteger>.\n        Returns:\n            The numbers added together.\n        See Also:\n            <subtract>, <multiply>, <quotient>, <next>\n    */\n    BigInteger.prototype.add = function(n) {\n        if (this._s === 0) {\n            return BigInteger(n);\n        }\n    \n        n = BigInteger(n);\n        if (n._s === 0) {\n            return this;\n        }\n        if (this._s !== n._s) {\n            n = n.negate();\n            return this.subtract(n);\n        }\n    \n        var a = this._d;\n        var b = n._d;\n        var al = a.length;\n        var bl = b.length;\n        var sum = new Array(Math.max(al, bl) + 1);\n        var size = Math.min(al, bl);\n        var carry = 0;\n        var digit;\n    \n        for (var i = 0; i < size; i++) {\n            digit = a[i] + b[i] + carry;\n            sum[i] = digit % BigInteger_base;\n            carry = (digit / BigInteger_base) | 0;\n        }\n        if (bl > al) {\n            a = b;\n            al = bl;\n        }\n        for (i = size; carry && i < al; i++) {\n            digit = a[i] + carry;\n            sum[i] = digit % BigInteger_base;\n            carry = (digit / BigInteger_base) | 0;\n        }\n        if (carry) {\n            sum[i] = carry;\n        }\n    \n        for ( ; i < al; i++) {\n            sum[i] = a[i];\n        }\n    \n        return new BigInteger(sum, this._s, CONSTRUCT);\n    };\n    \n    /*\n        Function: negate\n        Get the additive inverse of a <BigInteger>.\n        Returns:\n            A <BigInteger> with the same magnatude, but with the opposite sign.\n        See Also:\n            <abs>\n    */\n    BigInteger.prototype.negate = function() {\n        return new BigInteger(this._d, (-this._s) | 0, CONSTRUCT);\n    };\n    \n    /*\n        Function: abs\n        Get the absolute value of a <BigInteger>.\n        Returns:\n            A <BigInteger> with the same magnatude, but always positive (or zero).\n        See Also:\n            <negate>\n    */\n    BigInteger.prototype.abs = function() {\n        return (this._s < 0) ? this.negate() : this;\n    };\n    \n    /*\n        Function: subtract\n        Subtract two <BigIntegers>.\n        Parameters:\n            n - The number to subtract from *this*. Will be converted to a <BigInteger>.\n        Returns:\n            The *n* subtracted from *this*.\n        See Also:\n            <add>, <multiply>, <quotient>, <prev>\n    */\n    BigInteger.prototype.subtract = function(n) {\n        if (this._s === 0) {\n            return BigInteger(n).negate();\n        }\n    \n        n = BigInteger(n);\n        if (n._s === 0) {\n            return this;\n        }\n        if (this._s !== n._s) {\n            n = n.negate();\n            return this.add(n);\n        }\n    \n        var m = this;\n        // negative - negative => -|a| - -|b| => -|a| + |b| => |b| - |a|\n        if (this._s < 0) {\n            m = new BigInteger(n._d, 1, CONSTRUCT);\n            n = new BigInteger(this._d, 1, CONSTRUCT);\n        }\n    \n        // Both are positive => a - b\n        var sign = m.compareAbs(n);\n        if (sign === 0) {\n            return ZERO;\n        }\n        else if (sign < 0) {\n            // swap m and n\n            var t = n;\n            n = m;\n            m = t;\n        }\n    \n        // a > b\n        var a = m._d;\n        var b = n._d;\n        var al = a.length;\n        var bl = b.length;\n        var diff = new Array(al); // al >= bl since a > b\n        var borrow = 0;\n        var i;\n        var digit;\n    \n        for (i = 0; i < bl; i++) {\n            digit = a[i] - borrow - b[i];\n            if (digit < 0) {\n                digit += BigInteger_base;\n                borrow = 1;\n            }\n            else {\n                borrow = 0;\n            }\n            diff[i] = digit;\n        }\n        for (i = bl; i < al; i++) {\n            digit = a[i] - borrow;\n            if (digit < 0) {\n                digit += BigInteger_base;\n            }\n            else {\n                diff[i++] = digit;\n                break;\n            }\n            diff[i] = digit;\n        }\n        for ( ; i < al; i++) {\n            diff[i] = a[i];\n        }\n    \n        return new BigInteger(diff, sign, CONSTRUCT);\n    };\n    \n    (function() {\n        function addOne(n, sign) {\n            var a = n._d;\n            var sum = a.slice();\n            var carry = true;\n            var i = 0;\n    \n            while (true) {\n                var digit = (a[i] || 0) + 1;\n                sum[i] = digit % BigInteger_base;\n                if (digit <= BigInteger_base - 1) {\n                    break;\n                }\n                ++i;\n            }\n    \n            return new BigInteger(sum, sign, CONSTRUCT);\n        }\n    \n        function subtractOne(n, sign) {\n            var a = n._d;\n            var sum = a.slice();\n            var borrow = true;\n            var i = 0;\n    \n            while (true) {\n                var digit = (a[i] || 0) - 1;\n                if (digit < 0) {\n                    sum[i] = digit + BigInteger_base;\n                }\n                else {\n                    sum[i] = digit;\n                    break;\n                }\n                ++i;\n            }\n    \n            return new BigInteger(sum, sign, CONSTRUCT);\n        }\n    \n        /*\n            Function: next\n            Get the next <BigInteger> (add one).\n            Returns:\n                *this* + 1.\n            See Also:\n                <add>, <prev>\n        */\n        BigInteger.prototype.next = function() {\n            switch (this._s) {\n            case 0:\n                return ONE;\n            case -1:\n                return subtractOne(this, -1);\n            // case 1:\n            default:\n                return addOne(this, 1);\n            }\n        };\n    \n        /*\n            Function: prev\n            Get the previous <BigInteger> (subtract one).\n            Returns:\n                *this* - 1.\n            See Also:\n                <next>, <subtract>\n        */\n        BigInteger.prototype.prev = function() {\n            switch (this._s) {\n            case 0:\n                return M_ONE;\n            case -1:\n                return addOne(this, -1);\n            // case 1:\n            default:\n                return subtractOne(this, 1);\n            }\n        };\n    })();\n    \n    /*\n        Function: compareAbs\n        Compare the absolute value of two <BigIntegers>.\n        Calling <compareAbs> is faster than calling <abs> twice, then <compare>.\n        Parameters:\n            n - The number to compare to *this*. Will be converted to a <BigInteger>.\n        Returns:\n            -1, 0, or +1 if *|this|* is less than, equal to, or greater than *|n|*.\n        See Also:\n            <compare>, <abs>\n    */\n    BigInteger.prototype.compareAbs = function(n) {\n        if (this === n) {\n            return 0;\n        }\n    \n        if (!(n instanceof BigInteger)) {\n            if (!isFinite(n)) {\n                return(isNaN(n) ? n : -1);\n            }\n            n = BigInteger(n);\n        }\n    \n        if (this._s === 0) {\n            return (n._s !== 0) ? -1 : 0;\n        }\n        if (n._s === 0) {\n            return 1;\n        }\n    \n        var l = this._d.length;\n        var nl = n._d.length;\n        if (l < nl) {\n            return -1;\n        }\n        else if (l > nl) {\n            return 1;\n        }\n    \n        var a = this._d;\n        var b = n._d;\n        for (var i = l-1; i >= 0; i--) {\n            if (a[i] !== b[i]) {\n                return a[i] < b[i] ? -1 : 1;\n            }\n        }\n    \n        return 0;\n    };\n    \n    /*\n        Function: compare\n        Compare two <BigIntegers>.\n        Parameters:\n            n - The number to compare to *this*. Will be converted to a <BigInteger>.\n        Returns:\n            -1, 0, or +1 if *this* is less than, equal to, or greater than *n*.\n        See Also:\n            <compareAbs>, <isPositive>, <isNegative>, <isUnit>\n    */\n    BigInteger.prototype.compare = function(n) {\n        if (this === n) {\n            return 0;\n        }\n    \n        n = BigInteger(n);\n    \n        if (this._s === 0) {\n            return -n._s;\n        }\n    \n        if (this._s === n._s) { // both positive or both negative\n            var cmp = this.compareAbs(n);\n            return cmp * this._s;\n        }\n        else {\n            return this._s;\n        }\n    };\n    \n    /*\n        Function: isUnit\n        Return true iff *this* is either 1 or -1.\n        Returns:\n            true if *this* compares equal to <BigInteger.ONE> or <BigInteger.M_ONE>.\n        See Also:\n            <isZero>, <isNegative>, <isPositive>, <compareAbs>, <compare>,\n            <BigInteger.ONE>, <BigInteger.M_ONE>\n    */\n    BigInteger.prototype.isUnit = function() {\n        return this === ONE ||\n            this === M_ONE ||\n            (this._d.length === 1 && this._d[0] === 1);\n    };\n    \n    /*\n        Function: multiply\n        Multiply two <BigIntegers>.\n        Parameters:\n            n - The number to multiply *this* by. Will be converted to a\n            <BigInteger>.\n        Returns:\n            The numbers multiplied together.\n        See Also:\n            <add>, <subtract>, <quotient>, <square>\n    */\n    BigInteger.prototype.multiply = function(n) {\n        // TODO: Consider adding Karatsuba multiplication for large numbers\n        if (this._s === 0) {\n            return ZERO;\n        }\n    \n        n = BigInteger(n);\n        if (n._s === 0) {\n            return ZERO;\n        }\n        if (this.isUnit()) {\n            if (this._s < 0) {\n                return n.negate();\n            }\n            return n;\n        }\n        if (n.isUnit()) {\n            if (n._s < 0) {\n                return this.negate();\n            }\n            return this;\n        }\n        if (this === n) {\n            return this.square();\n        }\n    \n        var r = (this._d.length >= n._d.length);\n        var a = (r ? this : n)._d; // a will be longer than b\n        var b = (r ? n : this)._d;\n        var al = a.length;\n        var bl = b.length;\n    \n        var pl = al + bl;\n        var partial = new Array(pl);\n        var i;\n        for (i = 0; i < pl; i++) {\n            partial[i] = 0;\n        }\n    \n        for (i = 0; i < bl; i++) {\n            var carry = 0;\n            var bi = b[i];\n            var jlimit = al + i;\n            var digit;\n            for (var j = i; j < jlimit; j++) {\n                digit = partial[j] + bi * a[j - i] + carry;\n                carry = (digit / BigInteger_base) | 0;\n                partial[j] = (digit % BigInteger_base) | 0;\n            }\n            if (carry) {\n                digit = partial[j] + carry;\n                carry = (digit / BigInteger_base) | 0;\n                partial[j] = digit % BigInteger_base;\n            }\n        }\n        return new BigInteger(partial, this._s * n._s, CONSTRUCT);\n    };\n    \n    // Multiply a BigInteger by a single-digit native number\n    // Assumes that this and n are >= 0\n    // This is not really intended to be used outside the library itself\n    BigInteger.prototype.multiplySingleDigit = function(n) {\n        if (n === 0 || this._s === 0) {\n            return ZERO;\n        }\n        if (n === 1) {\n            return this;\n        }\n    \n        var digit;\n        if (this._d.length === 1) {\n            digit = this._d[0] * n;\n            if (digit >= BigInteger_base) {\n                return new BigInteger([(digit % BigInteger_base)|0,\n                        (digit / BigInteger_base)|0], 1, CONSTRUCT);\n            }\n            return new BigInteger([digit], 1, CONSTRUCT);\n        }\n    \n        if (n === 2) {\n            return this.add(this);\n        }\n        if (this.isUnit()) {\n            return new BigInteger([n], 1, CONSTRUCT);\n        }\n    \n        var a = this._d;\n        var al = a.length;\n    \n        var pl = al + 1;\n        var partial = new Array(pl);\n        for (var i = 0; i < pl; i++) {\n            partial[i] = 0;\n        }\n    \n        var carry = 0;\n        for (var j = 0; j < al; j++) {\n            digit = n * a[j] + carry;\n            carry = (digit / BigInteger_base) | 0;\n            partial[j] = (digit % BigInteger_base) | 0;\n        }\n        if (carry) {\n            partial[j] = carry;\n        }\n    \n        return new BigInteger(partial, 1, CONSTRUCT);\n    };\n    \n    /*\n        Function: square\n        Multiply a <BigInteger> by itself.\n        This is slightly faster than regular multiplication, since it removes the\n        duplicated multiplcations.\n        Returns:\n            > this.multiply(this)\n        See Also:\n            <multiply>\n    */\n    BigInteger.prototype.square = function() {\n        // Normally, squaring a 10-digit number would take 100 multiplications.\n        // Of these 10 are unique diagonals, of the remaining 90 (100-10), 45 are repeated.\n        // This procedure saves (N*(N-1))/2 multiplications, (e.g., 45 of 100 multiplies).\n        // Based on code by Gary Darby, Intellitech Systems Inc., www.DelphiForFun.org\n    \n        if (this._s === 0) {\n            return ZERO;\n        }\n        if (this.isUnit()) {\n            return ONE;\n        }\n    \n        var digits = this._d;\n        var length = digits.length;\n        var imult1 = new Array(length + length + 1);\n        var product, carry, k;\n        var i;\n    \n        // Calculate diagonal\n        for (i = 0; i < length; i++) {\n            k = i * 2;\n            product = digits[i] * digits[i];\n            carry = (product / BigInteger_base) | 0;\n            imult1[k] = product % BigInteger_base;\n            imult1[k + 1] = carry;\n        }\n    \n        // Calculate repeating part\n        for (i = 0; i < length; i++) {\n            carry = 0;\n            k = i * 2 + 1;\n            for (var j = i + 1; j < length; j++, k++) {\n                product = digits[j] * digits[i] * 2 + imult1[k] + carry;\n                carry = (product / BigInteger_base) | 0;\n                imult1[k] = product % BigInteger_base;\n            }\n            k = length + i;\n            var digit = carry + imult1[k];\n            carry = (digit / BigInteger_base) | 0;\n            imult1[k] = digit % BigInteger_base;\n            imult1[k + 1] += carry;\n        }\n    \n        return new BigInteger(imult1, 1, CONSTRUCT);\n    };\n    \n    /*\n        Function: quotient\n        Divide two <BigIntegers> and truncate towards zero.\n        <quotient> throws an exception if *n* is zero.\n        Parameters:\n            n - The number to divide *this* by. Will be converted to a <BigInteger>.\n        Returns:\n            The *this* / *n*, truncated to an integer.\n        See Also:\n            <add>, <subtract>, <multiply>, <divRem>, <remainder>\n    */\n    BigInteger.prototype.quotient = function(n) {\n        return this.divRem(n)[0];\n    };\n    \n    /*\n        Function: divide\n        Deprecated synonym for <quotient>.\n    */\n    BigInteger.prototype.divide = BigInteger.prototype.quotient;\n    \n    /*\n        Function: remainder\n        Calculate the remainder of two <BigIntegers>.\n        <remainder> throws an exception if *n* is zero.\n        Parameters:\n            n - The remainder after *this* is divided *this* by *n*. Will be\n                converted to a <BigInteger>.\n        Returns:\n            *this* % *n*.\n        See Also:\n            <divRem>, <quotient>\n    */\n    BigInteger.prototype.remainder = function(n) {\n        return this.divRem(n)[1];\n    };\n    \n    /*\n        Function: divRem\n        Calculate the integer quotient and remainder of two <BigIntegers>.\n        <divRem> throws an exception if *n* is zero.\n        Parameters:\n            n - The number to divide *this* by. Will be converted to a <BigInteger>.\n        Returns:\n            A two-element array containing the quotient and the remainder.\n            > a.divRem(b)\n            is exactly equivalent to\n            > [a.quotient(b), a.remainder(b)]\n            except it is faster, because they are calculated at the same time.\n        See Also:\n            <quotient>, <remainder>\n    */\n    BigInteger.prototype.divRem = function(n) {\n        n = BigInteger(n);\n        if (n._s === 0) {\n            throw new Error(\"Divide by zero\");\n        }\n        if (this._s === 0) {\n            return [ZERO, ZERO];\n        }\n        if (n._d.length === 1) {\n            return this.divRemSmall(n._s * n._d[0]);\n        }\n    \n        // Test for easy cases -- |n1| <= |n2|\n        switch (this.compareAbs(n)) {\n        case 0: // n1 == n2\n            return [this._s === n._s ? ONE : M_ONE, ZERO];\n        case -1: // |n1| < |n2|\n            return [ZERO, this];\n        }\n    \n        var sign = this._s * n._s;\n        var a = n.abs();\n        var b_digits = this._d;\n        var b_index = b_digits.length;\n        var digits = n._d.length;\n        var quot = [];\n        var guess;\n    \n        var part = new BigInteger([], 0, CONSTRUCT);\n    \n        while (b_index) {\n            part._d.unshift(b_digits[--b_index]);\n            part = new BigInteger(part._d, 1, CONSTRUCT);\n    \n            if (part.compareAbs(n) < 0) {\n                quot.push(0);\n                continue;\n            }\n            if (part._s === 0) {\n                guess = 0;\n            }\n            else {\n                var xlen = part._d.length, ylen = a._d.length;\n                var highx = part._d[xlen-1]*BigInteger_base + part._d[xlen-2];\n                var highy = a._d[ylen-1]*BigInteger_base + a._d[ylen-2];\n                if (part._d.length > a._d.length) {\n                    // The length of part._d can either match a._d length,\n                    // or exceed it by one.\n                    highx = (highx+1)*BigInteger_base;\n                }\n                guess = Math.ceil(highx/highy);\n            }\n            do {\n                var check = a.multiplySingleDigit(guess);\n                if (check.compareAbs(part) <= 0) {\n                    break;\n                }\n                guess--;\n            } while (guess);\n    \n            quot.push(guess);\n            if (!guess) {\n                continue;\n            }\n            var diff = part.subtract(check);\n            part._d = diff._d.slice();\n        }\n    \n        return [new BigInteger(quot.reverse(), sign, CONSTRUCT),\n               new BigInteger(part._d, this._s, CONSTRUCT)];\n    };\n    \n    // Throws an exception if n is outside of (-BigInteger.base, -1] or\n    // [1, BigInteger.base).  It's not necessary to call this, since the\n    // other division functions will call it if they are able to.\n    BigInteger.prototype.divRemSmall = function(n) {\n        var r;\n        n = +n;\n        if (n === 0) {\n            throw new Error(\"Divide by zero\");\n        }\n    \n        var n_s = n < 0 ? -1 : 1;\n        var sign = this._s * n_s;\n        n = Math.abs(n);\n    \n        if (n < 1 || n >= BigInteger_base) {\n            throw new Error(\"Argument out of range\");\n        }\n    \n        if (this._s === 0) {\n            return [ZERO, ZERO];\n        }\n    \n        if (n === 1 || n === -1) {\n            return [(sign === 1) ? this.abs() : new BigInteger(this._d, sign, CONSTRUCT), ZERO];\n        }\n    \n        // 2 <= n < BigInteger_base\n    \n        // divide a single digit by a single digit\n        if (this._d.length === 1) {\n            var q = new BigInteger([(this._d[0] / n) | 0], 1, CONSTRUCT);\n            r = new BigInteger([(this._d[0] % n) | 0], 1, CONSTRUCT);\n            if (sign < 0) {\n                q = q.negate();\n            }\n            if (this._s < 0) {\n                r = r.negate();\n            }\n            return [q, r];\n        }\n    \n        var digits = this._d.slice();\n        var quot = new Array(digits.length);\n        var part = 0;\n        var diff = 0;\n        var i = 0;\n        var guess;\n    \n        while (digits.length) {\n            part = part * BigInteger_base + digits[digits.length - 1];\n            if (part < n) {\n                quot[i++] = 0;\n                digits.pop();\n                diff = BigInteger_base * diff + part;\n                continue;\n            }\n            if (part === 0) {\n                guess = 0;\n            }\n            else {\n                guess = (part / n) | 0;\n            }\n    \n            var check = n * guess;\n            diff = part - check;\n            quot[i++] = guess;\n            if (!guess) {\n                digits.pop();\n                continue;\n            }\n    \n            digits.pop();\n            part = diff;\n        }\n    \n        r = new BigInteger([diff], 1, CONSTRUCT);\n        if (this._s < 0) {\n            r = r.negate();\n        }\n        return [new BigInteger(quot.reverse(), sign, CONSTRUCT), r];\n    };\n    \n    /*\n        Function: isEven\n        Return true iff *this* is divisible by two.\n        Note that <BigInteger.ZERO> is even.\n        Returns:\n            true if *this* is even, false otherwise.\n        See Also:\n            <isOdd>\n    */\n    BigInteger.prototype.isEven = function() {\n        var digits = this._d;\n        return this._s === 0 || digits.length === 0 || (digits[0] % 2) === 0;\n    };\n    \n    /*\n        Function: isOdd\n        Return true iff *this* is not divisible by two.\n        Returns:\n            true if *this* is odd, false otherwise.\n        See Also:\n            <isEven>\n    */\n    BigInteger.prototype.isOdd = function() {\n        return !this.isEven();\n    };\n    \n    /*\n        Function: sign\n        Get the sign of a <BigInteger>.\n        Returns:\n            * -1 if *this* < 0\n            * 0 if *this* == 0\n            * +1 if *this* > 0\n        See Also:\n            <isZero>, <isPositive>, <isNegative>, <compare>, <BigInteger.ZERO>\n    */\n    BigInteger.prototype.sign = function() {\n        return this._s;\n    };\n    \n    /*\n        Function: isPositive\n        Return true iff *this* > 0.\n        Returns:\n            true if *this*.compare(<BigInteger.ZERO>) == 1.\n        See Also:\n            <sign>, <isZero>, <isNegative>, <isUnit>, <compare>, <BigInteger.ZERO>\n    */\n    BigInteger.prototype.isPositive = function() {\n        return this._s > 0;\n    };\n    \n    /*\n        Function: isNegative\n        Return true iff *this* < 0.\n        Returns:\n            true if *this*.compare(<BigInteger.ZERO>) == -1.\n        See Also:\n            <sign>, <isPositive>, <isZero>, <isUnit>, <compare>, <BigInteger.ZERO>\n    */\n    BigInteger.prototype.isNegative = function() {\n        return this._s < 0;\n    };\n    \n    /*\n        Function: isZero\n        Return true iff *this* == 0.\n        Returns:\n            true if *this*.compare(<BigInteger.ZERO>) == 0.\n        See Also:\n            <sign>, <isPositive>, <isNegative>, <isUnit>, <BigInteger.ZERO>\n    */\n    BigInteger.prototype.isZero = function() {\n        return this._s === 0;\n    };\n    \n    /*\n        Function: exp10\n        Multiply a <BigInteger> by a power of 10.\n        This is equivalent to, but faster than\n        > if (n >= 0) {\n        >     return this.multiply(BigInteger(\"1e\" + n));\n        > }\n        > else { // n <= 0\n        >     return this.quotient(BigInteger(\"1e\" + -n));\n        > }\n        Parameters:\n            n - The power of 10 to multiply *this* by. *n* is converted to a\n            javascipt number and must be no greater than <BigInteger.MAX_EXP>\n            (0x7FFFFFFF), or an exception will be thrown.\n        Returns:\n            *this* * (10 ** *n*), truncated to an integer if necessary.\n        See Also:\n            <pow>, <multiply>\n    */\n    BigInteger.prototype.exp10 = function(n) {\n        n = +n;\n        if (n === 0) {\n            return this;\n        }\n        if (Math.abs(n) > Number(MAX_EXP)) {\n            throw new Error(\"exponent too large in BigInteger.exp10\");\n        }\n        // Optimization for this == 0. This also keeps us from having to trim zeros in the positive n case\n        if (this._s === 0) {\n            return ZERO;\n        }\n        if (n > 0) {\n            var k = new BigInteger(this._d.slice(), this._s, CONSTRUCT);\n    \n            for (; n >= BigInteger_base_log10; n -= BigInteger_base_log10) {\n                k._d.unshift(0);\n            }\n            if (n == 0)\n                return k;\n            k._s = 1;\n            k = k.multiplySingleDigit(Math.pow(10, n));\n            return (this._s < 0 ? k.negate() : k);\n        } else if (-n >= this._d.length*BigInteger_base_log10) {\n            return ZERO;\n        } else {\n            var k = new BigInteger(this._d.slice(), this._s, CONSTRUCT);\n    \n            for (n = -n; n >= BigInteger_base_log10; n -= BigInteger_base_log10) {\n                k._d.shift();\n            }\n            return (n == 0) ? k : k.divRemSmall(Math.pow(10, n))[0];\n        }\n    };\n    \n    /*\n        Function: pow\n        Raise a <BigInteger> to a power.\n        In this implementation, 0**0 is 1.\n        Parameters:\n            n - The exponent to raise *this* by. *n* must be no greater than\n            <BigInteger.MAX_EXP> (0x7FFFFFFF), or an exception will be thrown.\n        Returns:\n            *this* raised to the *nth* power.\n        See Also:\n            <modPow>\n    */\n    BigInteger.prototype.pow = function(n) {\n        if (this.isUnit()) {\n            if (this._s > 0) {\n                return this;\n            }\n            else {\n                return BigInteger(n).isOdd() ? this : this.negate();\n            }\n        }\n    \n        n = BigInteger(n);\n        if (n._s === 0) {\n            return ONE;\n        }\n        else if (n._s < 0) {\n            if (this._s === 0) {\n                throw new Error(\"Divide by zero\");\n            }\n            else {\n                return ZERO;\n            }\n        }\n        if (this._s === 0) {\n            return ZERO;\n        }\n        if (n.isUnit()) {\n            return this;\n        }\n    \n        if (n.compareAbs(MAX_EXP) > 0) {\n            throw new Error(\"exponent too large in BigInteger.pow\");\n        }\n        var x = this;\n        var aux = ONE;\n        var two = BigInteger.small[2];\n    \n        while (n.isPositive()) {\n            if (n.isOdd()) {\n                aux = aux.multiply(x);\n                if (n.isUnit()) {\n                    return aux;\n                }\n            }\n            x = x.square();\n            n = n.quotient(two);\n        }\n    \n        return aux;\n    };\n    \n    /*\n        Function: modPow\n        Raise a <BigInteger> to a power (mod m).\n        Because it is reduced by a modulus, <modPow> is not limited by\n        <BigInteger.MAX_EXP> like <pow>.\n        Parameters:\n            exponent - The exponent to raise *this* by. Must be positive.\n            modulus - The modulus.\n        Returns:\n            *this* ^ *exponent* (mod *modulus*).\n        See Also:\n            <pow>, <mod>\n    */\n    BigInteger.prototype.modPow = function(exponent, modulus) {\n        var result = ONE;\n        var base = this;\n    \n        while (exponent.isPositive()) {\n            if (exponent.isOdd()) {\n                result = result.multiply(base).remainder(modulus);\n            }\n    \n            exponent = exponent.quotient(BigInteger.small[2]);\n            if (exponent.isPositive()) {\n                base = base.square().remainder(modulus);\n            }\n        }\n    \n        return result;\n    };\n    \n    /*\n        Function: log\n        Get the natural logarithm of a <BigInteger> as a native JavaScript number.\n        This is equivalent to\n        > Math.log(this.toJSValue())\n        but handles values outside of the native number range.\n        Returns:\n            log( *this* )\n        See Also:\n            <toJSValue>\n    */\n    BigInteger.prototype.log = function() {\n        switch (this._s) {\n        case 0:\t return -Infinity;\n        case -1: return NaN;\n        default: // Fall through.\n        }\n    \n        var l = this._d.length;\n    \n        if (l*BigInteger_base_log10 < 30) {\n            return Math.log(this.valueOf());\n        }\n    \n        var N = Math.ceil(30/BigInteger_base_log10);\n        var firstNdigits = this._d.slice(l - N);\n        return Math.log((new BigInteger(firstNdigits, 1, CONSTRUCT)).valueOf()) + (l - N) * Math.log(BigInteger_base);\n    };\n    \n    /*\n        Function: valueOf\n        Convert a <BigInteger> to a native JavaScript integer.\n        This is called automatically by JavaScipt to convert a <BigInteger> to a\n        native value.\n        Returns:\n            > parseInt(this.toString(), 10)\n        See Also:\n            <toString>, <toJSValue>\n    */\n    BigInteger.prototype.valueOf = function() {\n        return parseInt(this.toString(), 10);\n    };\n    \n    /*\n        Function: toJSValue\n        Convert a <BigInteger> to a native JavaScript integer.\n        This is the same as valueOf, but more explicitly named.\n        Returns:\n            > parseInt(this.toString(), 10)\n        See Also:\n            <toString>, <valueOf>\n    */\n    BigInteger.prototype.toJSValue = function() {\n        return parseInt(this.toString(), 10);\n    };\n    \n    \n    /*\n     Function: lowVal\n     Author: Lucas Jones\n     */\n    BigInteger.prototype.lowVal = function () {\n        return this._d[0] || 0;\n    };\n    \n    var MAX_EXP = BigInteger(0x7FFFFFFF);\n    // Constant: MAX_EXP\n    // The largest exponent allowed in <pow> and <exp10> (0x7FFFFFFF or 2147483647).\n    BigInteger.MAX_EXP = MAX_EXP;\n    \n    (function() {\n        function makeUnary(fn) {\n            return function(a) {\n                return fn.call(BigInteger(a));\n            };\n        }\n    \n        function makeBinary(fn) {\n            return function(a, b) {\n                return fn.call(BigInteger(a), BigInteger(b));\n            };\n        }\n    \n        function makeTrinary(fn) {\n            return function(a, b, c) {\n                return fn.call(BigInteger(a), BigInteger(b), BigInteger(c));\n            };\n        }\n    \n        (function() {\n            var i, fn;\n            var unary = \"toJSValue,isEven,isOdd,sign,isZero,isNegative,abs,isUnit,square,negate,isPositive,toString,next,prev,log\".split(\",\");\n            var binary = \"compare,remainder,divRem,subtract,add,quotient,divide,multiply,pow,compareAbs\".split(\",\");\n            var trinary = [\"modPow\"];\n    \n            for (i = 0; i < unary.length; i++) {\n                fn = unary[i];\n                BigInteger[fn] = makeUnary(BigInteger.prototype[fn]);\n            }\n    \n            for (i = 0; i < binary.length; i++) {\n                fn = binary[i];\n                BigInteger[fn] = makeBinary(BigInteger.prototype[fn]);\n            }\n    \n            for (i = 0; i < trinary.length; i++) {\n                fn = trinary[i];\n                BigInteger[fn] = makeTrinary(BigInteger.prototype[fn]);\n            }\n    \n            BigInteger.exp10 = function(x, n) {\n                return BigInteger(x).exp10(n);\n            };\n        })();\n    })();\n    \n    exports.JSBigInt = BigInteger; // exports.BigInteger changed to exports.JSBigInt\n    })( true ? exports : 0);//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/multicoin-address-validator/src/crypto/biginteger.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/multicoin-address-validator/src/crypto/blake256.js":
/*!*************************************************************************!*\
  !*** ./node_modules/multicoin-address-validator/src/crypto/blake256.js ***!
  \*************************************************************************/
/***/ ((module) => {

"use strict";
eval("\n\n/**\n * Credits to https://github.com/cryptocoinjs/blake-hash\n */\nBlake256.sigma = [\n    [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15],\n    [14, 10, 4, 8, 9, 15, 13, 6, 1, 12, 0, 2, 11, 7, 5, 3],\n    [11, 8, 12, 0, 5, 2, 15, 13, 10, 14, 3, 6, 7, 1, 9, 4],\n    [7, 9, 3, 1, 13, 12, 11, 14, 2, 6, 5, 10, 4, 0, 15, 8],\n    [9, 0, 5, 7, 2, 4, 10, 15, 14, 1, 11, 12, 6, 8, 3, 13],\n    [2, 12, 6, 10, 0, 11, 8, 3, 4, 13, 7, 5, 15, 14, 1, 9],\n    [12, 5, 1, 15, 14, 13, 4, 10, 0, 7, 6, 3, 9, 2, 8, 11],\n    [13, 11, 7, 14, 12, 1, 3, 9, 5, 0, 15, 4, 8, 6, 2, 10],\n    [6, 15, 14, 9, 11, 3, 0, 8, 12, 2, 13, 7, 1, 4, 10, 5],\n    [10, 2, 8, 4, 7, 6, 1, 5, 15, 11, 9, 14, 3, 12, 13, 0],\n    [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15],\n    [14, 10, 4, 8, 9, 15, 13, 6, 1, 12, 0, 2, 11, 7, 5, 3],\n    [11, 8, 12, 0, 5, 2, 15, 13, 10, 14, 3, 6, 7, 1, 9, 4],\n    [7, 9, 3, 1, 13, 12, 11, 14, 2, 6, 5, 10, 4, 0, 15, 8],\n    [9, 0, 5, 7, 2, 4, 10, 15, 14, 1, 11, 12, 6, 8, 3, 13],\n    [2, 12, 6, 10, 0, 11, 8, 3, 4, 13, 7, 5, 15, 14, 1, 9]\n]\n\nBlake256.u256 = [\n    0x243f6a88, 0x85a308d3, 0x13198a2e, 0x03707344,\n    0xa4093822, 0x299f31d0, 0x082efa98, 0xec4e6c89,\n    0x452821e6, 0x38d01377, 0xbe5466cf, 0x34e90c6c,\n    0xc0ac29b7, 0xc97c50dd, 0x3f84d5b5, 0xb5470917\n]\n\nBlake256.padding = Buffer.from([\n    0x80, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,\n    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,\n    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,\n    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,\n    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,\n    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,\n    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,\n    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0\n])\n\nBlake256.prototype._length_carry = function (arr) {\n    for (var j = 0; j < arr.length; ++j) {\n        if (arr[j] < 0x0100000000) break\n        arr[j] -= 0x0100000000\n        arr[j + 1] += 1\n    }\n}\n\nBlake256.prototype.update = function (data, encoding) {\n    data = Buffer.from(data, encoding);\n    var block = this._block\n    var offset = 0\n\n    while (this._blockOffset + data.length - offset >= block.length) {\n        for (var i = this._blockOffset; i < block.length;) block[i++] = data[offset++]\n\n        this._length[0] += block.length * 8\n        this._length_carry(this._length)\n\n        this._compress()\n        this._blockOffset = 0\n    }\n\n    while (offset < data.length) block[this._blockOffset++] = data[offset++]\n    return this;\n}\n\nvar zo = Buffer.from([0x01])\nvar oo = Buffer.from([0x81])\n\nfunction rot (x, n) {\n    return ((x << (32 - n)) | (x >>> n)) >>> 0\n}\n\nfunction g (v, m, i, a, b, c, d, e) {\n    var sigma = Blake256.sigma\n    var u256 = Blake256.u256\n\n    v[a] = (v[a] + ((m[sigma[i][e]] ^ u256[sigma[i][e + 1]]) >>> 0) + v[b]) >>> 0\n    v[d] = rot(v[d] ^ v[a], 16)\n    v[c] = (v[c] + v[d]) >>> 0\n    v[b] = rot(v[b] ^ v[c], 12)\n    v[a] = (v[a] + ((m[sigma[i][e + 1]] ^ u256[sigma[i][e]]) >>> 0) + v[b]) >>> 0\n    v[d] = rot(v[d] ^ v[a], 8)\n    v[c] = (v[c] + v[d]) >>> 0\n    v[b] = rot(v[b] ^ v[c], 7)\n}\n\nfunction Blake256 () {\n    this._h = [\n        0x6a09e667, 0xbb67ae85, 0x3c6ef372, 0xa54ff53a,\n        0x510e527f, 0x9b05688c, 0x1f83d9ab, 0x5be0cd19\n    ]\n\n    this._s = [0, 0, 0, 0]\n\n    this._block = Buffer.allocUnsafe(64)\n    this._blockOffset = 0\n    this._length = [0, 0]\n\n    this._nullt = false\n\n    this._zo = zo\n    this._oo = oo\n}\n\nBlake256.prototype._compress = function () {\n    var u256 = Blake256.u256\n    var v = new Array(16)\n    var m = new Array(16)\n    var i\n\n    for (i = 0; i < 16; ++i) m[i] = this._block.readUInt32BE(i * 4)\n    for (i = 0; i < 8; ++i) v[i] = this._h[i] >>> 0\n    for (i = 8; i < 12; ++i) v[i] = (this._s[i - 8] ^ u256[i - 8]) >>> 0\n    for (i = 12; i < 16; ++i) v[i] = u256[i - 8]\n\n    if (!this._nullt) {\n        v[12] = (v[12] ^ this._length[0]) >>> 0\n        v[13] = (v[13] ^ this._length[0]) >>> 0\n        v[14] = (v[14] ^ this._length[1]) >>> 0\n        v[15] = (v[15] ^ this._length[1]) >>> 0\n    }\n\n    for (i = 0; i < 14; ++i) {\n        /* column step */\n        g(v, m, i, 0, 4, 8, 12, 0)\n        g(v, m, i, 1, 5, 9, 13, 2)\n        g(v, m, i, 2, 6, 10, 14, 4)\n        g(v, m, i, 3, 7, 11, 15, 6)\n        /* diagonal step */\n        g(v, m, i, 0, 5, 10, 15, 8)\n        g(v, m, i, 1, 6, 11, 12, 10)\n        g(v, m, i, 2, 7, 8, 13, 12)\n        g(v, m, i, 3, 4, 9, 14, 14)\n    }\n\n    for (i = 0; i < 16; ++i) this._h[i % 8] = (this._h[i % 8] ^ v[i]) >>> 0\n    for (i = 0; i < 8; ++i) this._h[i] = (this._h[i] ^ this._s[i % 4]) >>> 0\n}\n\nBlake256.prototype._padding = function () {\n    var lo = this._length[0] + this._blockOffset * 8\n    var hi = this._length[1]\n    if (lo >= 0x0100000000) {\n        lo -= 0x0100000000\n        hi += 1\n    }\n\n    var msglen = Buffer.allocUnsafe(8)\n    msglen.writeUInt32BE(hi, 0)\n    msglen.writeUInt32BE(lo, 4)\n\n    if (this._blockOffset === 55) {\n        this._length[0] -= 8\n        this.update(this._oo)\n    } else {\n        if (this._blockOffset < 55) {\n            if (this._blockOffset === 0) this._nullt = true\n            this._length[0] -= (55 - this._blockOffset) * 8\n            this.update(Blake256.padding.slice(0, 55 - this._blockOffset))\n        } else {\n            this._length[0] -= (64 - this._blockOffset) * 8\n            this.update(Blake256.padding.slice(0, 64 - this._blockOffset))\n            this._length[0] -= 55 * 8\n            this.update(Blake256.padding.slice(1, 1 + 55))\n            this._nullt = true\n        }\n\n        this.update(this._zo)\n        this._length[0] -= 8\n    }\n\n    this._length[0] -= 64\n    this.update(msglen)\n}\n\nBlake256.prototype.digest = function (encoding) {\n    this._padding()\n\n    var buffer = Buffer.allocUnsafe(32)\n    for (var i = 0; i < 8; ++i) buffer.writeUInt32BE(this._h[i], i * 4)\n    return buffer.toString(encoding);\n}\n\nmodule.exports = Blake256;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/multicoin-address-validator/src/crypto/blake256.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/multicoin-address-validator/src/crypto/blake2b.js":
/*!************************************************************************!*\
  !*** ./node_modules/multicoin-address-validator/src/crypto/blake2b.js ***!
  \************************************************************************/
/***/ ((module) => {

"use strict";
eval("\n\n/**\n * Credits to https://github.com/emilbayes/blake2b\n *\n * Copyright (c) 2017, Emil Bay github@tixz.dk\n *\n * Permission to use, copy, modify, and/or distribute this software for any purpose with or without fee is hereby granted, provided that the above copyright notice and this permission notice appear in all copies.\n *\n * THE SOFTWARE IS PROVIDED \"AS IS\" AND THE AUTHOR DISCLAIMS ALL WARRANTIES WITH REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR ANY SPECIAL, DIRECT, INDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES WHATSOEVER RESULTING FROM LOSS OF USE, DATA OR PROFITS, WHETHER IN AN ACTION OF CONTRACT, NEGLIGENCE OR OTHER TORTIOUS ACTION, ARISING OUT OF OR IN CONNECTION WITH THE USE OR PERFORMANCE OF THIS SOFTWARE.\n */\n\n// 64-bit unsigned addition\n// Sets v[a,a+1] += v[b,b+1]\n// v should be a Uint32Array\nfunction ADD64AA (v, a, b) {\n  var o0 = v[a] + v[b]\n  var o1 = v[a + 1] + v[b + 1]\n  if (o0 >= 0x100000000) {\n    o1++\n  }\n  v[a] = o0\n  v[a + 1] = o1\n}\n\n// 64-bit unsigned addition\n// Sets v[a,a+1] += b\n// b0 is the low 32 bits of b, b1 represents the high 32 bits\nfunction ADD64AC (v, a, b0, b1) {\n  var o0 = v[a] + b0\n  if (b0 < 0) {\n    o0 += 0x100000000\n  }\n  var o1 = v[a + 1] + b1\n  if (o0 >= 0x100000000) {\n    o1++\n  }\n  v[a] = o0\n  v[a + 1] = o1\n}\n\n// Little-endian byte access\nfunction B2B_GET32 (arr, i) {\n  return (arr[i] ^\n  (arr[i + 1] << 8) ^\n  (arr[i + 2] << 16) ^\n  (arr[i + 3] << 24))\n}\n\n// G Mixing function\n// The ROTRs are inlined for speed\nfunction B2B_G (a, b, c, d, ix, iy) {\n  var x0 = m[ix]\n  var x1 = m[ix + 1]\n  var y0 = m[iy]\n  var y1 = m[iy + 1]\n\n  ADD64AA(v, a, b) // v[a,a+1] += v[b,b+1] ... in JS we must store a uint64 as two uint32s\n  ADD64AC(v, a, x0, x1) // v[a, a+1] += x ... x0 is the low 32 bits of x, x1 is the high 32 bits\n\n  // v[d,d+1] = (v[d,d+1] xor v[a,a+1]) rotated to the right by 32 bits\n  var xor0 = v[d] ^ v[a]\n  var xor1 = v[d + 1] ^ v[a + 1]\n  v[d] = xor1\n  v[d + 1] = xor0\n\n  ADD64AA(v, c, d)\n\n  // v[b,b+1] = (v[b,b+1] xor v[c,c+1]) rotated right by 24 bits\n  xor0 = v[b] ^ v[c]\n  xor1 = v[b + 1] ^ v[c + 1]\n  v[b] = (xor0 >>> 24) ^ (xor1 << 8)\n  v[b + 1] = (xor1 >>> 24) ^ (xor0 << 8)\n\n  ADD64AA(v, a, b)\n  ADD64AC(v, a, y0, y1)\n\n  // v[d,d+1] = (v[d,d+1] xor v[a,a+1]) rotated right by 16 bits\n  xor0 = v[d] ^ v[a]\n  xor1 = v[d + 1] ^ v[a + 1]\n  v[d] = (xor0 >>> 16) ^ (xor1 << 16)\n  v[d + 1] = (xor1 >>> 16) ^ (xor0 << 16)\n\n  ADD64AA(v, c, d)\n\n  // v[b,b+1] = (v[b,b+1] xor v[c,c+1]) rotated right by 63 bits\n  xor0 = v[b] ^ v[c]\n  xor1 = v[b + 1] ^ v[c + 1]\n  v[b] = (xor1 >>> 31) ^ (xor0 << 1)\n  v[b + 1] = (xor0 >>> 31) ^ (xor1 << 1)\n}\n\n// Initialization Vector\nvar BLAKE2B_IV32 = new Uint32Array([\n  0xF3BCC908, 0x6A09E667, 0x84CAA73B, 0xBB67AE85,\n  0xFE94F82B, 0x3C6EF372, 0x5F1D36F1, 0xA54FF53A,\n  0xADE682D1, 0x510E527F, 0x2B3E6C1F, 0x9B05688C,\n  0xFB41BD6B, 0x1F83D9AB, 0x137E2179, 0x5BE0CD19\n])\n\nvar SIGMA8 = [\n  0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15,\n  14, 10, 4, 8, 9, 15, 13, 6, 1, 12, 0, 2, 11, 7, 5, 3,\n  11, 8, 12, 0, 5, 2, 15, 13, 10, 14, 3, 6, 7, 1, 9, 4,\n  7, 9, 3, 1, 13, 12, 11, 14, 2, 6, 5, 10, 4, 0, 15, 8,\n  9, 0, 5, 7, 2, 4, 10, 15, 14, 1, 11, 12, 6, 8, 3, 13,\n  2, 12, 6, 10, 0, 11, 8, 3, 4, 13, 7, 5, 15, 14, 1, 9,\n  12, 5, 1, 15, 14, 13, 4, 10, 0, 7, 6, 3, 9, 2, 8, 11,\n  13, 11, 7, 14, 12, 1, 3, 9, 5, 0, 15, 4, 8, 6, 2, 10,\n  6, 15, 14, 9, 11, 3, 0, 8, 12, 2, 13, 7, 1, 4, 10, 5,\n  10, 2, 8, 4, 7, 6, 1, 5, 15, 11, 9, 14, 3, 12, 13, 0,\n  0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15,\n  14, 10, 4, 8, 9, 15, 13, 6, 1, 12, 0, 2, 11, 7, 5, 3\n]\n\n// These are offsets into a uint64 buffer.\n// Multiply them all by 2 to make them offsets into a uint32 buffer,\n// because this is Javascript and we don't have uint64s\nvar SIGMA82 = new Uint8Array(SIGMA8.map(function (x) { return x * 2 }))\n\n// Compression function. 'last' flag indicates last block.\n// Note we're representing 16 uint64s as 32 uint32s\nvar v = new Uint32Array(32)\nvar m = new Uint32Array(32)\nfunction blake2bCompress (ctx, last) {\n  var i = 0\n\n  // init work variables\n  for (i = 0; i < 16; i++) {\n    v[i] = ctx.h[i]\n    v[i + 16] = BLAKE2B_IV32[i]\n  }\n\n  // low 64 bits of offset\n  v[24] = v[24] ^ ctx.t\n  v[25] = v[25] ^ (ctx.t / 0x100000000)\n  // high 64 bits not supported, offset may not be higher than 2**53-1\n\n  // last block flag set ?\n  if (last) {\n    v[28] = ~v[28]\n    v[29] = ~v[29]\n  }\n\n  // get little-endian words\n  for (i = 0; i < 32; i++) {\n    m[i] = B2B_GET32(ctx.b, 4 * i)\n  }\n\n  // twelve rounds of mixing\n  for (i = 0; i < 12; i++) {\n    B2B_G(0, 8, 16, 24, SIGMA82[i * 16 + 0], SIGMA82[i * 16 + 1])\n    B2B_G(2, 10, 18, 26, SIGMA82[i * 16 + 2], SIGMA82[i * 16 + 3])\n    B2B_G(4, 12, 20, 28, SIGMA82[i * 16 + 4], SIGMA82[i * 16 + 5])\n    B2B_G(6, 14, 22, 30, SIGMA82[i * 16 + 6], SIGMA82[i * 16 + 7])\n    B2B_G(0, 10, 20, 30, SIGMA82[i * 16 + 8], SIGMA82[i * 16 + 9])\n    B2B_G(2, 12, 22, 24, SIGMA82[i * 16 + 10], SIGMA82[i * 16 + 11])\n    B2B_G(4, 14, 16, 26, SIGMA82[i * 16 + 12], SIGMA82[i * 16 + 13])\n    B2B_G(6, 8, 18, 28, SIGMA82[i * 16 + 14], SIGMA82[i * 16 + 15])\n  }\n\n  for (i = 0; i < 16; i++) {\n    ctx.h[i] = ctx.h[i] ^ v[i] ^ v[i + 16]\n  }\n}\n\n// reusable parameter_block\nvar parameter_block = new Uint8Array([\n  0, 0, 0, 0,      //  0: outlen, keylen, fanout, depth\n  0, 0, 0, 0,      //  4: leaf length, sequential mode\n  0, 0, 0, 0,      //  8: node offset\n  0, 0, 0, 0,      // 12: node offset\n  0, 0, 0, 0,      // 16: node depth, inner length, rfu\n  0, 0, 0, 0,      // 20: rfu\n  0, 0, 0, 0,      // 24: rfu\n  0, 0, 0, 0,      // 28: rfu\n  0, 0, 0, 0,      // 32: salt\n  0, 0, 0, 0,      // 36: salt\n  0, 0, 0, 0,      // 40: salt\n  0, 0, 0, 0,      // 44: salt\n  0, 0, 0, 0,      // 48: personal\n  0, 0, 0, 0,      // 52: personal\n  0, 0, 0, 0,      // 56: personal\n  0, 0, 0, 0       // 60: personal\n])\n\n// Creates a BLAKE2b hashing context\n// Requires an output length between 1 and 64 bytes\n// Takes an optional Uint8Array key\nfunction Blake2b (outlen, key, salt, personal) {\n  // zero out parameter_block before usage\n  parameter_block.fill(0)\n  // state, 'param block'\n\n  this.b = new Uint8Array(128)\n  this.h = new Uint32Array(16)\n  this.t = 0 // input count\n  this.c = 0 // pointer within buffer\n  this.outlen = outlen // output length in bytes\n\n  parameter_block[0] = outlen\n  if (key) parameter_block[1] = key.length\n  parameter_block[2] = 1 // fanout\n  parameter_block[3] = 1 // depth\n\n  if (salt) parameter_block.set(salt, 32)\n  if (personal) parameter_block.set(personal, 48)\n\n  // initialize hash state\n  for (var i = 0; i < 16; i++) {\n    this.h[i] = BLAKE2B_IV32[i] ^ B2B_GET32(parameter_block, i * 4)\n  }\n\n  // key the hash, if applicable\n  if (key) {\n    blake2bUpdate(this, key)\n    // at the end\n    this.c = 128\n  }\n}\n\nBlake2b.prototype.update = function (input) {\n  blake2bUpdate(this, input)\n  return this\n}\n\nBlake2b.prototype.digest = function (out) {\n  var buf = (!out || out === 'binary' || out === 'hex') ? new Uint8Array(this.outlen) : out\n  blake2bFinal(this, buf)\n  if (out === 'hex') return hexSlice(buf)\n  return buf\n}\n\nBlake2b.prototype.final = Blake2b.prototype.digest\n\n// Updates a BLAKE2b streaming hash\n// Requires hash context and Uint8Array (byte array)\nfunction blake2bUpdate (ctx, input) {\n  for (var i = 0; i < input.length; i++) {\n    if (ctx.c === 128) { // buffer full ?\n      ctx.t += ctx.c // add counters\n      blake2bCompress(ctx, false) // compress (not last)\n      ctx.c = 0 // counter to zero\n    }\n    ctx.b[ctx.c++] = input[i]\n  }\n}\n\n// Completes a BLAKE2b streaming hash\n// Returns a Uint8Array containing the message digest\nfunction blake2bFinal (ctx, out) {\n  ctx.t += ctx.c // mark last block offset\n\n  while (ctx.c < 128) { // fill up with zeros\n    ctx.b[ctx.c++] = 0\n  }\n  blake2bCompress(ctx, true) // final block flag = 1\n\n  for (var i = 0; i < ctx.outlen; i++) {\n    out[i] = ctx.h[i >> 2] >> (8 * (i & 3))\n  }\n  return out\n}\n\nfunction hexSlice (buf) {\n  var str = ''\n  for (var i = 0; i < buf.length; i++) str += toHex(buf[i])\n  return str\n}\n\nfunction toHex (n) {\n  if (n < 16) return '0' + n.toString(16)\n  return n.toString(16)\n}\n\nmodule.exports = Blake2b;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/multicoin-address-validator/src/crypto/blake2b.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/multicoin-address-validator/src/crypto/cnBase58.js":
/*!*************************************************************************!*\
  !*** ./node_modules/multicoin-address-validator/src/crypto/cnBase58.js ***!
  \*************************************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

eval("var JSBigInt = (__webpack_require__(/*! ./biginteger */ \"(ssr)/./node_modules/multicoin-address-validator/src/crypto/biginteger.js\").JSBigInt);\n\n/**\nCopyright (c) 2017, moneroexamples\n\nAll rights reserved.\n\nRedistribution and use in source and binary forms, with or without\nmodification, are permitted provided that the following conditions are met:\n\n1. Redistributions of source code must retain the above copyright notice, this\nlist of conditions and the following disclaimer.\n\n2. Redistributions in binary form must reproduce the above copyright notice,\nthis list of conditions and the following disclaimer in the documentation\nand/or other materials provided with the distribution.\n\n3. Neither the name of the copyright holder nor the names of its contributors\nmay be used to endorse or promote products derived from this software without\nspecific prior written permission.\n\nTHIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS \"AS IS\" AND\nANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED\nWARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE\nDISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE\nFOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL\nDAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR\nSERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER\nCAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY,\nOR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE\nOF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.\n\nParts of the project are originally copyright (c) 2014-2017, MyMonero.com\n*/\n\nvar cnBase58 = (function () {\n    var b58 = {};\n\n    var alphabet_str = \"123456789ABCDEFGHJKLMNPQRSTUVWXYZabcdefghijkmnopqrstuvwxyz\";\n    var alphabet = [];\n    for (var i = 0; i < alphabet_str.length; i++) {\n        alphabet.push(alphabet_str.charCodeAt(i));\n    }\n    var encoded_block_sizes = [0, 2, 3, 5, 6, 7, 9, 10, 11];\n\n    var alphabet_size = alphabet.length;\n    var full_block_size = 8;\n    var full_encoded_block_size = 11;\n\n    var UINT64_MAX = new JSBigInt(2).pow(64);\n\n    function hextobin(hex) {\n        if (hex.length % 2 !== 0) throw \"Hex string has invalid length!\";\n        var res = new Uint8Array(hex.length / 2);\n        for (var i = 0; i < hex.length / 2; ++i) {\n            res[i] = parseInt(hex.slice(i * 2, i * 2 + 2), 16);\n        }\n        return res;\n    }\n\n    function bintohex(bin) {\n        var out = [];\n        for (var i = 0; i < bin.length; ++i) {\n            out.push((\"0\" + bin[i].toString(16)).slice(-2));\n        }\n        return out.join(\"\");\n    }\n\n    function strtobin(str) {\n        var res = new Uint8Array(str.length);\n        for (var i = 0; i < str.length; i++) {\n            res[i] = str.charCodeAt(i);\n        }\n        return res;\n    }\n\n    function bintostr(bin) {\n        var out = [];\n        for (var i = 0; i < bin.length; i++) {\n            out.push(String.fromCharCode(bin[i]));\n        }\n        return out.join(\"\");\n    }\n\n    function uint8_be_to_64(data) {\n        if (data.length < 1 || data.length > 8) {\n            throw \"Invalid input length\";\n        }\n        var res = JSBigInt.ZERO;\n        var twopow8 = new JSBigInt(2).pow(8);\n        var i = 0;\n        switch (9 - data.length) {\n        case 1:\n            res = res.add(data[i++]);\n        case 2:\n            res = res.multiply(twopow8).add(data[i++]);\n        case 3:\n            res = res.multiply(twopow8).add(data[i++]);\n        case 4:\n            res = res.multiply(twopow8).add(data[i++]);\n        case 5:\n            res = res.multiply(twopow8).add(data[i++]);\n        case 6:\n            res = res.multiply(twopow8).add(data[i++]);\n        case 7:\n            res = res.multiply(twopow8).add(data[i++]);\n        case 8:\n            res = res.multiply(twopow8).add(data[i++]);\n            break;\n        default:\n            throw \"Impossible condition\";\n        }\n        return res;\n    }\n\n    function uint64_to_8be(num, size) {\n        var res = new Uint8Array(size);\n        if (size < 1 || size > 8) {\n            throw \"Invalid input length\";\n        }\n        var twopow8 = new JSBigInt(2).pow(8);\n        for (var i = size - 1; i >= 0; i--) {\n            res[i] = num.remainder(twopow8).toJSValue();\n            num = num.divide(twopow8);\n        }\n        return res;\n    }\n\n    b58.encode_block = function (data, buf, index) {\n        if (data.length < 1 || data.length > full_encoded_block_size) {\n            throw \"Invalid block length: \" + data.length;\n        }\n        var num = uint8_be_to_64(data);\n        var i = encoded_block_sizes[data.length] - 1;\n        // while num > 0\n        while (num.compare(0) === 1) {\n            var div = num.divRem(alphabet_size);\n            // remainder = num % alphabet_size\n            var remainder = div[1];\n            // num = num / alphabet_size\n            num = div[0];\n            buf[index + i] = alphabet[remainder.toJSValue()];\n            i--;\n        }\n        return buf;\n    };\n\n    b58.encode = function (hex) {\n        var data = hextobin(hex);\n        if (data.length === 0) {\n            return \"\";\n        }\n        var full_block_count = Math.floor(data.length / full_block_size);\n        var last_block_size = data.length % full_block_size;\n        var res_size = full_block_count * full_encoded_block_size + encoded_block_sizes[last_block_size];\n\n        var res = new Uint8Array(res_size);\n        var i;\n        for (i = 0; i < res_size; ++i) {\n            res[i] = alphabet[0];\n        }\n        for (i = 0; i < full_block_count; i++) {\n            res = b58.encode_block(data.subarray(i * full_block_size, i * full_block_size + full_block_size), res, i * full_encoded_block_size);\n        }\n        if (last_block_size > 0) {\n            res = b58.encode_block(data.subarray(full_block_count * full_block_size, full_block_count * full_block_size + last_block_size), res, full_block_count * full_encoded_block_size)\n        }\n        return bintostr(res);\n    };\n\n    b58.decode_block = function (data, buf, index) {\n        if (data.length < 1 || data.length > full_encoded_block_size) {\n            throw \"Invalid block length: \" + data.length;\n        }\n\n        var res_size = encoded_block_sizes.indexOf(data.length);\n        if (res_size <= 0) {\n            throw \"Invalid block size\";\n        }\n        var res_num = new JSBigInt(0);\n        var order = new JSBigInt(1);\n        for (var i = data.length - 1; i >= 0; i--) {\n            var digit = alphabet.indexOf(data[i]);\n            if (digit < 0) {\n                throw \"Invalid symbol\";\n            }\n            var product = order.multiply(digit).add(res_num);\n            // if product > UINT64_MAX\n            if (product.compare(UINT64_MAX) === 1) {\n                throw \"Overflow\";\n            }\n            res_num = product;\n            order = order.multiply(alphabet_size);\n        }\n        if (res_size < full_block_size && (new JSBigInt(2).pow(8 * res_size).compare(res_num) <= 0)) {\n            throw \"Overflow 2\";\n        }\n        buf.set(uint64_to_8be(res_num, res_size), index);\n        return buf;\n    };\n\n    b58.decode = function (enc) {\n        enc = strtobin(enc);\n        if (enc.length === 0) {\n            return \"\";\n        }\n        var full_block_count = Math.floor(enc.length / full_encoded_block_size);\n        var last_block_size = enc.length % full_encoded_block_size;\n        var last_block_decoded_size = encoded_block_sizes.indexOf(last_block_size);\n        if (last_block_decoded_size < 0) {\n            throw \"Invalid encoded length\";\n        }\n        var data_size = full_block_count * full_block_size + last_block_decoded_size;\n        var data = new Uint8Array(data_size);\n        for (var i = 0; i < full_block_count; i++) {\n            data = b58.decode_block(enc.subarray(i * full_encoded_block_size, i * full_encoded_block_size + full_encoded_block_size), data, i * full_block_size);\n        }\n        if (last_block_size > 0) {\n            data = b58.decode_block(enc.subarray(full_block_count * full_encoded_block_size, full_block_count * full_encoded_block_size + last_block_size), data, full_block_count * full_block_size);\n        }\n        return bintohex(data);\n    };\n\n    return b58;\n})();\nmodule.exports = cnBase58;//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/multicoin-address-validator/src/crypto/cnBase58.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/multicoin-address-validator/src/crypto/segwit_addr.js":
/*!****************************************************************************!*\
  !*** ./node_modules/multicoin-address-validator/src/crypto/segwit_addr.js ***!
  \****************************************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

eval("// Copyright (c) 2017, 2021 Pieter Wuille\n//\n// Permission is hereby granted, free of charge, to any person obtaining a copy\n// of this software and associated documentation files (the \"Software\"), to deal\n// in the Software without restriction, including without limitation the rights\n// to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n// copies of the Software, and to permit persons to whom the Software is\n// furnished to do so, subject to the following conditions:\n//\n// The above copyright notice and this permission notice shall be included in\n// all copies or substantial portions of the Software.\n//\n// THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n// FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n// AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n// LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n// OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\n// THE SOFTWARE.\n\nvar bech32 = __webpack_require__(/*! ./bech32 */ \"(ssr)/./node_modules/multicoin-address-validator/src/crypto/bech32.js\");\n\nfunction convertbits (data, frombits, tobits, pad) {\n    var acc = 0;\n    var bits = 0;\n    var ret = [];\n    var maxv = (1 << tobits) - 1;\n    for (var p = 0; p < data.length; ++p) {\n        var value = data[p];\n        if (value < 0 || (value >> frombits) !== 0) {\n            return null;\n        }\n        acc = (acc << frombits) | value;\n        bits += frombits;\n        while (bits >= tobits) {\n            bits -= tobits;\n            ret.push((acc >> bits) & maxv);\n        }\n    }\n    if (pad) {\n        if (bits > 0) {\n            ret.push((acc << (tobits - bits)) & maxv);\n        }\n    } else if (bits >= frombits || ((acc << (tobits - bits)) & maxv)) {\n        return null;\n    }\n    return ret;\n}\n\nfunction decode (hrp, addr) {\n    var bech32m = false;\n    var dec = bech32.decode(addr, bech32.encodings.BECH32);\n    if (dec === null) {\n        dec = bech32.decode(addr, bech32.encodings.BECH32M);\n        bech32m = true;\n    }\n    if (dec === null || dec.hrp !== hrp || dec.data.length < 1 || dec.data[0] > 16) {\n        return null;\n    }\n    var res = convertbits(dec.data.slice(1), 5, 8, false);\n    if (res === null || res.length < 2 || res.length > 40) {\n        return null;\n    }\n    if (dec.data[0] === 0 && res.length !== 20 && res.length !== 32) {\n        return null;\n    }\n    if (dec.data[0] === 0 && bech32m) {\n        return null;\n    }\n    if (dec.data[0] !== 0 && !bech32m) {\n        return null;\n    }\n    return {version: dec.data[0], program: res};\n}\n\nfunction encode (hrp, version, program) {\n    var enc = bech32.encodings.BECH32;\n    if (version > 0) {\n        enc = bech32.encodings.BECH32M;\n    }\n    var ret = bech32.encode(hrp, [version].concat(convertbits(program, 8, 5, true)), enc);\n    if (decode(hrp, ret, enc) === null) {\n        return null;\n    }\n    return ret;\n}\n\n/////////////////////////////////////////////////////\n\nvar DEFAULT_NETWORK_TYPE = 'prod'\n\nfunction isValidAddress(address, currency, opts = {}) {\n\n    if(!currency.bech32Hrp || currency.bech32Hrp.length === 0) {\n        return false;\n    }\n\n    const { networkType = DEFAULT_NETWORK_TYPE} = opts;\n\n    var correctBech32Hrps;\n    if (networkType === 'prod' || networkType === 'testnet') {\n        correctBech32Hrps = currency.bech32Hrp[networkType];\n    } else if(currency.bech32Hrp) {\n        correctBech32Hrps = currency.bech32Hrp.prod.concat(currency.bech32Hrp.testnet)\n    } else {\n        return false;\n    }\n\n    for(var chrp of correctBech32Hrps) {\n        var ret = decode(chrp, address);\n        if(ret) {\n            return encode(chrp, ret.version, ret.program) === address.toLowerCase();\n        }\n    }\n\n    return false;\n}\n\nmodule.exports = {\n    encode: encode,\n    decode: decode,\n    isValidAddress: isValidAddress,\n};\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvbXVsdGljb2luLWFkZHJlc3MtdmFsaWRhdG9yL3NyYy9jcnlwdG8vc2Vnd2l0X2FkZHIuanMiLCJtYXBwaW5ncyI6IkFBQUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUEsYUFBYSxtQkFBTyxDQUFDLHVGQUFVOztBQUUvQjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0Esb0JBQW9CLGlCQUFpQjtBQUNyQztBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxNQUFNO0FBQ047QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLFlBQVk7QUFDWjs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBOztBQUVBOztBQUVBLG9EQUFvRDs7QUFFcEQ7QUFDQTtBQUNBOztBQUVBLFlBQVksb0NBQW9DOztBQUVoRDtBQUNBO0FBQ0E7QUFDQSxNQUFNO0FBQ047QUFDQSxNQUFNO0FBQ047QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vZ2l0aHVic3RyZWFtaW5nLy4vbm9kZV9tb2R1bGVzL211bHRpY29pbi1hZGRyZXNzLXZhbGlkYXRvci9zcmMvY3J5cHRvL3NlZ3dpdF9hZGRyLmpzPzZmYWIiXSwic291cmNlc0NvbnRlbnQiOlsiLy8gQ29weXJpZ2h0IChjKSAyMDE3LCAyMDIxIFBpZXRlciBXdWlsbGVcbi8vXG4vLyBQZXJtaXNzaW9uIGlzIGhlcmVieSBncmFudGVkLCBmcmVlIG9mIGNoYXJnZSwgdG8gYW55IHBlcnNvbiBvYnRhaW5pbmcgYSBjb3B5XG4vLyBvZiB0aGlzIHNvZnR3YXJlIGFuZCBhc3NvY2lhdGVkIGRvY3VtZW50YXRpb24gZmlsZXMgKHRoZSBcIlNvZnR3YXJlXCIpLCB0byBkZWFsXG4vLyBpbiB0aGUgU29mdHdhcmUgd2l0aG91dCByZXN0cmljdGlvbiwgaW5jbHVkaW5nIHdpdGhvdXQgbGltaXRhdGlvbiB0aGUgcmlnaHRzXG4vLyB0byB1c2UsIGNvcHksIG1vZGlmeSwgbWVyZ2UsIHB1Ymxpc2gsIGRpc3RyaWJ1dGUsIHN1YmxpY2Vuc2UsIGFuZC9vciBzZWxsXG4vLyBjb3BpZXMgb2YgdGhlIFNvZnR3YXJlLCBhbmQgdG8gcGVybWl0IHBlcnNvbnMgdG8gd2hvbSB0aGUgU29mdHdhcmUgaXNcbi8vIGZ1cm5pc2hlZCB0byBkbyBzbywgc3ViamVjdCB0byB0aGUgZm9sbG93aW5nIGNvbmRpdGlvbnM6XG4vL1xuLy8gVGhlIGFib3ZlIGNvcHlyaWdodCBub3RpY2UgYW5kIHRoaXMgcGVybWlzc2lvbiBub3RpY2Ugc2hhbGwgYmUgaW5jbHVkZWQgaW5cbi8vIGFsbCBjb3BpZXMgb3Igc3Vic3RhbnRpYWwgcG9ydGlvbnMgb2YgdGhlIFNvZnR3YXJlLlxuLy9cbi8vIFRIRSBTT0ZUV0FSRSBJUyBQUk9WSURFRCBcIkFTIElTXCIsIFdJVEhPVVQgV0FSUkFOVFkgT0YgQU5ZIEtJTkQsIEVYUFJFU1MgT1Jcbi8vIElNUExJRUQsIElOQ0xVRElORyBCVVQgTk9UIExJTUlURUQgVE8gVEhFIFdBUlJBTlRJRVMgT0YgTUVSQ0hBTlRBQklMSVRZLFxuLy8gRklUTkVTUyBGT1IgQSBQQVJUSUNVTEFSIFBVUlBPU0UgQU5EIE5PTklORlJJTkdFTUVOVC4gSU4gTk8gRVZFTlQgU0hBTEwgVEhFXG4vLyBBVVRIT1JTIE9SIENPUFlSSUdIVCBIT0xERVJTIEJFIExJQUJMRSBGT1IgQU5ZIENMQUlNLCBEQU1BR0VTIE9SIE9USEVSXG4vLyBMSUFCSUxJVFksIFdIRVRIRVIgSU4gQU4gQUNUSU9OIE9GIENPTlRSQUNULCBUT1JUIE9SIE9USEVSV0lTRSwgQVJJU0lORyBGUk9NLFxuLy8gT1VUIE9GIE9SIElOIENPTk5FQ1RJT04gV0lUSCBUSEUgU09GVFdBUkUgT1IgVEhFIFVTRSBPUiBPVEhFUiBERUFMSU5HUyBJTlxuLy8gVEhFIFNPRlRXQVJFLlxuXG52YXIgYmVjaDMyID0gcmVxdWlyZSgnLi9iZWNoMzInKTtcblxuZnVuY3Rpb24gY29udmVydGJpdHMgKGRhdGEsIGZyb21iaXRzLCB0b2JpdHMsIHBhZCkge1xuICAgIHZhciBhY2MgPSAwO1xuICAgIHZhciBiaXRzID0gMDtcbiAgICB2YXIgcmV0ID0gW107XG4gICAgdmFyIG1heHYgPSAoMSA8PCB0b2JpdHMpIC0gMTtcbiAgICBmb3IgKHZhciBwID0gMDsgcCA8IGRhdGEubGVuZ3RoOyArK3ApIHtcbiAgICAgICAgdmFyIHZhbHVlID0gZGF0YVtwXTtcbiAgICAgICAgaWYgKHZhbHVlIDwgMCB8fCAodmFsdWUgPj4gZnJvbWJpdHMpICE9PSAwKSB7XG4gICAgICAgICAgICByZXR1cm4gbnVsbDtcbiAgICAgICAgfVxuICAgICAgICBhY2MgPSAoYWNjIDw8IGZyb21iaXRzKSB8IHZhbHVlO1xuICAgICAgICBiaXRzICs9IGZyb21iaXRzO1xuICAgICAgICB3aGlsZSAoYml0cyA+PSB0b2JpdHMpIHtcbiAgICAgICAgICAgIGJpdHMgLT0gdG9iaXRzO1xuICAgICAgICAgICAgcmV0LnB1c2goKGFjYyA+PiBiaXRzKSAmIG1heHYpO1xuICAgICAgICB9XG4gICAgfVxuICAgIGlmIChwYWQpIHtcbiAgICAgICAgaWYgKGJpdHMgPiAwKSB7XG4gICAgICAgICAgICByZXQucHVzaCgoYWNjIDw8ICh0b2JpdHMgLSBiaXRzKSkgJiBtYXh2KTtcbiAgICAgICAgfVxuICAgIH0gZWxzZSBpZiAoYml0cyA+PSBmcm9tYml0cyB8fCAoKGFjYyA8PCAodG9iaXRzIC0gYml0cykpICYgbWF4dikpIHtcbiAgICAgICAgcmV0dXJuIG51bGw7XG4gICAgfVxuICAgIHJldHVybiByZXQ7XG59XG5cbmZ1bmN0aW9uIGRlY29kZSAoaHJwLCBhZGRyKSB7XG4gICAgdmFyIGJlY2gzMm0gPSBmYWxzZTtcbiAgICB2YXIgZGVjID0gYmVjaDMyLmRlY29kZShhZGRyLCBiZWNoMzIuZW5jb2RpbmdzLkJFQ0gzMik7XG4gICAgaWYgKGRlYyA9PT0gbnVsbCkge1xuICAgICAgICBkZWMgPSBiZWNoMzIuZGVjb2RlKGFkZHIsIGJlY2gzMi5lbmNvZGluZ3MuQkVDSDMyTSk7XG4gICAgICAgIGJlY2gzMm0gPSB0cnVlO1xuICAgIH1cbiAgICBpZiAoZGVjID09PSBudWxsIHx8IGRlYy5ocnAgIT09IGhycCB8fCBkZWMuZGF0YS5sZW5ndGggPCAxIHx8IGRlYy5kYXRhWzBdID4gMTYpIHtcbiAgICAgICAgcmV0dXJuIG51bGw7XG4gICAgfVxuICAgIHZhciByZXMgPSBjb252ZXJ0Yml0cyhkZWMuZGF0YS5zbGljZSgxKSwgNSwgOCwgZmFsc2UpO1xuICAgIGlmIChyZXMgPT09IG51bGwgfHwgcmVzLmxlbmd0aCA8IDIgfHwgcmVzLmxlbmd0aCA+IDQwKSB7XG4gICAgICAgIHJldHVybiBudWxsO1xuICAgIH1cbiAgICBpZiAoZGVjLmRhdGFbMF0gPT09IDAgJiYgcmVzLmxlbmd0aCAhPT0gMjAgJiYgcmVzLmxlbmd0aCAhPT0gMzIpIHtcbiAgICAgICAgcmV0dXJuIG51bGw7XG4gICAgfVxuICAgIGlmIChkZWMuZGF0YVswXSA9PT0gMCAmJiBiZWNoMzJtKSB7XG4gICAgICAgIHJldHVybiBudWxsO1xuICAgIH1cbiAgICBpZiAoZGVjLmRhdGFbMF0gIT09IDAgJiYgIWJlY2gzMm0pIHtcbiAgICAgICAgcmV0dXJuIG51bGw7XG4gICAgfVxuICAgIHJldHVybiB7dmVyc2lvbjogZGVjLmRhdGFbMF0sIHByb2dyYW06IHJlc307XG59XG5cbmZ1bmN0aW9uIGVuY29kZSAoaHJwLCB2ZXJzaW9uLCBwcm9ncmFtKSB7XG4gICAgdmFyIGVuYyA9IGJlY2gzMi5lbmNvZGluZ3MuQkVDSDMyO1xuICAgIGlmICh2ZXJzaW9uID4gMCkge1xuICAgICAgICBlbmMgPSBiZWNoMzIuZW5jb2RpbmdzLkJFQ0gzMk07XG4gICAgfVxuICAgIHZhciByZXQgPSBiZWNoMzIuZW5jb2RlKGhycCwgW3ZlcnNpb25dLmNvbmNhdChjb252ZXJ0Yml0cyhwcm9ncmFtLCA4LCA1LCB0cnVlKSksIGVuYyk7XG4gICAgaWYgKGRlY29kZShocnAsIHJldCwgZW5jKSA9PT0gbnVsbCkge1xuICAgICAgICByZXR1cm4gbnVsbDtcbiAgICB9XG4gICAgcmV0dXJuIHJldDtcbn1cblxuLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy9cblxudmFyIERFRkFVTFRfTkVUV09SS19UWVBFID0gJ3Byb2QnXG5cbmZ1bmN0aW9uIGlzVmFsaWRBZGRyZXNzKGFkZHJlc3MsIGN1cnJlbmN5LCBvcHRzID0ge30pIHtcblxuICAgIGlmKCFjdXJyZW5jeS5iZWNoMzJIcnAgfHwgY3VycmVuY3kuYmVjaDMySHJwLmxlbmd0aCA9PT0gMCkge1xuICAgICAgICByZXR1cm4gZmFsc2U7XG4gICAgfVxuXG4gICAgY29uc3QgeyBuZXR3b3JrVHlwZSA9IERFRkFVTFRfTkVUV09SS19UWVBFfSA9IG9wdHM7XG5cbiAgICB2YXIgY29ycmVjdEJlY2gzMkhycHM7XG4gICAgaWYgKG5ldHdvcmtUeXBlID09PSAncHJvZCcgfHwgbmV0d29ya1R5cGUgPT09ICd0ZXN0bmV0Jykge1xuICAgICAgICBjb3JyZWN0QmVjaDMySHJwcyA9IGN1cnJlbmN5LmJlY2gzMkhycFtuZXR3b3JrVHlwZV07XG4gICAgfSBlbHNlIGlmKGN1cnJlbmN5LmJlY2gzMkhycCkge1xuICAgICAgICBjb3JyZWN0QmVjaDMySHJwcyA9IGN1cnJlbmN5LmJlY2gzMkhycC5wcm9kLmNvbmNhdChjdXJyZW5jeS5iZWNoMzJIcnAudGVzdG5ldClcbiAgICB9IGVsc2Uge1xuICAgICAgICByZXR1cm4gZmFsc2U7XG4gICAgfVxuXG4gICAgZm9yKHZhciBjaHJwIG9mIGNvcnJlY3RCZWNoMzJIcnBzKSB7XG4gICAgICAgIHZhciByZXQgPSBkZWNvZGUoY2hycCwgYWRkcmVzcyk7XG4gICAgICAgIGlmKHJldCkge1xuICAgICAgICAgICAgcmV0dXJuIGVuY29kZShjaHJwLCByZXQudmVyc2lvbiwgcmV0LnByb2dyYW0pID09PSBhZGRyZXNzLnRvTG93ZXJDYXNlKCk7XG4gICAgICAgIH1cbiAgICB9XG5cbiAgICByZXR1cm4gZmFsc2U7XG59XG5cbm1vZHVsZS5leHBvcnRzID0ge1xuICAgIGVuY29kZTogZW5jb2RlLFxuICAgIGRlY29kZTogZGVjb2RlLFxuICAgIGlzVmFsaWRBZGRyZXNzOiBpc1ZhbGlkQWRkcmVzcyxcbn07XG4iXSwibmFtZXMiOltdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/multicoin-address-validator/src/crypto/segwit_addr.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/multicoin-address-validator/src/crypto/sha3.js":
/*!*********************************************************************!*\
  !*** ./node_modules/multicoin-address-validator/src/crypto/sha3.js ***!
  \*********************************************************************/
/***/ ((module) => {

"use strict";
eval("/**\n * [js-sha3]{@link https://github.com/emn178/js-sha3}\n *\n * @version 0.7.0\n * @author Chen, Yi-Cyuan [emn178@gmail.com]\n * @copyright Chen, Yi-Cyuan 2015-2017\n * @license MIT\n */\n/*jslint bitwise: true */\n\n\nvar ERROR = 'input is invalid type';\nvar WINDOW = typeof window === 'object';\nvar root = WINDOW ? window : {};\nif (root.JS_SHA3_NO_WINDOW) {\n    WINDOW = false;\n}\nvar WEB_WORKER = !WINDOW && typeof self === 'object';\nvar NODE_JS = !root.JS_SHA3_NO_NODE_JS && typeof process === 'object' && process.versions && process.versions.node;\nif (NODE_JS) {\n    root = global;\n} else if (WEB_WORKER) {\n    root = self;\n}\nvar ARRAY_BUFFER = !root.JS_SHA3_NO_ARRAY_BUFFER && typeof ArrayBuffer !== 'undefined';\nvar HEX_CHARS = '0123456789abcdef'.split('');\nvar SHAKE_PADDING = [31, 7936, 2031616, 520093696];\nvar CSHAKE_PADDING = [4, 1024, 262144, 67108864];\nvar KECCAK_PADDING = [1, 256, 65536, 16777216];\nvar PADDING = [6, 1536, 393216, 100663296];\nvar SHIFT = [0, 8, 16, 24];\nvar RC = [1, 0, 32898, 0, 32906, 2147483648, 2147516416, 2147483648, 32907, 0, 2147483649,\n    0, 2147516545, 2147483648, 32777, 2147483648, 138, 0, 136, 0, 2147516425, 0,\n    2147483658, 0, 2147516555, 0, 139, 2147483648, 32905, 2147483648, 32771,\n    2147483648, 32770, 2147483648, 128, 2147483648, 32778, 0, 2147483658, 2147483648,\n    2147516545, 2147483648, 32896, 2147483648, 2147483649, 0, 2147516424, 2147483648];\nvar BITS = [224, 256, 384, 512];\nvar SHAKE_BITS = [128, 256];\nvar OUTPUT_TYPES = ['hex', 'buffer', 'arrayBuffer', 'array', 'digest'];\nvar CSHAKE_BYTEPAD = {\n    '128': 168,\n    '256': 136\n};\n\nif (root.JS_SHA3_NO_NODE_JS || !Array.isArray) {\n    Array.isArray = function (obj) {\n        return Object.prototype.toString.call(obj) === '[object Array]';\n    };\n}\n\nif (ARRAY_BUFFER && (root.JS_SHA3_NO_ARRAY_BUFFER_IS_VIEW || !ArrayBuffer.isView)) {\n    ArrayBuffer.isView = function (obj) {\n        return typeof obj === 'object' && obj.buffer && obj.buffer.constructor === ArrayBuffer;\n    };\n}\n\nvar createOutputMethod = function (bits, padding, outputType) {\n    return function (message) {\n        return new Keccak(bits, padding, bits).update(message)[outputType]();\n    };\n};\n\nvar createShakeOutputMethod = function (bits, padding, outputType) {\n    return function (message, outputBits) {\n        return new Keccak(bits, padding, outputBits).update(message)[outputType]();\n    };\n};\n\nvar createCshakeOutputMethod = function (bits, padding, outputType) {\n    return function (message, outputBits, n, s) {\n        return methods['cshake' + bits].update(message, outputBits, n, s)[outputType]();\n    };\n};\n\nvar createKmacOutputMethod = function (bits, padding, outputType) {\n    return function (key, message, outputBits, s) {\n        return methods['kmac' + bits].update(key, message, outputBits, s)[outputType]();\n    };\n};\n\nvar createOutputMethods = function (method, createMethod, bits, padding) {\n    for (var i = 0; i < OUTPUT_TYPES.length; ++i) {\n        var type = OUTPUT_TYPES[i];\n        method[type] = createMethod(bits, padding, type);\n    }\n    return method;\n};\n\nvar createMethod = function (bits, padding) {\n    var method = createOutputMethod(bits, padding, 'hex');\n    method.create = function () {\n        return new Keccak(bits, padding, bits);\n    };\n    method.update = function (message) {\n        return method.create().update(message);\n    };\n    return createOutputMethods(method, createOutputMethod, bits, padding);\n};\n\nvar createShakeMethod = function (bits, padding) {\n    var method = createShakeOutputMethod(bits, padding, 'hex');\n    method.create = function (outputBits) {\n        return new Keccak(bits, padding, outputBits);\n    };\n    method.update = function (message, outputBits) {\n        return method.create(outputBits).update(message);\n    };\n    return createOutputMethods(method, createShakeOutputMethod, bits, padding);\n};\n\nvar createCshakeMethod = function (bits, padding) {\n    var w = CSHAKE_BYTEPAD[bits];\n    var method = createCshakeOutputMethod(bits, padding, 'hex');\n    method.create = function (outputBits, n, s) {\n        if (!n && !s) {\n            return methods['shake' + bits].create(outputBits);\n        } else {\n            return new Keccak(bits, padding, outputBits).bytepad([n, s], w);\n        }\n    };\n    method.update = function (message, outputBits, n, s) {\n        return method.create(outputBits, n, s).update(message);\n    };\n    return createOutputMethods(method, createCshakeOutputMethod, bits, padding);\n};\n\nvar createKmacMethod = function (bits, padding) {\n    var w = CSHAKE_BYTEPAD[bits];\n    var method = createKmacOutputMethod(bits, padding, 'hex');\n    method.create = function (key, outputBits, s) {\n        return new Kmac(bits, padding, outputBits).bytepad(['KMAC', s], w).bytepad([key], w);\n    };\n    method.update = function (key, message, outputBits, s) {\n        return method.create(key, outputBits, s).update(message);\n    };\n    return createOutputMethods(method, createKmacOutputMethod, bits, padding);\n};\n\nvar algorithms = [\n    { name: 'keccak', padding: KECCAK_PADDING, bits: BITS, createMethod: createMethod },\n    { name: 'sha3', padding: PADDING, bits: BITS, createMethod: createMethod },\n    { name: 'shake', padding: SHAKE_PADDING, bits: SHAKE_BITS, createMethod: createShakeMethod },\n    { name: 'cshake', padding: CSHAKE_PADDING, bits: SHAKE_BITS, createMethod: createCshakeMethod },\n    { name: 'kmac', padding: CSHAKE_PADDING, bits: SHAKE_BITS, createMethod: createKmacMethod }\n];\n\nvar methods = {}, methodNames = [];\n\nfor (var i = 0; i < algorithms.length; ++i) {\n    var algorithm = algorithms[i];\n    var bits = algorithm.bits;\n    for (var j = 0; j < bits.length; ++j) {\n        var methodName = algorithm.name + '_' + bits[j];\n        methodNames.push(methodName);\n        methods[methodName] = algorithm.createMethod(bits[j], algorithm.padding);\n        if (algorithm.name !== 'sha3') {\n            var newMethodName = algorithm.name + bits[j];\n            methodNames.push(newMethodName);\n            methods[newMethodName] = methods[methodName];\n        }\n    }\n}\n\nfunction Keccak(bits, padding, outputBits) {\n    this.blocks = [];\n    this.s = [];\n    this.padding = padding;\n    this.outputBits = outputBits;\n    this.reset = true;\n    this.finalized = false;\n    this.block = 0;\n    this.start = 0;\n    this.blockCount = (1600 - (bits << 1)) >> 5;\n    this.byteCount = this.blockCount << 2;\n    this.outputBlocks = outputBits >> 5;\n    this.extraBytes = (outputBits & 31) >> 3;\n\n    for (var i = 0; i < 50; ++i) {\n        this.s[i] = 0;\n    }\n}\n\nKeccak.prototype.update = function (message) {\n    if (this.finalized) {\n        return;\n    }\n    var notString, type = typeof message;\n    if (type !== 'string') {\n        if (type === 'object') {\n            if (message === null) {\n                throw ERROR;\n            } else if (ARRAY_BUFFER && message.constructor === ArrayBuffer) {\n                message = new Uint8Array(message);\n            } else if (!Array.isArray(message)) {\n                if (!ARRAY_BUFFER || !ArrayBuffer.isView(message)) {\n                    throw ERROR;\n                }\n            }\n        } else {\n            throw ERROR;\n        }\n        notString = true;\n    }\n    var blocks = this.blocks, byteCount = this.byteCount, length = message.length,\n        blockCount = this.blockCount, index = 0, s = this.s, i, code;\n\n    while (index < length) {\n        if (this.reset) {\n            this.reset = false;\n            blocks[0] = this.block;\n            for (i = 1; i < blockCount + 1; ++i) {\n                blocks[i] = 0;\n            }\n        }\n        if (notString) {\n            for (i = this.start; index < length && i < byteCount; ++index) {\n                blocks[i >> 2] |= message[index] << SHIFT[i++ & 3];\n            }\n        } else {\n            for (i = this.start; index < length && i < byteCount; ++index) {\n                code = message.charCodeAt(index);\n                if (code < 0x80) {\n                    blocks[i >> 2] |= code << SHIFT[i++ & 3];\n                } else if (code < 0x800) {\n                    blocks[i >> 2] |= (0xc0 | (code >> 6)) << SHIFT[i++ & 3];\n                    blocks[i >> 2] |= (0x80 | (code & 0x3f)) << SHIFT[i++ & 3];\n                } else if (code < 0xd800 || code >= 0xe000) {\n                    blocks[i >> 2] |= (0xe0 | (code >> 12)) << SHIFT[i++ & 3];\n                    blocks[i >> 2] |= (0x80 | ((code >> 6) & 0x3f)) << SHIFT[i++ & 3];\n                    blocks[i >> 2] |= (0x80 | (code & 0x3f)) << SHIFT[i++ & 3];\n                } else {\n                    code = 0x10000 + (((code & 0x3ff) << 10) | (message.charCodeAt(++index) & 0x3ff));\n                    blocks[i >> 2] |= (0xf0 | (code >> 18)) << SHIFT[i++ & 3];\n                    blocks[i >> 2] |= (0x80 | ((code >> 12) & 0x3f)) << SHIFT[i++ & 3];\n                    blocks[i >> 2] |= (0x80 | ((code >> 6) & 0x3f)) << SHIFT[i++ & 3];\n                    blocks[i >> 2] |= (0x80 | (code & 0x3f)) << SHIFT[i++ & 3];\n                }\n            }\n        }\n        this.lastByteIndex = i;\n        if (i >= byteCount) {\n            this.start = i - byteCount;\n            this.block = blocks[blockCount];\n            for (i = 0; i < blockCount; ++i) {\n                s[i] ^= blocks[i];\n            }\n            f(s);\n            this.reset = true;\n        } else {\n            this.start = i;\n        }\n    }\n    return this;\n};\n\nKeccak.prototype.encode = function (x, right) {\n    var o = x & 255, n = 1;\n    var bytes = [o];\n    x = x >> 8;\n    o = x & 255;\n    while (o > 0) {\n        bytes.unshift(o);\n        x = x >> 8;\n        o = x & 255;\n        ++n;\n    }\n    if (right) {\n        bytes.push(n);\n    } else {\n        bytes.unshift(n);\n    }\n    this.update(bytes);\n    return bytes.length;\n};\n\nKeccak.prototype.encodeString = function (str) {\n    var notString, type = typeof str;\n    if (type !== 'string') {\n        if (type === 'object') {\n            if (str === null) {\n                throw ERROR;\n            } else if (ARRAY_BUFFER && str.constructor === ArrayBuffer) {\n                str = new Uint8Array(str);\n            } else if (!Array.isArray(str)) {\n                if (!ARRAY_BUFFER || !ArrayBuffer.isView(str)) {\n                    throw ERROR;\n                }\n            }\n        } else {\n            throw ERROR;\n        }\n        notString = true;\n    }\n    var bytes = 0, length = str.length;\n    if (notString) {\n        bytes = length;\n    } else {\n        for (var i = 0; i < str.length; ++i) {\n            var code = str.charCodeAt(i);\n            if (code < 0x80) {\n                bytes += 1;\n            } else if (code < 0x800) {\n                bytes += 2;\n            } else if (code < 0xd800 || code >= 0xe000) {\n                bytes += 3;\n            } else {\n                code = 0x10000 + (((code & 0x3ff) << 10) | (str.charCodeAt(++i) & 0x3ff));\n                bytes += 4;\n            }\n        }\n    }\n    bytes += this.encode(bytes * 8);\n    this.update(str);\n    return bytes;\n};\n\nKeccak.prototype.bytepad = function (strs, w) {\n    var bytes = this.encode(w);\n    for (var i = 0; i < strs.length; ++i) {\n        bytes += this.encodeString(strs[i]);\n    }\n    var paddingBytes = w - bytes % w;\n    var zeros = [];\n    zeros.length = paddingBytes;\n    this.update(zeros);\n    return this;\n};\n\nKeccak.prototype.finalize = function () {\n    if (this.finalized) {\n        return;\n    }\n    this.finalized = true;\n    var blocks = this.blocks, i = this.lastByteIndex, blockCount = this.blockCount, s = this.s;\n    blocks[i >> 2] |= this.padding[i & 3];\n    if (this.lastByteIndex === this.byteCount) {\n        blocks[0] = blocks[blockCount];\n        for (i = 1; i < blockCount + 1; ++i) {\n            blocks[i] = 0;\n        }\n    }\n    blocks[blockCount - 1] |= 0x80000000;\n    for (i = 0; i < blockCount; ++i) {\n        s[i] ^= blocks[i];\n    }\n    f(s);\n};\n\nKeccak.prototype.toString = Keccak.prototype.hex = function () {\n    this.finalize();\n\n    var blockCount = this.blockCount, s = this.s, outputBlocks = this.outputBlocks,\n        extraBytes = this.extraBytes, i = 0, j = 0;\n    var hex = '', block;\n    while (j < outputBlocks) {\n        for (i = 0; i < blockCount && j < outputBlocks; ++i, ++j) {\n            block = s[i];\n            hex += HEX_CHARS[(block >> 4) & 0x0F] + HEX_CHARS[block & 0x0F] +\n                HEX_CHARS[(block >> 12) & 0x0F] + HEX_CHARS[(block >> 8) & 0x0F] +\n                HEX_CHARS[(block >> 20) & 0x0F] + HEX_CHARS[(block >> 16) & 0x0F] +\n                HEX_CHARS[(block >> 28) & 0x0F] + HEX_CHARS[(block >> 24) & 0x0F];\n        }\n        if (j % blockCount === 0) {\n            f(s);\n            i = 0;\n        }\n    }\n    if (extraBytes) {\n        block = s[i];\n        hex += HEX_CHARS[(block >> 4) & 0x0F] + HEX_CHARS[block & 0x0F];\n        if (extraBytes > 1) {\n            hex += HEX_CHARS[(block >> 12) & 0x0F] + HEX_CHARS[(block >> 8) & 0x0F];\n        }\n        if (extraBytes > 2) {\n            hex += HEX_CHARS[(block >> 20) & 0x0F] + HEX_CHARS[(block >> 16) & 0x0F];\n        }\n    }\n    return hex;\n};\n\nKeccak.prototype.arrayBuffer = function () {\n    this.finalize();\n\n    var blockCount = this.blockCount, s = this.s, outputBlocks = this.outputBlocks,\n        extraBytes = this.extraBytes, i = 0, j = 0;\n    var bytes = this.outputBits >> 3;\n    var buffer;\n    if (extraBytes) {\n        buffer = new ArrayBuffer((outputBlocks + 1) << 2);\n    } else {\n        buffer = new ArrayBuffer(bytes);\n    }\n    var array = new Uint32Array(buffer);\n    while (j < outputBlocks) {\n        for (i = 0; i < blockCount && j < outputBlocks; ++i, ++j) {\n            array[j] = s[i];\n        }\n        if (j % blockCount === 0) {\n            f(s);\n        }\n    }\n    if (extraBytes) {\n        array[i] = s[i];\n        buffer = buffer.slice(0, bytes);\n    }\n    return buffer;\n};\n\nKeccak.prototype.buffer = Keccak.prototype.arrayBuffer;\n\nKeccak.prototype.digest = Keccak.prototype.array = function () {\n    this.finalize();\n\n    var blockCount = this.blockCount, s = this.s, outputBlocks = this.outputBlocks,\n        extraBytes = this.extraBytes, i = 0, j = 0;\n    var array = [], offset, block;\n    while (j < outputBlocks) {\n        for (i = 0; i < blockCount && j < outputBlocks; ++i, ++j) {\n            offset = j << 2;\n            block = s[i];\n            array[offset] = block & 0xFF;\n            array[offset + 1] = (block >> 8) & 0xFF;\n            array[offset + 2] = (block >> 16) & 0xFF;\n            array[offset + 3] = (block >> 24) & 0xFF;\n        }\n        if (j % blockCount === 0) {\n            f(s);\n        }\n    }\n    if (extraBytes) {\n        offset = j << 2;\n        block = s[i];\n        array[offset] = block & 0xFF;\n        if (extraBytes > 1) {\n            array[offset + 1] = (block >> 8) & 0xFF;\n        }\n        if (extraBytes > 2) {\n            array[offset + 2] = (block >> 16) & 0xFF;\n        }\n    }\n    return array;\n};\n\nfunction Kmac(bits, padding, outputBits) {\n    Keccak.call(this, bits, padding, outputBits);\n}\n\nKmac.prototype = new Keccak();\n\nKmac.prototype.finalize = function () {\n    this.encode(this.outputBits, true);\n    return Keccak.prototype.finalize.call(this);\n};\n\nvar f = function (s) {\n    var h, l, n, c0, c1, c2, c3, c4, c5, c6, c7, c8, c9,\n        b0, b1, b2, b3, b4, b5, b6, b7, b8, b9, b10, b11, b12, b13, b14, b15, b16, b17,\n        b18, b19, b20, b21, b22, b23, b24, b25, b26, b27, b28, b29, b30, b31, b32, b33,\n        b34, b35, b36, b37, b38, b39, b40, b41, b42, b43, b44, b45, b46, b47, b48, b49;\n    for (n = 0; n < 48; n += 2) {\n        c0 = s[0] ^ s[10] ^ s[20] ^ s[30] ^ s[40];\n        c1 = s[1] ^ s[11] ^ s[21] ^ s[31] ^ s[41];\n        c2 = s[2] ^ s[12] ^ s[22] ^ s[32] ^ s[42];\n        c3 = s[3] ^ s[13] ^ s[23] ^ s[33] ^ s[43];\n        c4 = s[4] ^ s[14] ^ s[24] ^ s[34] ^ s[44];\n        c5 = s[5] ^ s[15] ^ s[25] ^ s[35] ^ s[45];\n        c6 = s[6] ^ s[16] ^ s[26] ^ s[36] ^ s[46];\n        c7 = s[7] ^ s[17] ^ s[27] ^ s[37] ^ s[47];\n        c8 = s[8] ^ s[18] ^ s[28] ^ s[38] ^ s[48];\n        c9 = s[9] ^ s[19] ^ s[29] ^ s[39] ^ s[49];\n\n        h = c8 ^ ((c2 << 1) | (c3 >>> 31));\n        l = c9 ^ ((c3 << 1) | (c2 >>> 31));\n        s[0] ^= h;\n        s[1] ^= l;\n        s[10] ^= h;\n        s[11] ^= l;\n        s[20] ^= h;\n        s[21] ^= l;\n        s[30] ^= h;\n        s[31] ^= l;\n        s[40] ^= h;\n        s[41] ^= l;\n        h = c0 ^ ((c4 << 1) | (c5 >>> 31));\n        l = c1 ^ ((c5 << 1) | (c4 >>> 31));\n        s[2] ^= h;\n        s[3] ^= l;\n        s[12] ^= h;\n        s[13] ^= l;\n        s[22] ^= h;\n        s[23] ^= l;\n        s[32] ^= h;\n        s[33] ^= l;\n        s[42] ^= h;\n        s[43] ^= l;\n        h = c2 ^ ((c6 << 1) | (c7 >>> 31));\n        l = c3 ^ ((c7 << 1) | (c6 >>> 31));\n        s[4] ^= h;\n        s[5] ^= l;\n        s[14] ^= h;\n        s[15] ^= l;\n        s[24] ^= h;\n        s[25] ^= l;\n        s[34] ^= h;\n        s[35] ^= l;\n        s[44] ^= h;\n        s[45] ^= l;\n        h = c4 ^ ((c8 << 1) | (c9 >>> 31));\n        l = c5 ^ ((c9 << 1) | (c8 >>> 31));\n        s[6] ^= h;\n        s[7] ^= l;\n        s[16] ^= h;\n        s[17] ^= l;\n        s[26] ^= h;\n        s[27] ^= l;\n        s[36] ^= h;\n        s[37] ^= l;\n        s[46] ^= h;\n        s[47] ^= l;\n        h = c6 ^ ((c0 << 1) | (c1 >>> 31));\n        l = c7 ^ ((c1 << 1) | (c0 >>> 31));\n        s[8] ^= h;\n        s[9] ^= l;\n        s[18] ^= h;\n        s[19] ^= l;\n        s[28] ^= h;\n        s[29] ^= l;\n        s[38] ^= h;\n        s[39] ^= l;\n        s[48] ^= h;\n        s[49] ^= l;\n\n        b0 = s[0];\n        b1 = s[1];\n        b32 = (s[11] << 4) | (s[10] >>> 28);\n        b33 = (s[10] << 4) | (s[11] >>> 28);\n        b14 = (s[20] << 3) | (s[21] >>> 29);\n        b15 = (s[21] << 3) | (s[20] >>> 29);\n        b46 = (s[31] << 9) | (s[30] >>> 23);\n        b47 = (s[30] << 9) | (s[31] >>> 23);\n        b28 = (s[40] << 18) | (s[41] >>> 14);\n        b29 = (s[41] << 18) | (s[40] >>> 14);\n        b20 = (s[2] << 1) | (s[3] >>> 31);\n        b21 = (s[3] << 1) | (s[2] >>> 31);\n        b2 = (s[13] << 12) | (s[12] >>> 20);\n        b3 = (s[12] << 12) | (s[13] >>> 20);\n        b34 = (s[22] << 10) | (s[23] >>> 22);\n        b35 = (s[23] << 10) | (s[22] >>> 22);\n        b16 = (s[33] << 13) | (s[32] >>> 19);\n        b17 = (s[32] << 13) | (s[33] >>> 19);\n        b48 = (s[42] << 2) | (s[43] >>> 30);\n        b49 = (s[43] << 2) | (s[42] >>> 30);\n        b40 = (s[5] << 30) | (s[4] >>> 2);\n        b41 = (s[4] << 30) | (s[5] >>> 2);\n        b22 = (s[14] << 6) | (s[15] >>> 26);\n        b23 = (s[15] << 6) | (s[14] >>> 26);\n        b4 = (s[25] << 11) | (s[24] >>> 21);\n        b5 = (s[24] << 11) | (s[25] >>> 21);\n        b36 = (s[34] << 15) | (s[35] >>> 17);\n        b37 = (s[35] << 15) | (s[34] >>> 17);\n        b18 = (s[45] << 29) | (s[44] >>> 3);\n        b19 = (s[44] << 29) | (s[45] >>> 3);\n        b10 = (s[6] << 28) | (s[7] >>> 4);\n        b11 = (s[7] << 28) | (s[6] >>> 4);\n        b42 = (s[17] << 23) | (s[16] >>> 9);\n        b43 = (s[16] << 23) | (s[17] >>> 9);\n        b24 = (s[26] << 25) | (s[27] >>> 7);\n        b25 = (s[27] << 25) | (s[26] >>> 7);\n        b6 = (s[36] << 21) | (s[37] >>> 11);\n        b7 = (s[37] << 21) | (s[36] >>> 11);\n        b38 = (s[47] << 24) | (s[46] >>> 8);\n        b39 = (s[46] << 24) | (s[47] >>> 8);\n        b30 = (s[8] << 27) | (s[9] >>> 5);\n        b31 = (s[9] << 27) | (s[8] >>> 5);\n        b12 = (s[18] << 20) | (s[19] >>> 12);\n        b13 = (s[19] << 20) | (s[18] >>> 12);\n        b44 = (s[29] << 7) | (s[28] >>> 25);\n        b45 = (s[28] << 7) | (s[29] >>> 25);\n        b26 = (s[38] << 8) | (s[39] >>> 24);\n        b27 = (s[39] << 8) | (s[38] >>> 24);\n        b8 = (s[48] << 14) | (s[49] >>> 18);\n        b9 = (s[49] << 14) | (s[48] >>> 18);\n\n        s[0] = b0 ^ (~b2 & b4);\n        s[1] = b1 ^ (~b3 & b5);\n        s[10] = b10 ^ (~b12 & b14);\n        s[11] = b11 ^ (~b13 & b15);\n        s[20] = b20 ^ (~b22 & b24);\n        s[21] = b21 ^ (~b23 & b25);\n        s[30] = b30 ^ (~b32 & b34);\n        s[31] = b31 ^ (~b33 & b35);\n        s[40] = b40 ^ (~b42 & b44);\n        s[41] = b41 ^ (~b43 & b45);\n        s[2] = b2 ^ (~b4 & b6);\n        s[3] = b3 ^ (~b5 & b7);\n        s[12] = b12 ^ (~b14 & b16);\n        s[13] = b13 ^ (~b15 & b17);\n        s[22] = b22 ^ (~b24 & b26);\n        s[23] = b23 ^ (~b25 & b27);\n        s[32] = b32 ^ (~b34 & b36);\n        s[33] = b33 ^ (~b35 & b37);\n        s[42] = b42 ^ (~b44 & b46);\n        s[43] = b43 ^ (~b45 & b47);\n        s[4] = b4 ^ (~b6 & b8);\n        s[5] = b5 ^ (~b7 & b9);\n        s[14] = b14 ^ (~b16 & b18);\n        s[15] = b15 ^ (~b17 & b19);\n        s[24] = b24 ^ (~b26 & b28);\n        s[25] = b25 ^ (~b27 & b29);\n        s[34] = b34 ^ (~b36 & b38);\n        s[35] = b35 ^ (~b37 & b39);\n        s[44] = b44 ^ (~b46 & b48);\n        s[45] = b45 ^ (~b47 & b49);\n        s[6] = b6 ^ (~b8 & b0);\n        s[7] = b7 ^ (~b9 & b1);\n        s[16] = b16 ^ (~b18 & b10);\n        s[17] = b17 ^ (~b19 & b11);\n        s[26] = b26 ^ (~b28 & b20);\n        s[27] = b27 ^ (~b29 & b21);\n        s[36] = b36 ^ (~b38 & b30);\n        s[37] = b37 ^ (~b39 & b31);\n        s[46] = b46 ^ (~b48 & b40);\n        s[47] = b47 ^ (~b49 & b41);\n        s[8] = b8 ^ (~b0 & b2);\n        s[9] = b9 ^ (~b1 & b3);\n        s[18] = b18 ^ (~b10 & b12);\n        s[19] = b19 ^ (~b11 & b13);\n        s[28] = b28 ^ (~b20 & b22);\n        s[29] = b29 ^ (~b21 & b23);\n        s[38] = b38 ^ (~b30 & b32);\n        s[39] = b39 ^ (~b31 & b33);\n        s[48] = b48 ^ (~b40 & b42);\n        s[49] = b49 ^ (~b41 & b43);\n\n        s[0] ^= RC[n];\n        s[1] ^= RC[n + 1];\n    }\n};\n\nmodule.exports = methods;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/multicoin-address-validator/src/crypto/sha3.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/multicoin-address-validator/src/crypto/utils.js":
/*!**********************************************************************!*\
  !*** ./node_modules/multicoin-address-validator/src/crypto/utils.js ***!
  \**********************************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

eval("var jsSHA = __webpack_require__(/*! jssha */ \"(ssr)/./node_modules/jssha/src/sha.js\");\nvar sha512256 = (__webpack_require__(/*! js-sha512 */ \"(ssr)/./node_modules/js-sha512/src/sha512.js\").sha512_256)\nvar Blake256 = __webpack_require__(/*! ./blake256 */ \"(ssr)/./node_modules/multicoin-address-validator/src/crypto/blake256.js\");\nvar keccak256 = (__webpack_require__(/*! ./sha3 */ \"(ssr)/./node_modules/multicoin-address-validator/src/crypto/sha3.js\").keccak256);\nvar Blake2B = __webpack_require__(/*! ./blake2b */ \"(ssr)/./node_modules/multicoin-address-validator/src/crypto/blake2b.js\");\nvar base58 = __webpack_require__(/*! ./base58 */ \"(ssr)/./node_modules/multicoin-address-validator/src/crypto/base58.js\");\nvar base32 = __webpack_require__(/*! ./base32 */ \"(ssr)/./node_modules/multicoin-address-validator/src/crypto/base32.js\");\nvar BigNum = __webpack_require__(/*! browserify-bignum */ \"(ssr)/./node_modules/browserify-bignum/bignumber.js\");\n\nfunction numberToHex(number, length) {\n    var hex = number.toString(16);\n    if (hex.length % 2 === 1) {\n        hex = '0' + hex;\n    }\n    return hex.padStart(length, '0');\n}\n\nfunction isHexChar(c) {\n    if ((c >= 'A' && c <= 'F') ||\n        (c >= 'a' && c <= 'f') ||\n        (c >= '0' && c <= '9')) {\n        return 1;\n    }\n    return 0;\n}\n\n/* Convert a hex char to value */\nfunction hexChar2byte(c) {\n    var d = 0;\n    if (c >= 'A' && c <= 'F') {\n        d = c.charCodeAt(0) - 'A'.charCodeAt(0) + 10;\n    }\n    else if (c >= 'a' && c <= 'f') {\n        d = c.charCodeAt(0) - 'a'.charCodeAt(0) + 10;\n    }\n    else if (c >= '0' && c <= '9') {\n        d = c.charCodeAt(0) - '0'.charCodeAt(0);\n    }\n    return d;\n}\n\n/* Convert a byte to string */\nfunction byte2hexStr(byte) {\n    var hexByteMap = \"0123456789ABCDEF\";\n    var str = \"\";\n    str += hexByteMap.charAt(byte >> 4);\n    str += hexByteMap.charAt(byte & 0x0f);\n    return str;\n}\n\nfunction byteArray2hexStr(byteArray) {\n    var str = \"\";\n    for (var i = 0; i < (byteArray.length - 1); i++) {\n        str += byte2hexStr(byteArray[i]);\n    }\n    str += byte2hexStr(byteArray[i]);\n    return str;\n}\n\nfunction hexStr2byteArray(str) {\n    var byteArray = Array();\n    var d = 0;\n    var i = 0;\n    var j = 0;\n    var k = 0;\n\n     for (i = 0; i < str.length; i++) {\n        var c = str.charAt(i);\n        if (isHexChar(c)) {\n            d <<= 4;\n            d += hexChar2byte(c);\n            j++;\n            if (0 === (j % 2)) {\n                byteArray[k++] = d;\n                d = 0;\n            }\n        }\n    }\n    return byteArray;\n}\n\nmodule.exports = {\n    numberToHex: numberToHex,\n    toHex: function (arrayOfBytes) {\n        var hex = '';\n        for (var i = 0; i < arrayOfBytes.length; i++) {\n            hex += numberToHex(arrayOfBytes[i]);\n        }\n        return hex;\n    },\n    sha256: function (payload, format = 'HEX') {\n        var sha = new jsSHA('SHA-256', format);\n        sha.update(payload);\n        return sha.getHash(format);\n    },\n    sha256x2: function (buffer, format = 'HEX') {\n        return this.sha256(this.sha256(buffer, format), format);\n    },\n    sha256Checksum: function (payload) {\n        return this.sha256(this.sha256(payload)).substr(0, 8);\n    },\n    sha512_256: function (payload, format = 'HEX') {\n        const hash = sha512256.create()\n        hash.update(Buffer.from(payload, format))\n        return hash.hex().toUpperCase();\n    },\n    blake256: function (hexString) {\n        return new Blake256().update(hexString, 'hex').digest('hex');\n    },\n    blake256Checksum: function (payload) {\n        return this.blake256(this.blake256(payload)).substr(0, 8);\n    },\n    blake2b: function (hexString, outlen) {\n        return new Blake2B(outlen).update(Buffer.from(hexString, 'hex')).digest('hex');\n    },\n    keccak256: function (hexString) {\n        return keccak256(hexString);\n    },\n    keccak256Checksum: function (payload) {\n        return keccak256(payload).toString().substr(0, 8);\n    },\n    blake2b256: function (hexString) {\n        return new Blake2B(32).update(Buffer.from(hexString, 'hex'), 32).digest('hex');\n    },\n    base58: base58.decode,\n    byteArray2hexStr: byteArray2hexStr,\n    hexStr2byteArray: hexStr2byteArray,\n    bigNumberToBuffer: function(bignumber, size){\n        return new BigNum(bignumber).toBuffer({ size, endian: 'big' });\n    },\n    base32: base32\n}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvbXVsdGljb2luLWFkZHJlc3MtdmFsaWRhdG9yL3NyYy9jcnlwdG8vdXRpbHMuanMiLCJtYXBwaW5ncyI6IkFBQUEsWUFBWSxtQkFBTyxDQUFDLG9EQUFPO0FBQzNCLGdCQUFnQixpR0FBK0I7QUFDL0MsZUFBZSxtQkFBTyxDQUFDLDJGQUFZO0FBQ25DLGdCQUFnQixvSEFBOEI7QUFDOUMsY0FBYyxtQkFBTyxDQUFDLHlGQUFXO0FBQ2pDLGFBQWEsbUJBQU8sQ0FBQyx1RkFBVTtBQUMvQixhQUFhLG1CQUFPLENBQUMsdUZBQVU7QUFDL0IsYUFBYSxtQkFBTyxDQUFDLDhFQUFtQjs7QUFFeEM7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBLG9CQUFvQiw0QkFBNEI7QUFDaEQ7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUEsaUJBQWlCLGdCQUFnQjtBQUNqQztBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLHdCQUF3Qix5QkFBeUI7QUFDakQ7QUFDQTtBQUNBO0FBQ0EsS0FBSztBQUNMO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsS0FBSztBQUNMO0FBQ0E7QUFDQSxLQUFLO0FBQ0w7QUFDQTtBQUNBLEtBQUs7QUFDTDtBQUNBO0FBQ0E7QUFDQTtBQUNBLEtBQUs7QUFDTDtBQUNBO0FBQ0EsS0FBSztBQUNMO0FBQ0E7QUFDQSxLQUFLO0FBQ0w7QUFDQTtBQUNBLEtBQUs7QUFDTDtBQUNBO0FBQ0EsS0FBSztBQUNMO0FBQ0E7QUFDQSxLQUFLO0FBQ0w7QUFDQTtBQUNBLEtBQUs7QUFDTDtBQUNBO0FBQ0E7QUFDQTtBQUNBLGdEQUFnRCxxQkFBcUI7QUFDckUsS0FBSztBQUNMO0FBQ0EiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9naXRodWJzdHJlYW1pbmcvLi9ub2RlX21vZHVsZXMvbXVsdGljb2luLWFkZHJlc3MtdmFsaWRhdG9yL3NyYy9jcnlwdG8vdXRpbHMuanM/Y2Q1NyJdLCJzb3VyY2VzQ29udGVudCI6WyJ2YXIganNTSEEgPSByZXF1aXJlKCdqc3NoYScpO1xudmFyIHNoYTUxMjI1NiA9IHJlcXVpcmUoJ2pzLXNoYTUxMicpLnNoYTUxMl8yNTZcbnZhciBCbGFrZTI1NiA9IHJlcXVpcmUoJy4vYmxha2UyNTYnKTtcbnZhciBrZWNjYWsyNTYgPSByZXF1aXJlKCcuL3NoYTMnKVsna2VjY2FrMjU2J107XG52YXIgQmxha2UyQiA9IHJlcXVpcmUoJy4vYmxha2UyYicpO1xudmFyIGJhc2U1OCA9IHJlcXVpcmUoJy4vYmFzZTU4Jyk7XG52YXIgYmFzZTMyID0gcmVxdWlyZSgnLi9iYXNlMzInKTtcbnZhciBCaWdOdW0gPSByZXF1aXJlKCdicm93c2VyaWZ5LWJpZ251bScpO1xuXG5mdW5jdGlvbiBudW1iZXJUb0hleChudW1iZXIsIGxlbmd0aCkge1xuICAgIHZhciBoZXggPSBudW1iZXIudG9TdHJpbmcoMTYpO1xuICAgIGlmIChoZXgubGVuZ3RoICUgMiA9PT0gMSkge1xuICAgICAgICBoZXggPSAnMCcgKyBoZXg7XG4gICAgfVxuICAgIHJldHVybiBoZXgucGFkU3RhcnQobGVuZ3RoLCAnMCcpO1xufVxuXG5mdW5jdGlvbiBpc0hleENoYXIoYykge1xuICAgIGlmICgoYyA+PSAnQScgJiYgYyA8PSAnRicpIHx8XG4gICAgICAgIChjID49ICdhJyAmJiBjIDw9ICdmJykgfHxcbiAgICAgICAgKGMgPj0gJzAnICYmIGMgPD0gJzknKSkge1xuICAgICAgICByZXR1cm4gMTtcbiAgICB9XG4gICAgcmV0dXJuIDA7XG59XG5cbi8qIENvbnZlcnQgYSBoZXggY2hhciB0byB2YWx1ZSAqL1xuZnVuY3Rpb24gaGV4Q2hhcjJieXRlKGMpIHtcbiAgICB2YXIgZCA9IDA7XG4gICAgaWYgKGMgPj0gJ0EnICYmIGMgPD0gJ0YnKSB7XG4gICAgICAgIGQgPSBjLmNoYXJDb2RlQXQoMCkgLSAnQScuY2hhckNvZGVBdCgwKSArIDEwO1xuICAgIH1cbiAgICBlbHNlIGlmIChjID49ICdhJyAmJiBjIDw9ICdmJykge1xuICAgICAgICBkID0gYy5jaGFyQ29kZUF0KDApIC0gJ2EnLmNoYXJDb2RlQXQoMCkgKyAxMDtcbiAgICB9XG4gICAgZWxzZSBpZiAoYyA+PSAnMCcgJiYgYyA8PSAnOScpIHtcbiAgICAgICAgZCA9IGMuY2hhckNvZGVBdCgwKSAtICcwJy5jaGFyQ29kZUF0KDApO1xuICAgIH1cbiAgICByZXR1cm4gZDtcbn1cblxuLyogQ29udmVydCBhIGJ5dGUgdG8gc3RyaW5nICovXG5mdW5jdGlvbiBieXRlMmhleFN0cihieXRlKSB7XG4gICAgdmFyIGhleEJ5dGVNYXAgPSBcIjAxMjM0NTY3ODlBQkNERUZcIjtcbiAgICB2YXIgc3RyID0gXCJcIjtcbiAgICBzdHIgKz0gaGV4Qnl0ZU1hcC5jaGFyQXQoYnl0ZSA+PiA0KTtcbiAgICBzdHIgKz0gaGV4Qnl0ZU1hcC5jaGFyQXQoYnl0ZSAmIDB4MGYpO1xuICAgIHJldHVybiBzdHI7XG59XG5cbmZ1bmN0aW9uIGJ5dGVBcnJheTJoZXhTdHIoYnl0ZUFycmF5KSB7XG4gICAgdmFyIHN0ciA9IFwiXCI7XG4gICAgZm9yICh2YXIgaSA9IDA7IGkgPCAoYnl0ZUFycmF5Lmxlbmd0aCAtIDEpOyBpKyspIHtcbiAgICAgICAgc3RyICs9IGJ5dGUyaGV4U3RyKGJ5dGVBcnJheVtpXSk7XG4gICAgfVxuICAgIHN0ciArPSBieXRlMmhleFN0cihieXRlQXJyYXlbaV0pO1xuICAgIHJldHVybiBzdHI7XG59XG5cbmZ1bmN0aW9uIGhleFN0cjJieXRlQXJyYXkoc3RyKSB7XG4gICAgdmFyIGJ5dGVBcnJheSA9IEFycmF5KCk7XG4gICAgdmFyIGQgPSAwO1xuICAgIHZhciBpID0gMDtcbiAgICB2YXIgaiA9IDA7XG4gICAgdmFyIGsgPSAwO1xuXG4gICAgIGZvciAoaSA9IDA7IGkgPCBzdHIubGVuZ3RoOyBpKyspIHtcbiAgICAgICAgdmFyIGMgPSBzdHIuY2hhckF0KGkpO1xuICAgICAgICBpZiAoaXNIZXhDaGFyKGMpKSB7XG4gICAgICAgICAgICBkIDw8PSA0O1xuICAgICAgICAgICAgZCArPSBoZXhDaGFyMmJ5dGUoYyk7XG4gICAgICAgICAgICBqKys7XG4gICAgICAgICAgICBpZiAoMCA9PT0gKGogJSAyKSkge1xuICAgICAgICAgICAgICAgIGJ5dGVBcnJheVtrKytdID0gZDtcbiAgICAgICAgICAgICAgICBkID0gMDtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgIH1cbiAgICByZXR1cm4gYnl0ZUFycmF5O1xufVxuXG5tb2R1bGUuZXhwb3J0cyA9IHtcbiAgICBudW1iZXJUb0hleDogbnVtYmVyVG9IZXgsXG4gICAgdG9IZXg6IGZ1bmN0aW9uIChhcnJheU9mQnl0ZXMpIHtcbiAgICAgICAgdmFyIGhleCA9ICcnO1xuICAgICAgICBmb3IgKHZhciBpID0gMDsgaSA8IGFycmF5T2ZCeXRlcy5sZW5ndGg7IGkrKykge1xuICAgICAgICAgICAgaGV4ICs9IG51bWJlclRvSGV4KGFycmF5T2ZCeXRlc1tpXSk7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIGhleDtcbiAgICB9LFxuICAgIHNoYTI1NjogZnVuY3Rpb24gKHBheWxvYWQsIGZvcm1hdCA9ICdIRVgnKSB7XG4gICAgICAgIHZhciBzaGEgPSBuZXcganNTSEEoJ1NIQS0yNTYnLCBmb3JtYXQpO1xuICAgICAgICBzaGEudXBkYXRlKHBheWxvYWQpO1xuICAgICAgICByZXR1cm4gc2hhLmdldEhhc2goZm9ybWF0KTtcbiAgICB9LFxuICAgIHNoYTI1NngyOiBmdW5jdGlvbiAoYnVmZmVyLCBmb3JtYXQgPSAnSEVYJykge1xuICAgICAgICByZXR1cm4gdGhpcy5zaGEyNTYodGhpcy5zaGEyNTYoYnVmZmVyLCBmb3JtYXQpLCBmb3JtYXQpO1xuICAgIH0sXG4gICAgc2hhMjU2Q2hlY2tzdW06IGZ1bmN0aW9uIChwYXlsb2FkKSB7XG4gICAgICAgIHJldHVybiB0aGlzLnNoYTI1Nih0aGlzLnNoYTI1NihwYXlsb2FkKSkuc3Vic3RyKDAsIDgpO1xuICAgIH0sXG4gICAgc2hhNTEyXzI1NjogZnVuY3Rpb24gKHBheWxvYWQsIGZvcm1hdCA9ICdIRVgnKSB7XG4gICAgICAgIGNvbnN0IGhhc2ggPSBzaGE1MTIyNTYuY3JlYXRlKClcbiAgICAgICAgaGFzaC51cGRhdGUoQnVmZmVyLmZyb20ocGF5bG9hZCwgZm9ybWF0KSlcbiAgICAgICAgcmV0dXJuIGhhc2guaGV4KCkudG9VcHBlckNhc2UoKTtcbiAgICB9LFxuICAgIGJsYWtlMjU2OiBmdW5jdGlvbiAoaGV4U3RyaW5nKSB7XG4gICAgICAgIHJldHVybiBuZXcgQmxha2UyNTYoKS51cGRhdGUoaGV4U3RyaW5nLCAnaGV4JykuZGlnZXN0KCdoZXgnKTtcbiAgICB9LFxuICAgIGJsYWtlMjU2Q2hlY2tzdW06IGZ1bmN0aW9uIChwYXlsb2FkKSB7XG4gICAgICAgIHJldHVybiB0aGlzLmJsYWtlMjU2KHRoaXMuYmxha2UyNTYocGF5bG9hZCkpLnN1YnN0cigwLCA4KTtcbiAgICB9LFxuICAgIGJsYWtlMmI6IGZ1bmN0aW9uIChoZXhTdHJpbmcsIG91dGxlbikge1xuICAgICAgICByZXR1cm4gbmV3IEJsYWtlMkIob3V0bGVuKS51cGRhdGUoQnVmZmVyLmZyb20oaGV4U3RyaW5nLCAnaGV4JykpLmRpZ2VzdCgnaGV4Jyk7XG4gICAgfSxcbiAgICBrZWNjYWsyNTY6IGZ1bmN0aW9uIChoZXhTdHJpbmcpIHtcbiAgICAgICAgcmV0dXJuIGtlY2NhazI1NihoZXhTdHJpbmcpO1xuICAgIH0sXG4gICAga2VjY2FrMjU2Q2hlY2tzdW06IGZ1bmN0aW9uIChwYXlsb2FkKSB7XG4gICAgICAgIHJldHVybiBrZWNjYWsyNTYocGF5bG9hZCkudG9TdHJpbmcoKS5zdWJzdHIoMCwgOCk7XG4gICAgfSxcbiAgICBibGFrZTJiMjU2OiBmdW5jdGlvbiAoaGV4U3RyaW5nKSB7XG4gICAgICAgIHJldHVybiBuZXcgQmxha2UyQigzMikudXBkYXRlKEJ1ZmZlci5mcm9tKGhleFN0cmluZywgJ2hleCcpLCAzMikuZGlnZXN0KCdoZXgnKTtcbiAgICB9LFxuICAgIGJhc2U1ODogYmFzZTU4LmRlY29kZSxcbiAgICBieXRlQXJyYXkyaGV4U3RyOiBieXRlQXJyYXkyaGV4U3RyLFxuICAgIGhleFN0cjJieXRlQXJyYXk6IGhleFN0cjJieXRlQXJyYXksXG4gICAgYmlnTnVtYmVyVG9CdWZmZXI6IGZ1bmN0aW9uKGJpZ251bWJlciwgc2l6ZSl7XG4gICAgICAgIHJldHVybiBuZXcgQmlnTnVtKGJpZ251bWJlcikudG9CdWZmZXIoeyBzaXplLCBlbmRpYW46ICdiaWcnIH0pO1xuICAgIH0sXG4gICAgYmFzZTMyOiBiYXNlMzJcbn1cbiJdLCJuYW1lcyI6W10sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/multicoin-address-validator/src/crypto/utils.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/multicoin-address-validator/src/currencies.js":
/*!********************************************************************!*\
  !*** ./node_modules/multicoin-address-validator/src/currencies.js ***!
  \********************************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

eval("var XRPValidator = __webpack_require__(/*! ./ripple_validator */ \"(ssr)/./node_modules/multicoin-address-validator/src/ripple_validator.js\");\nvar ETHValidator = __webpack_require__(/*! ./ethereum_validator */ \"(ssr)/./node_modules/multicoin-address-validator/src/ethereum_validator.js\");\nvar BTCValidator = __webpack_require__(/*! ./bitcoin_validator */ \"(ssr)/./node_modules/multicoin-address-validator/src/bitcoin_validator.js\");\nvar ADAValidator = __webpack_require__(/*! ./ada_validator */ \"(ssr)/./node_modules/multicoin-address-validator/src/ada_validator.js\");\nvar XMRValidator = __webpack_require__(/*! ./monero_validator */ \"(ssr)/./node_modules/multicoin-address-validator/src/monero_validator.js\");\nvar NANOValidator = __webpack_require__(/*! ./nano_validator */ \"(ssr)/./node_modules/multicoin-address-validator/src/nano_validator.js\");\nvar SCValidator = __webpack_require__(/*! ./siacoin_validator */ \"(ssr)/./node_modules/multicoin-address-validator/src/siacoin_validator.js\");\nvar TRXValidator = __webpack_require__(/*! ./tron_validator */ \"(ssr)/./node_modules/multicoin-address-validator/src/tron_validator.js\");\nvar NEMValidator = __webpack_require__(/*! ./nem_validator */ \"(ssr)/./node_modules/multicoin-address-validator/src/nem_validator.js\");\nvar BCHValidator = __webpack_require__(/*! ./bch_validator */ \"(ssr)/./node_modules/multicoin-address-validator/src/bch_validator.js\");\nvar XLMValidator = __webpack_require__(/*! ./stellar_validator */ \"(ssr)/./node_modules/multicoin-address-validator/src/stellar_validator.js\");\nvar EOSValidator = __webpack_require__(/*! ./eos_validator */ \"(ssr)/./node_modules/multicoin-address-validator/src/eos_validator.js\");\nvar XTZValidator = __webpack_require__(/*! ./tezos_validator */ \"(ssr)/./node_modules/multicoin-address-validator/src/tezos_validator.js\");\nvar USDTValidator = __webpack_require__(/*! ./usdt_validator */ \"(ssr)/./node_modules/multicoin-address-validator/src/usdt_validator.js\");\nvar AlgoValidator = __webpack_require__(/*! ./algo_validator */ \"(ssr)/./node_modules/multicoin-address-validator/src/algo_validator.js\");\nvar DotValidator = __webpack_require__(/*! ./dot_validator */ \"(ssr)/./node_modules/multicoin-address-validator/src/dot_validator.js\");\nvar BIP173Validator = __webpack_require__(/*! ./bip173_validator */ \"(ssr)/./node_modules/multicoin-address-validator/src/bip173_validator.js\")\nvar Base58Validator = __webpack_require__(/*! ./base58_validator */ \"(ssr)/./node_modules/multicoin-address-validator/src/base58_validator.js\")\n\n// defines P2PKH and P2SH address types for standard (prod) and testnet networks\nvar CURRENCIES = [{\n        name: 'Bitcoin',\n        symbol: 'btc',\n        addressTypes: { prod: ['00', '05'], testnet: ['6f', 'c4', '3c', '26'] },\n        bech32Hrp: { prod: ['bc'], testnet: ['tb'] },\n        validator: BTCValidator\n    }, {\n        name: 'BitcoinCash',\n        symbol: 'bch',\n        regexp: '^[qQpP]{1}[0-9a-zA-Z]{41}$',\n        addressTypes: { prod: ['00', '05'], testnet: ['6f', 'c4'] },\n        validator: BCHValidator\n    }, {\n        name: 'Bitcoin SV',\n        symbol: 'bsv',\n        regexp: '^[qQ]{1}[0-9a-zA-Z]{41}$',\n        addressTypes: { prod: ['00', '05'], testnet: ['6f', 'c4'] },\n        validator: BCHValidator\n    }, {\n        name: 'LiteCoin',\n        symbol: 'ltc',\n        addressTypes: { prod: ['30', '05', '32'], testnet: ['6f', 'c4', '3a'] },\n        bech32Hrp: { prod: ['ltc'], testnet: ['tltc'] },\n        validator: BTCValidator\n    }, {\n        name: 'PeerCoin',\n        symbol: 'ppc',\n        addressTypes: { prod: ['37', '75'], testnet: ['6f', 'c4'] },\n        validator: BTCValidator\n    }, {\n        name: 'DogeCoin',\n        symbol: 'doge',\n        addressTypes: { prod: ['1e', '16'], testnet: ['71', 'c4'] },\n        validator: BTCValidator\n    }, {\n        name: 'BeaverCoin',\n        symbol: 'bvc',\n        addressTypes: { prod: ['19', '05'], testnet: ['6f', 'c4'] },\n        validator: BTCValidator,\n    }, {\n        name: 'FreiCoin',\n        symbol: 'frc',\n        addressTypes: { prod: ['00', '05'], testnet: ['6f', 'c4'] },\n        validator: BTCValidator\n    }, {\n        name: 'ProtoShares',\n        symbol: 'pts',\n        addressTypes: { prod: ['38', '05'], testnet: ['6f', 'c4'] },\n        validator: BTCValidator\n    }, {\n        name: 'MegaCoin',\n        symbol: 'mec',\n        addressTypes: { prod: ['32', '05'], testnet: ['6f', 'c4'] },\n        validator: BTCValidator\n    }, {\n        name: 'PrimeCoin',\n        symbol: 'xpm',\n        addressTypes: { prod: ['17', '53'], testnet: ['6f', 'c4'] },\n        validator: BTCValidator\n    }, {\n        name: 'AuroraCoin',\n        symbol: 'aur',\n        addressTypes: { prod: ['17', '05'], testnet: ['6f', 'c4'] },\n        validator: BTCValidator\n    }, {\n        name: 'NameCoin',\n        symbol: 'nmc',\n        addressTypes: { prod: ['34'], testnet: [] },\n        validator: BTCValidator\n    }, {\n        name: 'BioCoin',\n        symbol: 'bio',\n        addressTypes: { prod: ['19', '14'], testnet: ['6f', 'c4'] },\n        validator: BTCValidator\n    }, {\n        name: 'GarliCoin',\n        symbol: 'grlc',\n        addressTypes: { prod: ['26', '05'], testnet: ['6f', 'c4'] },\n        validator: BTCValidator\n    }, {\n        name: 'VertCoin',\n        symbol: 'vtc',\n        addressTypes: { prod: ['0x', '47', '71', '05'], testnet: ['6f', 'c4'] },\n        bech32Hrp: { prod: ['vtc'], testnet: ['tvtc'] },\n        validator: BTCValidator\n\n    }, {\n        name: 'BitcoinGold',\n        symbol: 'btg',\n        addressTypes: { prod: ['26', '17'], testnet: ['6f', 'c4'] },\n        validator: BTCValidator\n    }, {\n        name: 'Komodo',\n        symbol: 'kmd',\n        addressTypes: { prod: ['3c', '55'], testnet: ['0', '5'] },\n        validator: BTCValidator\n    }, {\n        name: 'BitcoinZ',\n        symbol: 'btcz',\n        expectedLength: 26,\n        addressTypes: { prod: ['1cb8', '1cbd'], testnet: ['1d25', '1cba'] },\n        validator: BTCValidator\n    }, {\n        name: 'BitcoinPrivate',\n        symbol: 'btcp',\n        expectedLength: 26,\n        addressTypes: { prod: ['1325', '13af'], testnet: ['1957', '19e0'] },\n        validator: BTCValidator\n    }, {\n        name: 'Hush',\n        symbol: 'hush',\n        expectedLength: 26,\n        addressTypes: { prod: ['1cb8', '1cbd'], testnet: ['1d25', '1cba'] },\n        validator: BTCValidator\n    }, {\n        name: 'SnowGem',\n        symbol: 'sng',\n        expectedLength: 26,\n        addressTypes: { prod: ['1c28', '1c2d'], testnet: ['1d25', '1cba'] },\n        validator: BTCValidator\n    }, {\n        name: 'ZCash',\n        symbol: 'zec',\n        expectedLength: 26,\n        addressTypes: { prod: ['1cb8', '1cbd'], testnet: ['1d25', '1cba'] },\n        validator: BTCValidator\n    }, {\n        name: 'ZClassic',\n        symbol: 'zcl',\n        expectedLength: 26,\n        addressTypes: { prod: ['1cb8', '1cbd'], testnet: ['1d25', '1cba'] },\n        validator: BTCValidator\n    }, {\n        name: 'ZenCash',\n        symbol: 'zen',\n        expectedLength: 26,\n        addressTypes: { prod: ['2089', '2096'], testnet: ['2092', '2098'] },\n        validator: BTCValidator\n    }, {\n        name: 'VoteCoin',\n        symbol: 'vot',\n        expectedLength: 26,\n        addressTypes: { prod: ['1cb8', '1cbd'], testnet: ['1d25', '1cba'] },\n        validator: BTCValidator\n    }, {\n        name: 'Decred',\n        symbol: 'dcr',\n        addressTypes: { prod: ['073f', '071a'], testnet: ['0f21', '0efc'] },\n        hashFunction: 'blake256',\n        expectedLength: 26,\n        validator: BTCValidator\n    }, {\n        name: 'GameCredits',\n        symbol: 'game',\n        addressTypes: { prod: ['26', '05'], testnet: [] },\n        validator: ETHValidator\n    }, {\n        name: 'PIVX',\n        symbol: 'pivx',\n        addressTypes: { prod: ['1e', '0d'], testnet: [] },\n        validator: BTCValidator\n    }, {\n        name: 'SolarCoin',\n        symbol: 'slr',\n        addressTypes: { prod: ['12', '05'], testnet: [] },\n        validator: BTCValidator\n    }, {\n        name: 'DigiByte',\n        symbol: 'dgb',\n        addressTypes: { prod: ['1e', '3f'], testnet: [] },\n        bech32Hrp: { prod: ['dgb', 'S'], testnet: [] },\n        validator: BTCValidator\n    }, {\n        name: 'Tether',\n        symbol: 'usdt',\n        addressTypes: { prod: ['00', '05'], testnet: ['6f', 'c4'] },\n        validator: USDTValidator\n    }, {\n        name: 'Ripple',\n        symbol: 'xrp',\n        validator: XRPValidator,\n    }, {\n        name: 'Dash',\n        symbol: 'dash',\n        addressTypes: { prod: ['4c', '10'], testnet: ['8c', '13'] },\n        validator: BTCValidator\n    }, {\n        name: 'Neo',\n        symbol: 'neo',\n        addressTypes: { prod: ['17'], testnet: [] },\n        validator: BTCValidator\n    }, {\n        name: 'NeoGas',\n        symbol: 'gas',\n        addressTypes: { prod: ['17'], testnet: [] },\n        validator: BTCValidator\n    }, {\n        name: 'Qtum',\n        symbol: 'qtum',\n        addressTypes: { prod: ['3a', '32'], testnet: ['78', '6e'] },\n        validator: BTCValidator\n    }, {\n        name: 'Waves',\n        symbol: 'waves',\n        addressTypes: { prod: ['0157'], testnet: ['0154'] },\n        expectedLength: 26,\n        hashFunction: 'blake256keccak256',\n        regex: /^[a-zA-Z0-9]{35}$/,\n        validator: BTCValidator\n    }, {\n        name: 'Ethereum',\n        symbol: 'eth',\n        validator: ETHValidator,\n    }, {\n        name: 'EthereumPow',\n        symbol: 'ethw',\n        validator: ETHValidator,\n    }, {\n        name: 'EtherZero',\n        symbol: 'etz',\n        validator: ETHValidator,\n    }, {\n        name: 'EthereumClassic',\n        symbol: 'etc',\n        validator: ETHValidator,\n    }, {\n        name: 'Celo',\n        symbol: 'celo',\n        validator: ETHValidator,\n    }, {\n        name: 'Callisto',\n        symbol: 'clo',\n        validator: ETHValidator,\n    }, {\n        name: 'Bankex',\n        symbol: 'bkx',\n        validator: ETHValidator\n    }, {\n        name: 'Cardano',\n        symbol: 'ada',\n        bech32Hrp: { prod: ['addr'], testnet: ['addr']},\n        validator: ADAValidator\n    }, {\n        name: 'Monero',\n        symbol: 'xmr',\n        addressTypes: { prod: ['18', '42'], testnet: ['53', '63'], stagenet: ['24'] },\n        iAddressTypes: { prod: ['19'], testnet: ['54'], stagenet: ['25'] },\n        validator: XMRValidator\n    }, {\n        name: 'Aragon',\n        symbol: 'ant',\n        validator: ETHValidator\n    }, {\n        name: 'Basic Attention Token',\n        symbol: 'bat',\n        validator: ETHValidator\n    }, {\n        name: 'Bancor',\n        symbol: 'bnt',\n        validator: ETHValidator\n    }, {\n        name: 'Civic',\n        symbol: 'cvc',\n        validator: ETHValidator\n    }, {\n        name: 'District0x',\n        symbol: 'dnt',\n        validator: ETHValidator\n    }, {\n        name: 'Gnosis',\n        symbol: 'gno',\n        validator: ETHValidator\n    }, {\n        name: 'Golem (GNT)',\n        symbol: 'gnt',\n        validator: ETHValidator\n    }, {\n        name: 'Golem',\n        symbol: 'glm',\n        validator: ETHValidator\n    },  {\n        name: 'Matchpool',\n        symbol: 'gup',\n        validator: ETHValidator\n    }, {\n        name: 'Melon',\n        symbol: 'mln',\n        validator: ETHValidator\n    }, {\n        name: 'Numeraire',\n        symbol: 'nmr',\n        validator: ETHValidator\n    }, {\n        name: 'OmiseGO',\n        symbol: 'omg',\n        validator: ETHValidator\n    }, {\n        name: 'TenX',\n        symbol: 'pay',\n        validator: ETHValidator\n    }, {\n        name: 'Ripio Credit Network',\n        symbol: 'rcn',\n        validator: ETHValidator\n    }, {\n        name: 'Augur',\n        symbol: 'rep',\n        validator: ETHValidator\n    }, {\n        name: 'iExec RLC',\n        symbol: 'rlc',\n        validator: ETHValidator\n    }, {\n        name: 'Salt',\n        symbol: 'salt',\n        validator: ETHValidator\n    }, {\n        name: 'Status',\n        symbol: 'snt',\n        validator: ETHValidator\n    }, {\n        name: 'Storj',\n        symbol: 'storj',\n        validator: ETHValidator\n    }, {\n        name: 'Swarm City',\n        symbol: 'swt',\n        validator: ETHValidator\n    }, {\n        name: 'TrueUSD',\n        symbol: 'tusd',\n        validator: ETHValidator\n    }, {\n        name: 'Wings',\n        symbol: 'wings',\n        validator: ETHValidator\n    }, {\n        name: '0x',\n        symbol: 'zrx',\n        validator: ETHValidator\n    }, {\n        name: 'Expanse',\n        symbol: 'exp',\n        validator: ETHValidator\n    }, {\n        name: 'Viberate',\n        symbol: 'vib',\n        validator: ETHValidator\n    }, {\n        name: 'Odyssey',\n        symbol: 'ocn',\n        validator: ETHValidator\n    }, {\n        name: 'Polymath',\n        symbol: 'poly',\n        validator: ETHValidator\n    }, {\n        name: 'Storm',\n        symbol: 'storm',\n        validator: ETHValidator\n    }, {\n        name: 'Nano',\n        symbol: 'nano',\n        validator: NANOValidator,\n    }, {\n        name: 'RaiBlocks',\n        symbol: 'xrb',\n        validator: NANOValidator,\n    }, {\n        name: 'Siacoin',\n        symbol: 'sc',\n        validator: SCValidator\n    }, {\n        name: 'HyperSpace',\n        symbol: 'xsc',\n        validator: SCValidator\n    }, {\n        name: 'loki',\n        symbol: 'loki',\n        addressTypes: { prod: ['114', '115', '116'], testnet: [] },\n        iAddressTypes: { prod: ['115'], testnet: [] },\n        validator: XMRValidator\n    }, {\n        name: 'LBRY Credits',\n        symbol: 'lbc',\n        addressTypes: { prod: ['55'], testnet: [] },\n        validator: BTCValidator\n    }, {\n        name: 'Tron',\n        symbol: 'trx',\n        addressTypes: { prod: [0x41], testnet: [0xa0] },\n        validator: TRXValidator\n    }, {\n        name: 'Nem',\n        symbol: 'xem',\n        validator: NEMValidator\n    }, {\n        name: 'Stellar',\n        symbol: 'xlm',\n        validator: XLMValidator,\n    }, {\n        name: 'BTU Protocol',\n        symbol: 'btu',\n        validator: ETHValidator,\n    }, {\n        name: 'Crypto.com Coin',\n        symbol: 'cro',\n        bech32Hrp: { prod: ['cro'], testnet: ['tcro']},\n        validator: BIP173Validator,\n    }, {\n        name: 'Multi-collateral DAI',\n        symbol: 'dai',\n        validator: ETHValidator,\n    }, {\n        name: 'Enjin Coin',\n        symbol: 'enj',\n        validator: ETHValidator,\n    }, {\n        name: 'HedgeTrade',\n        symbol: 'hedg',\n        validator: ETHValidator,\n    }, {\n        name: 'Cred',\n        symbol: 'lba',\n        validator: ETHValidator,\n    }, {\n        name: 'Chainlink',\n        symbol: 'link',\n        validator: ETHValidator,\n    }, {\n        name: 'Loom Network',\n        symbol: 'loom',\n        validator: ETHValidator,\n    }, {\n        name: 'Maker',\n        symbol: 'mkr',\n        validator: ETHValidator,\n    }, {\n        name: 'Metal',\n        symbol: 'mtl',\n        validator: ETHValidator,\n    }, {\n        name: 'Ocean Protocol',\n        symbol: 'ocean',\n        validator: ETHValidator,\n    }, {\n        name: 'Quant',\n        symbol: 'qnt',\n        validator: ETHValidator,\n    }, {\n        name: 'Synthetix Network',\n        symbol: 'snx',\n        validator: ETHValidator,\n    }, {\n        name: 'SOLVE',\n        symbol: 'solve',\n        validator: ETHValidator,\n    }, {\n        name: 'Spendcoin',\n        symbol: 'spnd',\n        validator: ETHValidator,\n    }, {\n        name: 'TEMCO',\n        symbol: 'temco',\n        validator: ETHValidator,\n    }, {\n        name: 'EOS',\n        symbol: 'eos',\n        validator: EOSValidator\n    }, {\n        name: 'Tezos',\n        symbol: 'xtz',\n        validator: XTZValidator\n    }, {\n        name: 'VeChain',\n        symbol: 'vet',\n        validator: ETHValidator\n    },\n    {\n        name: 'StormX',\n        symbol: 'stmx',\n        validator: ETHValidator\n    },\n    {\n        name: 'AugurV2',\n        symbol: 'repv2',\n        validator: ETHValidator\n    },\n    {\n        name: 'FirmaChain',\n        symbol: 'fct',\n        validator: ETHValidator\n    },\n    {\n        name: 'BlockTrade',\n        symbol: 'btt',\n        validator: ETHValidator\n    },\n    {\n        name: 'Quantum Resistant Ledger',\n        symbol: 'qrl',\n        validator: ETHValidator\n    },\n    {\n        name: 'Serve',\n        symbol: 'serv',\n        validator: ETHValidator\n    },\n    {\n        name: 'Tap',\n        symbol: 'xtp',\n        validator: ETHValidator\n    },\n    {\n        name: 'Compound',\n        symbol: 'comp',\n        validator: ETHValidator\n    },\n    {\n        name: 'Paxos',\n        symbol: 'pax',\n        validator: ETHValidator\n    },\n    {\n        name: 'USD Coin',\n        symbol: 'usdc',\n        validator: ETHValidator\n    },\n    {\n        name: 'CUSD',\n        symbol: 'cusd',\n        validator: ETHValidator\n    },\n    {\n        name: 'Algorand',\n        symbol: 'algo',\n        validator: AlgoValidator\n    },\n    {\n        name: 'Polkadot',\n        symbol: 'dot',\n        validator: DotValidator\n    },\n    {\n        name: 'Uniswap Coin',\n        symbol: 'uni',\n        validator: ETHValidator\n    },\n    {\n        name: 'Aave Coin',\n        symbol: 'aave',\n        validator: ETHValidator\n    },\n    {\n        name: 'Matic',\n        symbol: 'matic',\n        validator: ETHValidator\n    },\n    {\n        name: 'Decentraland',\n        symbol: 'mana',\n        validator: ETHValidator\n    },\n    {\n        name: 'Solana',\n        symbol: 'sol',\n        validator: Base58Validator,\n        maxLength: 44,\n        minLength: 43\n    },\n    {\n        name: 'Bonk',\n        symbol: 'bonk',\n        validator: Base58Validator,\n        maxLength: 44,\n        minLength: 43\n    },\n    {\n        name: 'Binance',\n        symbol: 'bnb',\n        validator: ETHValidator,\n    },\n    {\n        name: 'Avalanche',\n        symbol: 'avax',\n        validator: ETHValidator,\n    },\n    {\n        name: 'Flare',\n        symbol: 'flr',\n        validator: ETHValidator,\n    },\n    {\n        name: 'Yearn.finance',\n        symbol: 'yfi',\n        validator: ETHValidator,\n    },\n    {\n        name: 'Optimism',\n        symbol: 'op',\n        validator: ETHValidator,\n    },\n    {\n        name: 'Lido DAO Token',\n        symbol: 'ldo',\n        validator: ETHValidator,\n    },\n    {\n        name: 'Curve DAO',\n        symbol: 'crv',\n        validator: ETHValidator,\n    },\n    {\n        name: 'Arbitrum',\n        symbol: 'arb',\n        validator: ETHValidator,\n    },\n    {\n        name: 'Hashflow',\n        symbol: 'hft',\n        validator: ETHValidator,\n    },\n    {\n        name: 'Apecoin',\n        symbol: 'ape',\n        validator: ETHValidator,\n    },\n    {\n        name: 'Band Protocol',\n        symbol: 'band',\n        validator: ETHValidator,\n    },\n    {\n        name: 'The Graph',\n        symbol: 'grt',\n        validator: ETHValidator,\n    },\n    {\n        name: 'Magic',\n        symbol: 'magic',\n        validator: ETHValidator,\n    },\n    {\n        name: 'Biconomy',\n        symbol: 'bico',\n        validator: ETHValidator,\n    },\n    {\n        name: 'API3',\n        symbol: 'api3',\n        validator: ETHValidator,\n    },\n    {\n        name: 'Axie Infinity',\n        symbol: 'axs',\n        validator: ETHValidator,\n    },\n    {\n        name: 'Blur',\n        symbol: 'blur',\n        validator: ETHValidator,\n    },\n    {\n        name: 'Chiliz',\n        symbol: 'chz',\n        validator: ETHValidator,\n    },\n    {\n        name: 'Ethereum Name Service',\n        symbol: 'ens',\n        validator: ETHValidator,\n    },\n    {\n        name: 'Fetch.ai',\n        symbol: 'fet',\n        validator: ETHValidator,\n    },\n    {\n        name: 'Illuvium',\n        symbol: 'ilv',\n        validator: ETHValidator,\n    },\n    {\n        name: 'Injective',\n        symbol: 'inj',\n        validator: ETHValidator,\n    },\n    {\n        name: 'Immutable',\n        symbol: 'imx',\n        validator: ETHValidator,\n    },\n    {\n        name: 'Mask Network',\n        symbol: 'mask',\n        validator: ETHValidator,\n    },\n    {\n        name: 'Origin Protocol',\n        symbol: 'ogn',\n        validator: ETHValidator,\n    },\n    {\n        name: 'Onyx Protocol',\n        symbol: 'xcn',\n        validator: ETHValidator,\n    },\n    {\n        name: 'Unifi Protocol DAO',\n        symbol: 'unfi',\n        validator: ETHValidator,\n    },\n    {\n        name: 'Tellor',\n        symbol: 'trb',\n        validator: ETHValidator,\n    },\n    {\n        name: 'SuperVerse',\n        symbol: 'super',\n        validator: ETHValidator,\n    },\n    {\n        name: 'Skale',\n        symbol: 'skl',\n        validator: ETHValidator,\n    },\n    {\n        name: 'The Sandbox',\n        symbol: 'sand',\n        validator: ETHValidator,\n    },\n    {\n        name: 'Vulcan Forged PYR',\n        symbol: 'pyr',\n        validator: ETHValidator,\n    },\n    {\n        name: 'Marlin',\n        symbol: 'pond',\n        validator: ETHValidator,\n    },\n    {\n        name: 'PayPal USD',\n        symbol: 'pyusd',\n        validator: ETHValidator,\n    },\n];\n\n\n    module.exports = {\n    getByNameOrSymbol: function (currencyNameOrSymbol) {\n        var nameOrSymbol = currencyNameOrSymbol.toLowerCase();\n        return CURRENCIES.find(function (currency) {\n            return currency.name.toLowerCase() === nameOrSymbol || currency.symbol.toLowerCase() === nameOrSymbol\n        });\n    },\n    getAll: function () {\n        return CURRENCIES;\n    }\n};\n\n////spit out details for readme.md\n// CURRENCIES\n//     .sort((a, b) => a.name.toUpperCase() > b.name.toUpperCase() ? 1 : -1)\n//     .forEach(c => console.log(`* ${c.name}/${c.symbol} \\`'${c.name}'\\` or \\`'${c.symbol}'\\` `));\n\n////spit out keywords for package.json\n// CURRENCIES\n//     .sort((a, b) => a.name.toUpperCase() > b.name.toUpperCase() ? 1 : -1)\n//     .forEach(c => console.log(`\"${c.name}\",\"${c.symbol}\",`));\n//\n\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/multicoin-address-validator/src/currencies.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/multicoin-address-validator/src/dot_validator.js":
/*!***********************************************************************!*\
  !*** ./node_modules/multicoin-address-validator/src/dot_validator.js ***!
  \***********************************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

eval("const cryptoUtils = __webpack_require__(/*! ./crypto/utils */ \"(ssr)/./node_modules/multicoin-address-validator/src/crypto/utils.js\");\n\n// from https://github.com/paritytech/substrate/wiki/External-Address-Format-(SS58)\nconst addressFormats = [\n    { addressLength: 3, accountIndexLength: 1, checkSumLength: 1 },\n    { addressLength: 4, accountIndexLength: 2, checkSumLength: 1 },\n    { addressLength: 5, accountIndexLength: 2, checkSumLength: 2 },\n    { addressLength: 6, accountIndexLength: 4, checkSumLength: 1 },\n    { addressLength: 7, accountIndexLength: 4, checkSumLength: 2 },\n    { addressLength: 8, accountIndexLength: 4, checkSumLength: 3 },\n    { addressLength: 9, accountIndexLength: 4, checkSumLength: 4 },\n    { addressLength: 10, accountIndexLength: 8, checkSumLength: 1 },\n    { addressLength: 11, accountIndexLength: 8, checkSumLength: 2 },\n    { addressLength: 12, accountIndexLength: 8, checkSumLength: 3 },\n    { addressLength: 13, accountIndexLength: 8, checkSumLength: 4 },\n    { addressLength: 14, accountIndexLength: 8, checkSumLength: 5 },\n    { addressLength: 15, accountIndexLength: 8, checkSumLength: 6 },\n    { addressLength: 16, accountIndexLength: 8, checkSumLength: 7 },\n    { addressLength: 17, accountIndexLength: 8, checkSumLength: 8 },\n    { addressLength: 34, accountIndexLength: 32, checkSumLength: 2 },\n];\n\nmodule.exports = {\n    isValidAddress: function (address, currency, opts = {}) {\n        const { networkType = 'prod' } = opts;\n\n        return this.verifyChecksum(address)\n    },\n\n    verifyChecksum: function (address) {\n\n        try {\n            const preImage = '53533538505245'\n\n            const decoded = cryptoUtils.base58(address);\n            const addressType = cryptoUtils.byteArray2hexStr(decoded.slice(0, 1));\n            const addressAndChecksum = decoded.slice(1)\n\n            // get the address format\n            const addressFormat = addressFormats.find(af => af.addressLength === addressAndChecksum.length);\n\n            if (!addressFormat) {\n                throw new Error('Invalid address length');\n            }\n\n            const decodedAddress = cryptoUtils.byteArray2hexStr(addressAndChecksum.slice(0, addressFormat.accountIndexLength));\n            const checksum = cryptoUtils.byteArray2hexStr(addressAndChecksum.slice(-addressFormat.checkSumLength));\n\n            const calculatedHash = cryptoUtils\n                .blake2b(preImage + addressType + decodedAddress, 64)\n                .substr(0, addressFormat.checkSumLength * 2)\n                .toUpperCase();\n\n            return calculatedHash == checksum;\n        } catch(err) {\n            return false;\n        }\n    }\n}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvbXVsdGljb2luLWFkZHJlc3MtdmFsaWRhdG9yL3NyYy9kb3RfdmFsaWRhdG9yLmpzIiwibWFwcGluZ3MiOiJBQUFBLG9CQUFvQixtQkFBTyxDQUFDLDRGQUFnQjs7QUFFNUM7QUFDQTtBQUNBLE1BQU0sNERBQTREO0FBQ2xFLE1BQU0sNERBQTREO0FBQ2xFLE1BQU0sNERBQTREO0FBQ2xFLE1BQU0sNERBQTREO0FBQ2xFLE1BQU0sNERBQTREO0FBQ2xFLE1BQU0sNERBQTREO0FBQ2xFLE1BQU0sNERBQTREO0FBQ2xFLE1BQU0sNkRBQTZEO0FBQ25FLE1BQU0sNkRBQTZEO0FBQ25FLE1BQU0sNkRBQTZEO0FBQ25FLE1BQU0sNkRBQTZEO0FBQ25FLE1BQU0sNkRBQTZEO0FBQ25FLE1BQU0sNkRBQTZEO0FBQ25FLE1BQU0sNkRBQTZEO0FBQ25FLE1BQU0sNkRBQTZEO0FBQ25FLE1BQU0sOERBQThEO0FBQ3BFOztBQUVBO0FBQ0EsMERBQTBEO0FBQzFELGdCQUFnQix1QkFBdUI7O0FBRXZDO0FBQ0EsS0FBSzs7QUFFTDs7QUFFQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0EsVUFBVTtBQUNWO0FBQ0E7QUFDQTtBQUNBIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vZ2l0aHVic3RyZWFtaW5nLy4vbm9kZV9tb2R1bGVzL211bHRpY29pbi1hZGRyZXNzLXZhbGlkYXRvci9zcmMvZG90X3ZhbGlkYXRvci5qcz8wZjY5Il0sInNvdXJjZXNDb250ZW50IjpbImNvbnN0IGNyeXB0b1V0aWxzID0gcmVxdWlyZSgnLi9jcnlwdG8vdXRpbHMnKTtcblxuLy8gZnJvbSBodHRwczovL2dpdGh1Yi5jb20vcGFyaXR5dGVjaC9zdWJzdHJhdGUvd2lraS9FeHRlcm5hbC1BZGRyZXNzLUZvcm1hdC0oU1M1OClcbmNvbnN0IGFkZHJlc3NGb3JtYXRzID0gW1xuICAgIHsgYWRkcmVzc0xlbmd0aDogMywgYWNjb3VudEluZGV4TGVuZ3RoOiAxLCBjaGVja1N1bUxlbmd0aDogMSB9LFxuICAgIHsgYWRkcmVzc0xlbmd0aDogNCwgYWNjb3VudEluZGV4TGVuZ3RoOiAyLCBjaGVja1N1bUxlbmd0aDogMSB9LFxuICAgIHsgYWRkcmVzc0xlbmd0aDogNSwgYWNjb3VudEluZGV4TGVuZ3RoOiAyLCBjaGVja1N1bUxlbmd0aDogMiB9LFxuICAgIHsgYWRkcmVzc0xlbmd0aDogNiwgYWNjb3VudEluZGV4TGVuZ3RoOiA0LCBjaGVja1N1bUxlbmd0aDogMSB9LFxuICAgIHsgYWRkcmVzc0xlbmd0aDogNywgYWNjb3VudEluZGV4TGVuZ3RoOiA0LCBjaGVja1N1bUxlbmd0aDogMiB9LFxuICAgIHsgYWRkcmVzc0xlbmd0aDogOCwgYWNjb3VudEluZGV4TGVuZ3RoOiA0LCBjaGVja1N1bUxlbmd0aDogMyB9LFxuICAgIHsgYWRkcmVzc0xlbmd0aDogOSwgYWNjb3VudEluZGV4TGVuZ3RoOiA0LCBjaGVja1N1bUxlbmd0aDogNCB9LFxuICAgIHsgYWRkcmVzc0xlbmd0aDogMTAsIGFjY291bnRJbmRleExlbmd0aDogOCwgY2hlY2tTdW1MZW5ndGg6IDEgfSxcbiAgICB7IGFkZHJlc3NMZW5ndGg6IDExLCBhY2NvdW50SW5kZXhMZW5ndGg6IDgsIGNoZWNrU3VtTGVuZ3RoOiAyIH0sXG4gICAgeyBhZGRyZXNzTGVuZ3RoOiAxMiwgYWNjb3VudEluZGV4TGVuZ3RoOiA4LCBjaGVja1N1bUxlbmd0aDogMyB9LFxuICAgIHsgYWRkcmVzc0xlbmd0aDogMTMsIGFjY291bnRJbmRleExlbmd0aDogOCwgY2hlY2tTdW1MZW5ndGg6IDQgfSxcbiAgICB7IGFkZHJlc3NMZW5ndGg6IDE0LCBhY2NvdW50SW5kZXhMZW5ndGg6IDgsIGNoZWNrU3VtTGVuZ3RoOiA1IH0sXG4gICAgeyBhZGRyZXNzTGVuZ3RoOiAxNSwgYWNjb3VudEluZGV4TGVuZ3RoOiA4LCBjaGVja1N1bUxlbmd0aDogNiB9LFxuICAgIHsgYWRkcmVzc0xlbmd0aDogMTYsIGFjY291bnRJbmRleExlbmd0aDogOCwgY2hlY2tTdW1MZW5ndGg6IDcgfSxcbiAgICB7IGFkZHJlc3NMZW5ndGg6IDE3LCBhY2NvdW50SW5kZXhMZW5ndGg6IDgsIGNoZWNrU3VtTGVuZ3RoOiA4IH0sXG4gICAgeyBhZGRyZXNzTGVuZ3RoOiAzNCwgYWNjb3VudEluZGV4TGVuZ3RoOiAzMiwgY2hlY2tTdW1MZW5ndGg6IDIgfSxcbl07XG5cbm1vZHVsZS5leHBvcnRzID0ge1xuICAgIGlzVmFsaWRBZGRyZXNzOiBmdW5jdGlvbiAoYWRkcmVzcywgY3VycmVuY3ksIG9wdHMgPSB7fSkge1xuICAgICAgICBjb25zdCB7IG5ldHdvcmtUeXBlID0gJ3Byb2QnIH0gPSBvcHRzO1xuXG4gICAgICAgIHJldHVybiB0aGlzLnZlcmlmeUNoZWNrc3VtKGFkZHJlc3MpXG4gICAgfSxcblxuICAgIHZlcmlmeUNoZWNrc3VtOiBmdW5jdGlvbiAoYWRkcmVzcykge1xuXG4gICAgICAgIHRyeSB7XG4gICAgICAgICAgICBjb25zdCBwcmVJbWFnZSA9ICc1MzUzMzUzODUwNTI0NSdcblxuICAgICAgICAgICAgY29uc3QgZGVjb2RlZCA9IGNyeXB0b1V0aWxzLmJhc2U1OChhZGRyZXNzKTtcbiAgICAgICAgICAgIGNvbnN0IGFkZHJlc3NUeXBlID0gY3J5cHRvVXRpbHMuYnl0ZUFycmF5MmhleFN0cihkZWNvZGVkLnNsaWNlKDAsIDEpKTtcbiAgICAgICAgICAgIGNvbnN0IGFkZHJlc3NBbmRDaGVja3N1bSA9IGRlY29kZWQuc2xpY2UoMSlcblxuICAgICAgICAgICAgLy8gZ2V0IHRoZSBhZGRyZXNzIGZvcm1hdFxuICAgICAgICAgICAgY29uc3QgYWRkcmVzc0Zvcm1hdCA9IGFkZHJlc3NGb3JtYXRzLmZpbmQoYWYgPT4gYWYuYWRkcmVzc0xlbmd0aCA9PT0gYWRkcmVzc0FuZENoZWNrc3VtLmxlbmd0aCk7XG5cbiAgICAgICAgICAgIGlmICghYWRkcmVzc0Zvcm1hdCkge1xuICAgICAgICAgICAgICAgIHRocm93IG5ldyBFcnJvcignSW52YWxpZCBhZGRyZXNzIGxlbmd0aCcpO1xuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICBjb25zdCBkZWNvZGVkQWRkcmVzcyA9IGNyeXB0b1V0aWxzLmJ5dGVBcnJheTJoZXhTdHIoYWRkcmVzc0FuZENoZWNrc3VtLnNsaWNlKDAsIGFkZHJlc3NGb3JtYXQuYWNjb3VudEluZGV4TGVuZ3RoKSk7XG4gICAgICAgICAgICBjb25zdCBjaGVja3N1bSA9IGNyeXB0b1V0aWxzLmJ5dGVBcnJheTJoZXhTdHIoYWRkcmVzc0FuZENoZWNrc3VtLnNsaWNlKC1hZGRyZXNzRm9ybWF0LmNoZWNrU3VtTGVuZ3RoKSk7XG5cbiAgICAgICAgICAgIGNvbnN0IGNhbGN1bGF0ZWRIYXNoID0gY3J5cHRvVXRpbHNcbiAgICAgICAgICAgICAgICAuYmxha2UyYihwcmVJbWFnZSArIGFkZHJlc3NUeXBlICsgZGVjb2RlZEFkZHJlc3MsIDY0KVxuICAgICAgICAgICAgICAgIC5zdWJzdHIoMCwgYWRkcmVzc0Zvcm1hdC5jaGVja1N1bUxlbmd0aCAqIDIpXG4gICAgICAgICAgICAgICAgLnRvVXBwZXJDYXNlKCk7XG5cbiAgICAgICAgICAgIHJldHVybiBjYWxjdWxhdGVkSGFzaCA9PSBjaGVja3N1bTtcbiAgICAgICAgfSBjYXRjaChlcnIpIHtcbiAgICAgICAgICAgIHJldHVybiBmYWxzZTtcbiAgICAgICAgfVxuICAgIH1cbn1cbiJdLCJuYW1lcyI6W10sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/multicoin-address-validator/src/dot_validator.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/multicoin-address-validator/src/eos_validator.js":
/*!***********************************************************************!*\
  !*** ./node_modules/multicoin-address-validator/src/eos_validator.js ***!
  \***********************************************************************/
/***/ ((module) => {

eval("function isValidEOSAddress (address, currency, networkType) {\n  var regex = /^[a-z0-9.]+$/g // Must be numbers, lowercase letters and decimal points only\n  if (address.search(regex) !== -1 && address.length === 12) {\n    return true\n  } else {\n    return false\n  }\n}\n\nmodule.exports = {\n  isValidAddress: function (address, currency, networkType) {\n    return isValidEOSAddress(address, currency, networkType)\n  }\n}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvbXVsdGljb2luLWFkZHJlc3MtdmFsaWRhdG9yL3NyYy9lb3NfdmFsaWRhdG9yLmpzIiwibWFwcGluZ3MiOiJBQUFBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsSUFBSTtBQUNKO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vZ2l0aHVic3RyZWFtaW5nLy4vbm9kZV9tb2R1bGVzL211bHRpY29pbi1hZGRyZXNzLXZhbGlkYXRvci9zcmMvZW9zX3ZhbGlkYXRvci5qcz9kODA4Il0sInNvdXJjZXNDb250ZW50IjpbImZ1bmN0aW9uIGlzVmFsaWRFT1NBZGRyZXNzIChhZGRyZXNzLCBjdXJyZW5jeSwgbmV0d29ya1R5cGUpIHtcbiAgdmFyIHJlZ2V4ID0gL15bYS16MC05Ll0rJC9nIC8vIE11c3QgYmUgbnVtYmVycywgbG93ZXJjYXNlIGxldHRlcnMgYW5kIGRlY2ltYWwgcG9pbnRzIG9ubHlcbiAgaWYgKGFkZHJlc3Muc2VhcmNoKHJlZ2V4KSAhPT0gLTEgJiYgYWRkcmVzcy5sZW5ndGggPT09IDEyKSB7XG4gICAgcmV0dXJuIHRydWVcbiAgfSBlbHNlIHtcbiAgICByZXR1cm4gZmFsc2VcbiAgfVxufVxuXG5tb2R1bGUuZXhwb3J0cyA9IHtcbiAgaXNWYWxpZEFkZHJlc3M6IGZ1bmN0aW9uIChhZGRyZXNzLCBjdXJyZW5jeSwgbmV0d29ya1R5cGUpIHtcbiAgICByZXR1cm4gaXNWYWxpZEVPU0FkZHJlc3MoYWRkcmVzcywgY3VycmVuY3ksIG5ldHdvcmtUeXBlKVxuICB9XG59XG4iXSwibmFtZXMiOltdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/multicoin-address-validator/src/eos_validator.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/multicoin-address-validator/src/ethereum_validator.js":
/*!****************************************************************************!*\
  !*** ./node_modules/multicoin-address-validator/src/ethereum_validator.js ***!
  \****************************************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

eval("var cryptoUtils = __webpack_require__(/*! ./crypto/utils */ \"(ssr)/./node_modules/multicoin-address-validator/src/crypto/utils.js\");\n\nmodule.exports = {\n    isValidAddress: function (address) {\n        if (!/^0x[0-9a-fA-F]{40}$/.test(address)) {\n            // Check if it has the basic requirements of an address\n            return false;\n        }\n\n        if (/^0x[0-9a-f]{40}$/.test(address) || /^0x?[0-9A-F]{40}$/.test(address)) {\n            // If it's all small caps or all all caps, return true\n            return true;\n        }\n\n        // Otherwise check each case\n        return this.verifyChecksum(address);\n    },\n    verifyChecksum: function (address) {\n        // Check each case\n        address = address.replace('0x','');\n\n        var addressHash = cryptoUtils.keccak256(address.toLowerCase());\n\n        for (var i = 0; i < 40; i++ ) {\n            // The nth letter should be uppercase if the nth digit of casemap is 1\n            if ((parseInt(addressHash[i], 16) > 7 && address[i].toUpperCase() !== address[i]) ||\n                (parseInt(addressHash[i], 16) <= 7 && address[i].toLowerCase() !== address[i])) {\n                return false;\n            }\n        }\n\n        return true;\n    }\n};\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvbXVsdGljb2luLWFkZHJlc3MtdmFsaWRhdG9yL3NyYy9ldGhlcmV1bV92YWxpZGF0b3IuanMiLCJtYXBwaW5ncyI6IkFBQUEsa0JBQWtCLG1CQUFPLENBQUMsNEZBQWdCOztBQUUxQztBQUNBO0FBQ0EsNkJBQTZCLEdBQUc7QUFDaEM7QUFDQTtBQUNBOztBQUVBLHlCQUF5QixHQUFHLGtDQUFrQyxHQUFHO0FBQ2pFO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0EsS0FBSztBQUNMO0FBQ0E7QUFDQTs7QUFFQTs7QUFFQSx3QkFBd0IsUUFBUTtBQUNoQztBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vZ2l0aHVic3RyZWFtaW5nLy4vbm9kZV9tb2R1bGVzL211bHRpY29pbi1hZGRyZXNzLXZhbGlkYXRvci9zcmMvZXRoZXJldW1fdmFsaWRhdG9yLmpzP2ZjNzgiXSwic291cmNlc0NvbnRlbnQiOlsidmFyIGNyeXB0b1V0aWxzID0gcmVxdWlyZSgnLi9jcnlwdG8vdXRpbHMnKTtcblxubW9kdWxlLmV4cG9ydHMgPSB7XG4gICAgaXNWYWxpZEFkZHJlc3M6IGZ1bmN0aW9uIChhZGRyZXNzKSB7XG4gICAgICAgIGlmICghL14weFswLTlhLWZBLUZdezQwfSQvLnRlc3QoYWRkcmVzcykpIHtcbiAgICAgICAgICAgIC8vIENoZWNrIGlmIGl0IGhhcyB0aGUgYmFzaWMgcmVxdWlyZW1lbnRzIG9mIGFuIGFkZHJlc3NcbiAgICAgICAgICAgIHJldHVybiBmYWxzZTtcbiAgICAgICAgfVxuXG4gICAgICAgIGlmICgvXjB4WzAtOWEtZl17NDB9JC8udGVzdChhZGRyZXNzKSB8fCAvXjB4P1swLTlBLUZdezQwfSQvLnRlc3QoYWRkcmVzcykpIHtcbiAgICAgICAgICAgIC8vIElmIGl0J3MgYWxsIHNtYWxsIGNhcHMgb3IgYWxsIGFsbCBjYXBzLCByZXR1cm4gdHJ1ZVxuICAgICAgICAgICAgcmV0dXJuIHRydWU7XG4gICAgICAgIH1cblxuICAgICAgICAvLyBPdGhlcndpc2UgY2hlY2sgZWFjaCBjYXNlXG4gICAgICAgIHJldHVybiB0aGlzLnZlcmlmeUNoZWNrc3VtKGFkZHJlc3MpO1xuICAgIH0sXG4gICAgdmVyaWZ5Q2hlY2tzdW06IGZ1bmN0aW9uIChhZGRyZXNzKSB7XG4gICAgICAgIC8vIENoZWNrIGVhY2ggY2FzZVxuICAgICAgICBhZGRyZXNzID0gYWRkcmVzcy5yZXBsYWNlKCcweCcsJycpO1xuXG4gICAgICAgIHZhciBhZGRyZXNzSGFzaCA9IGNyeXB0b1V0aWxzLmtlY2NhazI1NihhZGRyZXNzLnRvTG93ZXJDYXNlKCkpO1xuXG4gICAgICAgIGZvciAodmFyIGkgPSAwOyBpIDwgNDA7IGkrKyApIHtcbiAgICAgICAgICAgIC8vIFRoZSBudGggbGV0dGVyIHNob3VsZCBiZSB1cHBlcmNhc2UgaWYgdGhlIG50aCBkaWdpdCBvZiBjYXNlbWFwIGlzIDFcbiAgICAgICAgICAgIGlmICgocGFyc2VJbnQoYWRkcmVzc0hhc2hbaV0sIDE2KSA+IDcgJiYgYWRkcmVzc1tpXS50b1VwcGVyQ2FzZSgpICE9PSBhZGRyZXNzW2ldKSB8fFxuICAgICAgICAgICAgICAgIChwYXJzZUludChhZGRyZXNzSGFzaFtpXSwgMTYpIDw9IDcgJiYgYWRkcmVzc1tpXS50b0xvd2VyQ2FzZSgpICE9PSBhZGRyZXNzW2ldKSkge1xuICAgICAgICAgICAgICAgIHJldHVybiBmYWxzZTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuXG4gICAgICAgIHJldHVybiB0cnVlO1xuICAgIH1cbn07XG4iXSwibmFtZXMiOltdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/multicoin-address-validator/src/ethereum_validator.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/multicoin-address-validator/src/monero_validator.js":
/*!**************************************************************************!*\
  !*** ./node_modules/multicoin-address-validator/src/monero_validator.js ***!
  \**************************************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

eval("var cryptoUtils = __webpack_require__(/*! ./crypto/utils */ \"(ssr)/./node_modules/multicoin-address-validator/src/crypto/utils.js\")\nvar cnBase58 = __webpack_require__(/*! ./crypto/cnBase58 */ \"(ssr)/./node_modules/multicoin-address-validator/src/crypto/cnBase58.js\")\n\nvar DEFAULT_NETWORK_TYPE = 'prod'\nvar addressRegTest = new RegExp(\n  '^[123456789ABCDEFGHJKLMNPQRSTUVWXYZabcdefghijkmnopqrstuvwxyz]{95}$'\n)\nvar integratedAddressRegTest = new RegExp(\n  '^[123456789ABCDEFGHJKLMNPQRSTUVWXYZabcdefghijkmnopqrstuvwxyz]{106}$'\n)\n\nfunction validateNetwork(decoded, currency, networkType, addressType) {\n  var network = currency.addressTypes\n  if (addressType == 'integrated') {\n    network = currency.iAddressTypes\n  }\n  var at = parseInt(decoded.substr(0, 2), 16).toString()\n\n  switch (networkType) {\n    case 'prod':\n      return network.prod.indexOf(at) >= 0\n    case 'testnet':\n      return network.testnet.indexOf(at) >= 0\n    case 'stagenet':\n      return network.stagenet.indexOf(at) >= 0\n    case 'both':\n      return network.prod.indexOf(at) >= 0 || network.testnet.indexOf(at) >= 0 || network.stagenet.indexOf(at) >= 0\n    default:\n      return false\n  }\n}\n\nfunction hextobin(hex) {\n  if (hex.length % 2 !== 0) return null\n  var res = new Uint8Array(hex.length / 2)\n  for (var i = 0; i < hex.length / 2; ++i) {\n    res[i] = parseInt(hex.slice(i * 2, i * 2 + 2), 16)\n  }\n  return res\n}\n\nmodule.exports = {\n  isValidAddress: function(address, currency, opts = {}) {\n    const { networkType = DEFAULT_NETWORK_TYPE} = opts;\n    var addressType = 'standard'\n    if (!addressRegTest.test(address)) {\n      if (integratedAddressRegTest.test(address)) {\n        addressType = 'integrated'\n      } else {\n        return false\n      }\n    }\n\n    var decodedAddrStr = cnBase58.decode(address)\n    if (!decodedAddrStr) return false\n\n    if (!validateNetwork(decodedAddrStr, currency, networkType, addressType)) return false\n\n    var addrChecksum = decodedAddrStr.slice(-8)\n    var hashChecksum = cryptoUtils.keccak256Checksum(hextobin(decodedAddrStr.slice(0, -8)))\n\n    return addrChecksum === hashChecksum\n  }\n}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvbXVsdGljb2luLWFkZHJlc3MtdmFsaWRhdG9yL3NyYy9tb25lcm9fdmFsaWRhdG9yLmpzIiwibWFwcGluZ3MiOiJBQUFBLGtCQUFrQixtQkFBTyxDQUFDLDRGQUFnQjtBQUMxQyxlQUFlLG1CQUFPLENBQUMsa0dBQW1COztBQUUxQztBQUNBO0FBQ0EsaUVBQWlFLEdBQUc7QUFDcEU7QUFDQTtBQUNBLGlFQUFpRSxJQUFJO0FBQ3JFOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQSxrQkFBa0Isb0JBQW9CO0FBQ3RDO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0EsdURBQXVEO0FBQ3ZELFlBQVksb0NBQW9DO0FBQ2hEO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsUUFBUTtBQUNSO0FBQ0E7QUFDQTs7QUFFQTtBQUNBOztBQUVBOztBQUVBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vZ2l0aHVic3RyZWFtaW5nLy4vbm9kZV9tb2R1bGVzL211bHRpY29pbi1hZGRyZXNzLXZhbGlkYXRvci9zcmMvbW9uZXJvX3ZhbGlkYXRvci5qcz8zZTZlIl0sInNvdXJjZXNDb250ZW50IjpbInZhciBjcnlwdG9VdGlscyA9IHJlcXVpcmUoJy4vY3J5cHRvL3V0aWxzJylcbnZhciBjbkJhc2U1OCA9IHJlcXVpcmUoJy4vY3J5cHRvL2NuQmFzZTU4JylcblxudmFyIERFRkFVTFRfTkVUV09SS19UWVBFID0gJ3Byb2QnXG52YXIgYWRkcmVzc1JlZ1Rlc3QgPSBuZXcgUmVnRXhwKFxuICAnXlsxMjM0NTY3ODlBQkNERUZHSEpLTE1OUFFSU1RVVldYWVphYmNkZWZnaGlqa21ub3BxcnN0dXZ3eHl6XXs5NX0kJ1xuKVxudmFyIGludGVncmF0ZWRBZGRyZXNzUmVnVGVzdCA9IG5ldyBSZWdFeHAoXG4gICdeWzEyMzQ1Njc4OUFCQ0RFRkdISktMTU5QUVJTVFVWV1hZWmFiY2RlZmdoaWprbW5vcHFyc3R1dnd4eXpdezEwNn0kJ1xuKVxuXG5mdW5jdGlvbiB2YWxpZGF0ZU5ldHdvcmsoZGVjb2RlZCwgY3VycmVuY3ksIG5ldHdvcmtUeXBlLCBhZGRyZXNzVHlwZSkge1xuICB2YXIgbmV0d29yayA9IGN1cnJlbmN5LmFkZHJlc3NUeXBlc1xuICBpZiAoYWRkcmVzc1R5cGUgPT0gJ2ludGVncmF0ZWQnKSB7XG4gICAgbmV0d29yayA9IGN1cnJlbmN5LmlBZGRyZXNzVHlwZXNcbiAgfVxuICB2YXIgYXQgPSBwYXJzZUludChkZWNvZGVkLnN1YnN0cigwLCAyKSwgMTYpLnRvU3RyaW5nKClcblxuICBzd2l0Y2ggKG5ldHdvcmtUeXBlKSB7XG4gICAgY2FzZSAncHJvZCc6XG4gICAgICByZXR1cm4gbmV0d29yay5wcm9kLmluZGV4T2YoYXQpID49IDBcbiAgICBjYXNlICd0ZXN0bmV0JzpcbiAgICAgIHJldHVybiBuZXR3b3JrLnRlc3RuZXQuaW5kZXhPZihhdCkgPj0gMFxuICAgIGNhc2UgJ3N0YWdlbmV0JzpcbiAgICAgIHJldHVybiBuZXR3b3JrLnN0YWdlbmV0LmluZGV4T2YoYXQpID49IDBcbiAgICBjYXNlICdib3RoJzpcbiAgICAgIHJldHVybiBuZXR3b3JrLnByb2QuaW5kZXhPZihhdCkgPj0gMCB8fCBuZXR3b3JrLnRlc3RuZXQuaW5kZXhPZihhdCkgPj0gMCB8fCBuZXR3b3JrLnN0YWdlbmV0LmluZGV4T2YoYXQpID49IDBcbiAgICBkZWZhdWx0OlxuICAgICAgcmV0dXJuIGZhbHNlXG4gIH1cbn1cblxuZnVuY3Rpb24gaGV4dG9iaW4oaGV4KSB7XG4gIGlmIChoZXgubGVuZ3RoICUgMiAhPT0gMCkgcmV0dXJuIG51bGxcbiAgdmFyIHJlcyA9IG5ldyBVaW50OEFycmF5KGhleC5sZW5ndGggLyAyKVxuICBmb3IgKHZhciBpID0gMDsgaSA8IGhleC5sZW5ndGggLyAyOyArK2kpIHtcbiAgICByZXNbaV0gPSBwYXJzZUludChoZXguc2xpY2UoaSAqIDIsIGkgKiAyICsgMiksIDE2KVxuICB9XG4gIHJldHVybiByZXNcbn1cblxubW9kdWxlLmV4cG9ydHMgPSB7XG4gIGlzVmFsaWRBZGRyZXNzOiBmdW5jdGlvbihhZGRyZXNzLCBjdXJyZW5jeSwgb3B0cyA9IHt9KSB7XG4gICAgY29uc3QgeyBuZXR3b3JrVHlwZSA9IERFRkFVTFRfTkVUV09SS19UWVBFfSA9IG9wdHM7XG4gICAgdmFyIGFkZHJlc3NUeXBlID0gJ3N0YW5kYXJkJ1xuICAgIGlmICghYWRkcmVzc1JlZ1Rlc3QudGVzdChhZGRyZXNzKSkge1xuICAgICAgaWYgKGludGVncmF0ZWRBZGRyZXNzUmVnVGVzdC50ZXN0KGFkZHJlc3MpKSB7XG4gICAgICAgIGFkZHJlc3NUeXBlID0gJ2ludGVncmF0ZWQnXG4gICAgICB9IGVsc2Uge1xuICAgICAgICByZXR1cm4gZmFsc2VcbiAgICAgIH1cbiAgICB9XG5cbiAgICB2YXIgZGVjb2RlZEFkZHJTdHIgPSBjbkJhc2U1OC5kZWNvZGUoYWRkcmVzcylcbiAgICBpZiAoIWRlY29kZWRBZGRyU3RyKSByZXR1cm4gZmFsc2VcblxuICAgIGlmICghdmFsaWRhdGVOZXR3b3JrKGRlY29kZWRBZGRyU3RyLCBjdXJyZW5jeSwgbmV0d29ya1R5cGUsIGFkZHJlc3NUeXBlKSkgcmV0dXJuIGZhbHNlXG5cbiAgICB2YXIgYWRkckNoZWNrc3VtID0gZGVjb2RlZEFkZHJTdHIuc2xpY2UoLTgpXG4gICAgdmFyIGhhc2hDaGVja3N1bSA9IGNyeXB0b1V0aWxzLmtlY2NhazI1NkNoZWNrc3VtKGhleHRvYmluKGRlY29kZWRBZGRyU3RyLnNsaWNlKDAsIC04KSkpXG5cbiAgICByZXR1cm4gYWRkckNoZWNrc3VtID09PSBoYXNoQ2hlY2tzdW1cbiAgfVxufVxuIl0sIm5hbWVzIjpbXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/multicoin-address-validator/src/monero_validator.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/multicoin-address-validator/src/nano_validator.js":
/*!************************************************************************!*\
  !*** ./node_modules/multicoin-address-validator/src/nano_validator.js ***!
  \************************************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

eval("var cryptoUtils = __webpack_require__(/*! ./crypto/utils */ \"(ssr)/./node_modules/multicoin-address-validator/src/crypto/utils.js\");\nvar baseX = __webpack_require__(/*! base-x */ \"(ssr)/./node_modules/base-x/src/index.js\");\n\nvar ALLOWED_CHARS = '13456789abcdefghijkmnopqrstuwxyz';\n\nvar codec = baseX(ALLOWED_CHARS);\n// https://github.com/nanocurrency/raiblocks/wiki/Accounts,-Keys,-Seeds,-and-Wallet-Identifiers\nvar regexp = new RegExp('^(xrb|nano)_([' + ALLOWED_CHARS + ']{60})$');\n\nmodule.exports = {\n    isValidAddress: function (address) {\n        if (regexp.test(address)) {\n            return this.verifyChecksum(address);\n        }\n\n        return false;\n    },\n\n    verifyChecksum: function (address) {\n        var bytes = codec.decode(regexp.exec(address)[2]).slice(-37);\n        // https://github.com/nanocurrency/raiblocks/blob/master/rai/lib/numbers.cpp#L73\n        var computedChecksum = cryptoUtils.blake2b(cryptoUtils.toHex(bytes.slice(0, -5)), 5);\n        var checksum = cryptoUtils.toHex(bytes.slice(-5).reverse());\n\n        return computedChecksum === checksum\n    }\n};\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvbXVsdGljb2luLWFkZHJlc3MtdmFsaWRhdG9yL3NyYy9uYW5vX3ZhbGlkYXRvci5qcyIsIm1hcHBpbmdzIjoiQUFBQSxrQkFBa0IsbUJBQU8sQ0FBQyw0RkFBZ0I7QUFDMUMsWUFBWSxtQkFBTyxDQUFDLHdEQUFROztBQUU1Qjs7QUFFQTtBQUNBO0FBQ0EsOERBQThELEdBQUc7O0FBRWpFO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQSxLQUFLOztBQUVMO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vZ2l0aHVic3RyZWFtaW5nLy4vbm9kZV9tb2R1bGVzL211bHRpY29pbi1hZGRyZXNzLXZhbGlkYXRvci9zcmMvbmFub192YWxpZGF0b3IuanM/ZjA4ZCJdLCJzb3VyY2VzQ29udGVudCI6WyJ2YXIgY3J5cHRvVXRpbHMgPSByZXF1aXJlKCcuL2NyeXB0by91dGlscycpO1xudmFyIGJhc2VYID0gcmVxdWlyZSgnYmFzZS14Jyk7XG5cbnZhciBBTExPV0VEX0NIQVJTID0gJzEzNDU2Nzg5YWJjZGVmZ2hpamttbm9wcXJzdHV3eHl6JztcblxudmFyIGNvZGVjID0gYmFzZVgoQUxMT1dFRF9DSEFSUyk7XG4vLyBodHRwczovL2dpdGh1Yi5jb20vbmFub2N1cnJlbmN5L3JhaWJsb2Nrcy93aWtpL0FjY291bnRzLC1LZXlzLC1TZWVkcywtYW5kLVdhbGxldC1JZGVudGlmaWVyc1xudmFyIHJlZ2V4cCA9IG5ldyBSZWdFeHAoJ14oeHJifG5hbm8pXyhbJyArIEFMTE9XRURfQ0hBUlMgKyAnXXs2MH0pJCcpO1xuXG5tb2R1bGUuZXhwb3J0cyA9IHtcbiAgICBpc1ZhbGlkQWRkcmVzczogZnVuY3Rpb24gKGFkZHJlc3MpIHtcbiAgICAgICAgaWYgKHJlZ2V4cC50ZXN0KGFkZHJlc3MpKSB7XG4gICAgICAgICAgICByZXR1cm4gdGhpcy52ZXJpZnlDaGVja3N1bShhZGRyZXNzKTtcbiAgICAgICAgfVxuXG4gICAgICAgIHJldHVybiBmYWxzZTtcbiAgICB9LFxuXG4gICAgdmVyaWZ5Q2hlY2tzdW06IGZ1bmN0aW9uIChhZGRyZXNzKSB7XG4gICAgICAgIHZhciBieXRlcyA9IGNvZGVjLmRlY29kZShyZWdleHAuZXhlYyhhZGRyZXNzKVsyXSkuc2xpY2UoLTM3KTtcbiAgICAgICAgLy8gaHR0cHM6Ly9naXRodWIuY29tL25hbm9jdXJyZW5jeS9yYWlibG9ja3MvYmxvYi9tYXN0ZXIvcmFpL2xpYi9udW1iZXJzLmNwcCNMNzNcbiAgICAgICAgdmFyIGNvbXB1dGVkQ2hlY2tzdW0gPSBjcnlwdG9VdGlscy5ibGFrZTJiKGNyeXB0b1V0aWxzLnRvSGV4KGJ5dGVzLnNsaWNlKDAsIC01KSksIDUpO1xuICAgICAgICB2YXIgY2hlY2tzdW0gPSBjcnlwdG9VdGlscy50b0hleChieXRlcy5zbGljZSgtNSkucmV2ZXJzZSgpKTtcblxuICAgICAgICByZXR1cm4gY29tcHV0ZWRDaGVja3N1bSA9PT0gY2hlY2tzdW1cbiAgICB9XG59O1xuIl0sIm5hbWVzIjpbXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/multicoin-address-validator/src/nano_validator.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/multicoin-address-validator/src/nem_validator.js":
/*!***********************************************************************!*\
  !*** ./node_modules/multicoin-address-validator/src/nem_validator.js ***!
  \***********************************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

eval("var cryptoUtils = __webpack_require__(/*! ./crypto/utils */ \"(ssr)/./node_modules/multicoin-address-validator/src/crypto/utils.js\");\n\n /**\n* Check if an address is valid\n*\n* @param {string} _address - An address\n*\n* @return {boolean} - True if address is valid, false otherwise\n*/\nvar isValidAddress = function(_address) {\n    var address = _address.toString().toUpperCase().replace(/-/g, '');\n    if (!address || address.length !== 40) {\n        return false;\n    }\n    var decoded = cryptoUtils.toHex(cryptoUtils.base32.b32decode(address));\n    var stepThreeChecksum = cryptoUtils.keccak256Checksum(Buffer.from(decoded.slice(0, 42), 'hex'));\n\n    return stepThreeChecksum === decoded.slice(42);\n};\n\nmodule.exports = {\n    isValidAddress: isValidAddress,\n}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvbXVsdGljb2luLWFkZHJlc3MtdmFsaWRhdG9yL3NyYy9uZW1fdmFsaWRhdG9yLmpzIiwibWFwcGluZ3MiOiJBQUFBLGtCQUFrQixtQkFBTyxDQUFDLDRGQUFnQjs7QUFFMUM7QUFDQTtBQUNBO0FBQ0EsVUFBVSxRQUFRO0FBQ2xCO0FBQ0EsV0FBVyxTQUFTO0FBQ3BCO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTs7QUFFQTtBQUNBO0FBQ0EiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9naXRodWJzdHJlYW1pbmcvLi9ub2RlX21vZHVsZXMvbXVsdGljb2luLWFkZHJlc3MtdmFsaWRhdG9yL3NyYy9uZW1fdmFsaWRhdG9yLmpzPzZjYWIiXSwic291cmNlc0NvbnRlbnQiOlsidmFyIGNyeXB0b1V0aWxzID0gcmVxdWlyZSgnLi9jcnlwdG8vdXRpbHMnKTtcblxuIC8qKlxuKiBDaGVjayBpZiBhbiBhZGRyZXNzIGlzIHZhbGlkXG4qXG4qIEBwYXJhbSB7c3RyaW5nfSBfYWRkcmVzcyAtIEFuIGFkZHJlc3NcbipcbiogQHJldHVybiB7Ym9vbGVhbn0gLSBUcnVlIGlmIGFkZHJlc3MgaXMgdmFsaWQsIGZhbHNlIG90aGVyd2lzZVxuKi9cbnZhciBpc1ZhbGlkQWRkcmVzcyA9IGZ1bmN0aW9uKF9hZGRyZXNzKSB7XG4gICAgdmFyIGFkZHJlc3MgPSBfYWRkcmVzcy50b1N0cmluZygpLnRvVXBwZXJDYXNlKCkucmVwbGFjZSgvLS9nLCAnJyk7XG4gICAgaWYgKCFhZGRyZXNzIHx8IGFkZHJlc3MubGVuZ3RoICE9PSA0MCkge1xuICAgICAgICByZXR1cm4gZmFsc2U7XG4gICAgfVxuICAgIHZhciBkZWNvZGVkID0gY3J5cHRvVXRpbHMudG9IZXgoY3J5cHRvVXRpbHMuYmFzZTMyLmIzMmRlY29kZShhZGRyZXNzKSk7XG4gICAgdmFyIHN0ZXBUaHJlZUNoZWNrc3VtID0gY3J5cHRvVXRpbHMua2VjY2FrMjU2Q2hlY2tzdW0oQnVmZmVyLmZyb20oZGVjb2RlZC5zbGljZSgwLCA0MiksICdoZXgnKSk7XG5cbiAgICByZXR1cm4gc3RlcFRocmVlQ2hlY2tzdW0gPT09IGRlY29kZWQuc2xpY2UoNDIpO1xufTtcblxubW9kdWxlLmV4cG9ydHMgPSB7XG4gICAgaXNWYWxpZEFkZHJlc3M6IGlzVmFsaWRBZGRyZXNzLFxufVxuIl0sIm5hbWVzIjpbXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/multicoin-address-validator/src/nem_validator.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/multicoin-address-validator/src/ripple_validator.js":
/*!**************************************************************************!*\
  !*** ./node_modules/multicoin-address-validator/src/ripple_validator.js ***!
  \**************************************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

eval("var cryptoUtils = __webpack_require__(/*! ./crypto/utils */ \"(ssr)/./node_modules/multicoin-address-validator/src/crypto/utils.js\");\nvar baseX = __webpack_require__(/*! base-x */ \"(ssr)/./node_modules/base-x/src/index.js\");\n\nvar ALLOWED_CHARS = 'rpshnaf39wBUDNEGHJKLM4PQRST7VWXYZ2bcdeCg65jkm8oFqi1tuvAxyz';\n\nvar codec = baseX(ALLOWED_CHARS);\nvar regexp = new RegExp('^r[' + ALLOWED_CHARS + ']{27,35}$');\n\nmodule.exports = {\n    /**\n     * ripple address validation\n     */\n    isValidAddress: function (address) {\n        if (regexp.test(address)) {\n            return this.verifyChecksum(address);\n        }\n\n        return false;\n    },\n\n    verifyChecksum: function (address) {\n        var bytes = codec.decode(address);\n        var computedChecksum = cryptoUtils.sha256Checksum(cryptoUtils.toHex(bytes.slice(0, -4)));\n        var checksum = cryptoUtils.toHex(bytes.slice(-4));\n\n        return computedChecksum === checksum\n    }\n};\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvbXVsdGljb2luLWFkZHJlc3MtdmFsaWRhdG9yL3NyYy9yaXBwbGVfdmFsaWRhdG9yLmpzIiwibWFwcGluZ3MiOiJBQUFBLGtCQUFrQixtQkFBTyxDQUFDLDRGQUFnQjtBQUMxQyxZQUFZLG1CQUFPLENBQUMsd0RBQVE7O0FBRTVCOztBQUVBO0FBQ0EsbURBQW1ELE1BQU07O0FBRXpEO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQSxLQUFLOztBQUVMO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQSIsInNvdXJjZXMiOlsid2VicGFjazovL2dpdGh1YnN0cmVhbWluZy8uL25vZGVfbW9kdWxlcy9tdWx0aWNvaW4tYWRkcmVzcy12YWxpZGF0b3Ivc3JjL3JpcHBsZV92YWxpZGF0b3IuanM/ZmMyOCJdLCJzb3VyY2VzQ29udGVudCI6WyJ2YXIgY3J5cHRvVXRpbHMgPSByZXF1aXJlKCcuL2NyeXB0by91dGlscycpO1xudmFyIGJhc2VYID0gcmVxdWlyZSgnYmFzZS14Jyk7XG5cbnZhciBBTExPV0VEX0NIQVJTID0gJ3Jwc2huYWYzOXdCVURORUdISktMTTRQUVJTVDdWV1hZWjJiY2RlQ2c2NWprbThvRnFpMXR1dkF4eXonO1xuXG52YXIgY29kZWMgPSBiYXNlWChBTExPV0VEX0NIQVJTKTtcbnZhciByZWdleHAgPSBuZXcgUmVnRXhwKCdeclsnICsgQUxMT1dFRF9DSEFSUyArICddezI3LDM1fSQnKTtcblxubW9kdWxlLmV4cG9ydHMgPSB7XG4gICAgLyoqXG4gICAgICogcmlwcGxlIGFkZHJlc3MgdmFsaWRhdGlvblxuICAgICAqL1xuICAgIGlzVmFsaWRBZGRyZXNzOiBmdW5jdGlvbiAoYWRkcmVzcykge1xuICAgICAgICBpZiAocmVnZXhwLnRlc3QoYWRkcmVzcykpIHtcbiAgICAgICAgICAgIHJldHVybiB0aGlzLnZlcmlmeUNoZWNrc3VtKGFkZHJlc3MpO1xuICAgICAgICB9XG5cbiAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgIH0sXG5cbiAgICB2ZXJpZnlDaGVja3N1bTogZnVuY3Rpb24gKGFkZHJlc3MpIHtcbiAgICAgICAgdmFyIGJ5dGVzID0gY29kZWMuZGVjb2RlKGFkZHJlc3MpO1xuICAgICAgICB2YXIgY29tcHV0ZWRDaGVja3N1bSA9IGNyeXB0b1V0aWxzLnNoYTI1NkNoZWNrc3VtKGNyeXB0b1V0aWxzLnRvSGV4KGJ5dGVzLnNsaWNlKDAsIC00KSkpO1xuICAgICAgICB2YXIgY2hlY2tzdW0gPSBjcnlwdG9VdGlscy50b0hleChieXRlcy5zbGljZSgtNCkpO1xuXG4gICAgICAgIHJldHVybiBjb21wdXRlZENoZWNrc3VtID09PSBjaGVja3N1bVxuICAgIH1cbn07XG4iXSwibmFtZXMiOltdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/multicoin-address-validator/src/ripple_validator.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/multicoin-address-validator/src/siacoin_validator.js":
/*!***************************************************************************!*\
  !*** ./node_modules/multicoin-address-validator/src/siacoin_validator.js ***!
  \***************************************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

eval("var cryptoUtils = __webpack_require__(/*! ./crypto/utils */ \"(ssr)/./node_modules/multicoin-address-validator/src/crypto/utils.js\")\nvar isEqual = __webpack_require__(/*! lodash.isequal */ \"(ssr)/./node_modules/lodash.isequal/index.js\")\n\nfunction hexToBytes(hex) {\n  var bytes = []\n  for (var c = 0; c < hex.length; c += 2) {\n    bytes.push(parseInt(hex.substr(c, 2), 16))\n  }\n  return bytes\n}\n\nmodule.exports = {\n  isValidAddress: function(address) {\n    if (address.length !== 76) {\n      // Check if it has the basic requirements of an address\n      return false\n    }\n\n    // Otherwise check each case\n    return this.verifyChecksum(address)\n  },\n  verifyChecksum: function(address) {\n    var checksumBytes = address.slice(0, 32*2)\n    var check = address.slice(32*2, 38*2)\n    var blakeHash = cryptoUtils.blake2b(checksumBytes, 32).slice(0, 6*2)\n    return !!isEqual(blakeHash, check)\n  }\n}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvbXVsdGljb2luLWFkZHJlc3MtdmFsaWRhdG9yL3NyYy9zaWFjb2luX3ZhbGlkYXRvci5qcyIsIm1hcHBpbmdzIjoiQUFBQSxrQkFBa0IsbUJBQU8sQ0FBQyw0RkFBZ0I7QUFDMUMsY0FBYyxtQkFBTyxDQUFDLG9FQUFnQjs7QUFFdEM7QUFDQTtBQUNBLGtCQUFrQixnQkFBZ0I7QUFDbEM7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQSxHQUFHO0FBQ0g7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9naXRodWJzdHJlYW1pbmcvLi9ub2RlX21vZHVsZXMvbXVsdGljb2luLWFkZHJlc3MtdmFsaWRhdG9yL3NyYy9zaWFjb2luX3ZhbGlkYXRvci5qcz9hNzIwIl0sInNvdXJjZXNDb250ZW50IjpbInZhciBjcnlwdG9VdGlscyA9IHJlcXVpcmUoJy4vY3J5cHRvL3V0aWxzJylcbnZhciBpc0VxdWFsID0gcmVxdWlyZSgnbG9kYXNoLmlzZXF1YWwnKVxuXG5mdW5jdGlvbiBoZXhUb0J5dGVzKGhleCkge1xuICB2YXIgYnl0ZXMgPSBbXVxuICBmb3IgKHZhciBjID0gMDsgYyA8IGhleC5sZW5ndGg7IGMgKz0gMikge1xuICAgIGJ5dGVzLnB1c2gocGFyc2VJbnQoaGV4LnN1YnN0cihjLCAyKSwgMTYpKVxuICB9XG4gIHJldHVybiBieXRlc1xufVxuXG5tb2R1bGUuZXhwb3J0cyA9IHtcbiAgaXNWYWxpZEFkZHJlc3M6IGZ1bmN0aW9uKGFkZHJlc3MpIHtcbiAgICBpZiAoYWRkcmVzcy5sZW5ndGggIT09IDc2KSB7XG4gICAgICAvLyBDaGVjayBpZiBpdCBoYXMgdGhlIGJhc2ljIHJlcXVpcmVtZW50cyBvZiBhbiBhZGRyZXNzXG4gICAgICByZXR1cm4gZmFsc2VcbiAgICB9XG5cbiAgICAvLyBPdGhlcndpc2UgY2hlY2sgZWFjaCBjYXNlXG4gICAgcmV0dXJuIHRoaXMudmVyaWZ5Q2hlY2tzdW0oYWRkcmVzcylcbiAgfSxcbiAgdmVyaWZ5Q2hlY2tzdW06IGZ1bmN0aW9uKGFkZHJlc3MpIHtcbiAgICB2YXIgY2hlY2tzdW1CeXRlcyA9IGFkZHJlc3Muc2xpY2UoMCwgMzIqMilcbiAgICB2YXIgY2hlY2sgPSBhZGRyZXNzLnNsaWNlKDMyKjIsIDM4KjIpXG4gICAgdmFyIGJsYWtlSGFzaCA9IGNyeXB0b1V0aWxzLmJsYWtlMmIoY2hlY2tzdW1CeXRlcywgMzIpLnNsaWNlKDAsIDYqMilcbiAgICByZXR1cm4gISFpc0VxdWFsKGJsYWtlSGFzaCwgY2hlY2spXG4gIH1cbn1cbiJdLCJuYW1lcyI6W10sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/multicoin-address-validator/src/siacoin_validator.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/multicoin-address-validator/src/stellar_validator.js":
/*!***************************************************************************!*\
  !*** ./node_modules/multicoin-address-validator/src/stellar_validator.js ***!
  \***************************************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

eval("var baseX = __webpack_require__(/*! base-x */ \"(ssr)/./node_modules/base-x/src/index.js\");\nvar crc = __webpack_require__(/*! crc */ \"(ssr)/./node_modules/crc/index.js\");\nvar cryptoUtils = __webpack_require__(/*! ./crypto/utils */ \"(ssr)/./node_modules/multicoin-address-validator/src/crypto/utils.js\");\n\nvar ALPHABET = 'ABCDEFGHIJKLMNOPQRSTUVWXYZ234567';\n\nvar base32 = baseX(ALPHABET);\nvar regexp = new RegExp('^[' + ALPHABET + ']{56}$');\nvar ed25519PublicKeyVersionByte = (6 << 3);\n\nfunction swap16(number) {\n    var lower = number & 0xFF;\n    var upper = (number >> 8) & 0xFF;\n    return (lower << 8) | upper;\n}\n\nmodule.exports = {\n    isValidAddress: function (address) {\n        if (regexp.test(address)) {\n            return this.verifyChecksum(address);\n        }\n\n        return false;\n    },\n\n    verifyChecksum: function (address) {\n        // based on https://github.com/stellar/js-stellar-base/blob/master/src/strkey.js#L126\n        var bytes = base32.decode(address);\n        if (bytes[0] !== ed25519PublicKeyVersionByte) {\n            return false;\n        }\n\n        var computedChecksum = cryptoUtils.numberToHex(swap16(crc.crc16xmodem(bytes.slice(0, -2))), 4);\n        var checksum = cryptoUtils.toHex(bytes.slice(-2));\n\n        return computedChecksum === checksum\n    }\n};\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvbXVsdGljb2luLWFkZHJlc3MtdmFsaWRhdG9yL3NyYy9zdGVsbGFyX3ZhbGlkYXRvci5qcyIsIm1hcHBpbmdzIjoiQUFBQSxZQUFZLG1CQUFPLENBQUMsd0RBQVE7QUFDNUIsVUFBVSxtQkFBTyxDQUFDLDhDQUFLO0FBQ3ZCLGtCQUFrQixtQkFBTyxDQUFDLDRGQUFnQjs7QUFFMUM7O0FBRUE7QUFDQSw2Q0FBNkMsR0FBRztBQUNoRDs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQSxLQUFLOztBQUVMO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBOztBQUVBO0FBQ0E7QUFDQSIsInNvdXJjZXMiOlsid2VicGFjazovL2dpdGh1YnN0cmVhbWluZy8uL25vZGVfbW9kdWxlcy9tdWx0aWNvaW4tYWRkcmVzcy12YWxpZGF0b3Ivc3JjL3N0ZWxsYXJfdmFsaWRhdG9yLmpzPzg0ZDciXSwic291cmNlc0NvbnRlbnQiOlsidmFyIGJhc2VYID0gcmVxdWlyZSgnYmFzZS14Jyk7XG52YXIgY3JjID0gcmVxdWlyZSgnY3JjJyk7XG52YXIgY3J5cHRvVXRpbHMgPSByZXF1aXJlKCcuL2NyeXB0by91dGlscycpO1xuXG52YXIgQUxQSEFCRVQgPSAnQUJDREVGR0hJSktMTU5PUFFSU1RVVldYWVoyMzQ1NjcnO1xuXG52YXIgYmFzZTMyID0gYmFzZVgoQUxQSEFCRVQpO1xudmFyIHJlZ2V4cCA9IG5ldyBSZWdFeHAoJ15bJyArIEFMUEhBQkVUICsgJ117NTZ9JCcpO1xudmFyIGVkMjU1MTlQdWJsaWNLZXlWZXJzaW9uQnl0ZSA9ICg2IDw8IDMpO1xuXG5mdW5jdGlvbiBzd2FwMTYobnVtYmVyKSB7XG4gICAgdmFyIGxvd2VyID0gbnVtYmVyICYgMHhGRjtcbiAgICB2YXIgdXBwZXIgPSAobnVtYmVyID4+IDgpICYgMHhGRjtcbiAgICByZXR1cm4gKGxvd2VyIDw8IDgpIHwgdXBwZXI7XG59XG5cbm1vZHVsZS5leHBvcnRzID0ge1xuICAgIGlzVmFsaWRBZGRyZXNzOiBmdW5jdGlvbiAoYWRkcmVzcykge1xuICAgICAgICBpZiAocmVnZXhwLnRlc3QoYWRkcmVzcykpIHtcbiAgICAgICAgICAgIHJldHVybiB0aGlzLnZlcmlmeUNoZWNrc3VtKGFkZHJlc3MpO1xuICAgICAgICB9XG5cbiAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgIH0sXG5cbiAgICB2ZXJpZnlDaGVja3N1bTogZnVuY3Rpb24gKGFkZHJlc3MpIHtcbiAgICAgICAgLy8gYmFzZWQgb24gaHR0cHM6Ly9naXRodWIuY29tL3N0ZWxsYXIvanMtc3RlbGxhci1iYXNlL2Jsb2IvbWFzdGVyL3NyYy9zdHJrZXkuanMjTDEyNlxuICAgICAgICB2YXIgYnl0ZXMgPSBiYXNlMzIuZGVjb2RlKGFkZHJlc3MpO1xuICAgICAgICBpZiAoYnl0ZXNbMF0gIT09IGVkMjU1MTlQdWJsaWNLZXlWZXJzaW9uQnl0ZSkge1xuICAgICAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgICAgICB9XG5cbiAgICAgICAgdmFyIGNvbXB1dGVkQ2hlY2tzdW0gPSBjcnlwdG9VdGlscy5udW1iZXJUb0hleChzd2FwMTYoY3JjLmNyYzE2eG1vZGVtKGJ5dGVzLnNsaWNlKDAsIC0yKSkpLCA0KTtcbiAgICAgICAgdmFyIGNoZWNrc3VtID0gY3J5cHRvVXRpbHMudG9IZXgoYnl0ZXMuc2xpY2UoLTIpKTtcblxuICAgICAgICByZXR1cm4gY29tcHV0ZWRDaGVja3N1bSA9PT0gY2hlY2tzdW1cbiAgICB9XG59O1xuIl0sIm5hbWVzIjpbXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/multicoin-address-validator/src/stellar_validator.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/multicoin-address-validator/src/tezos_validator.js":
/*!*************************************************************************!*\
  !*** ./node_modules/multicoin-address-validator/src/tezos_validator.js ***!
  \*************************************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

eval("const base58 = __webpack_require__(/*! ./crypto/base58 */ \"(ssr)/./node_modules/multicoin-address-validator/src/crypto/base58.js\");\nconst cryptoUtils = __webpack_require__(/*! ./crypto/utils */ \"(ssr)/./node_modules/multicoin-address-validator/src/crypto/utils.js\");\n\nconst prefix = new Uint8Array([6, 161, 159]);\n\nfunction decodeRaw(buffer) {\n    let payload = buffer.slice(0, -4);\n    let checksum = buffer.slice(-4);\n    let newChecksum = cryptoUtils.hexStr2byteArray(\n        cryptoUtils.sha256x2(cryptoUtils.byteArray2hexStr(payload))\n    );\n\n    if (checksum[0] ^ newChecksum[0] |\n        checksum[1] ^ newChecksum[1] |\n        checksum[2] ^ newChecksum[2] |\n        checksum[3] ^ newChecksum[3])\n        return;\n    return payload;\n}\n\nconst isValidAddress = function(address) {\n    try {\n        let buffer = base58.decode(address);\n        let payload = decodeRaw(buffer);\n        if (!payload)\n            return false;\n        payload.slice(prefix.length);\n        return true;\n    } catch (e) {\n        return false;\n    }\n};\n\nmodule.exports = {\n    isValidAddress\n};\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvbXVsdGljb2luLWFkZHJlc3MtdmFsaWRhdG9yL3NyYy90ZXpvc192YWxpZGF0b3IuanMiLCJtYXBwaW5ncyI6IkFBQUEsZUFBZSxtQkFBTyxDQUFDLDhGQUFpQjtBQUN4QyxvQkFBb0IsbUJBQU8sQ0FBQyw0RkFBZ0I7O0FBRTVDOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsTUFBTTtBQUNOO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0EiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9naXRodWJzdHJlYW1pbmcvLi9ub2RlX21vZHVsZXMvbXVsdGljb2luLWFkZHJlc3MtdmFsaWRhdG9yL3NyYy90ZXpvc192YWxpZGF0b3IuanM/NGMwZSJdLCJzb3VyY2VzQ29udGVudCI6WyJjb25zdCBiYXNlNTggPSByZXF1aXJlKCcuL2NyeXB0by9iYXNlNTgnKTtcbmNvbnN0IGNyeXB0b1V0aWxzID0gcmVxdWlyZSgnLi9jcnlwdG8vdXRpbHMnKTtcblxuY29uc3QgcHJlZml4ID0gbmV3IFVpbnQ4QXJyYXkoWzYsIDE2MSwgMTU5XSk7XG5cbmZ1bmN0aW9uIGRlY29kZVJhdyhidWZmZXIpIHtcbiAgICBsZXQgcGF5bG9hZCA9IGJ1ZmZlci5zbGljZSgwLCAtNCk7XG4gICAgbGV0IGNoZWNrc3VtID0gYnVmZmVyLnNsaWNlKC00KTtcbiAgICBsZXQgbmV3Q2hlY2tzdW0gPSBjcnlwdG9VdGlscy5oZXhTdHIyYnl0ZUFycmF5KFxuICAgICAgICBjcnlwdG9VdGlscy5zaGEyNTZ4MihjcnlwdG9VdGlscy5ieXRlQXJyYXkyaGV4U3RyKHBheWxvYWQpKVxuICAgICk7XG5cbiAgICBpZiAoY2hlY2tzdW1bMF0gXiBuZXdDaGVja3N1bVswXSB8XG4gICAgICAgIGNoZWNrc3VtWzFdIF4gbmV3Q2hlY2tzdW1bMV0gfFxuICAgICAgICBjaGVja3N1bVsyXSBeIG5ld0NoZWNrc3VtWzJdIHxcbiAgICAgICAgY2hlY2tzdW1bM10gXiBuZXdDaGVja3N1bVszXSlcbiAgICAgICAgcmV0dXJuO1xuICAgIHJldHVybiBwYXlsb2FkO1xufVxuXG5jb25zdCBpc1ZhbGlkQWRkcmVzcyA9IGZ1bmN0aW9uKGFkZHJlc3MpIHtcbiAgICB0cnkge1xuICAgICAgICBsZXQgYnVmZmVyID0gYmFzZTU4LmRlY29kZShhZGRyZXNzKTtcbiAgICAgICAgbGV0IHBheWxvYWQgPSBkZWNvZGVSYXcoYnVmZmVyKTtcbiAgICAgICAgaWYgKCFwYXlsb2FkKVxuICAgICAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgICAgICBwYXlsb2FkLnNsaWNlKHByZWZpeC5sZW5ndGgpO1xuICAgICAgICByZXR1cm4gdHJ1ZTtcbiAgICB9IGNhdGNoIChlKSB7XG4gICAgICAgIHJldHVybiBmYWxzZTtcbiAgICB9XG59O1xuXG5tb2R1bGUuZXhwb3J0cyA9IHtcbiAgICBpc1ZhbGlkQWRkcmVzc1xufTtcbiJdLCJuYW1lcyI6W10sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/multicoin-address-validator/src/tezos_validator.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/multicoin-address-validator/src/tron_validator.js":
/*!************************************************************************!*\
  !*** ./node_modules/multicoin-address-validator/src/tron_validator.js ***!
  \************************************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

eval("var cryptoUtils = __webpack_require__(/*! ./crypto/utils */ \"(ssr)/./node_modules/multicoin-address-validator/src/crypto/utils.js\");\n\nfunction decodeBase58Address(base58Sting) {\n    if (typeof (base58Sting) !== 'string') {\n        return false;\n    }\n    if (base58Sting.length <= 4) {\n        return false;\n    }\n\n    try {\n        var address = cryptoUtils.base58(base58Sting);\n    } catch (e) {\n        return false\n    }\n\n    /*if (base58Sting.length <= 4) {\n        return false;\n    }*/\n    var len = address.length;\n    var offset = len - 4;\n    var checkSum = address.slice(offset);\n    address = address.slice(0, offset);\n    var hash0 = cryptoUtils.sha256(cryptoUtils.byteArray2hexStr(address));\n    var hash1 = cryptoUtils.hexStr2byteArray(cryptoUtils.sha256(hash0));\n    var checkSum1 = hash1.slice(0, 4);\n    if (checkSum[0] === checkSum1[0] && checkSum[1] === checkSum1[1] && checkSum[2]\n        === checkSum1[2] && checkSum[3] === checkSum1[3]\n    ) {\n        return address;\n    }\n\n    return false;\n}\n\nfunction getEnv(currency, networkType) {\n    var evn = networkType || 'prod';\n\n    if (evn !== 'prod' && evn !== 'testnet') evn = 'prod';\n\n    return currency.addressTypes[evn][0]\n}\n\nmodule.exports = {\n    /**\n     * tron address validation\n     */\n    isValidAddress: function (mainAddress, currency, opts) {\n        var networkType = opts ? opts.networkType : '';\n        var address = decodeBase58Address(mainAddress);\n\n        if (!address) {\n            return false;\n        }\n\n        if (address.length !== 21) {\n            return false;\n        }\n\n        return getEnv(currency, networkType) === address[0];\n    }\n};\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvbXVsdGljb2luLWFkZHJlc3MtdmFsaWRhdG9yL3NyYy90cm9uX3ZhbGlkYXRvci5qcyIsIm1hcHBpbmdzIjoiQUFBQSxrQkFBa0IsbUJBQU8sQ0FBQyw0RkFBZ0I7O0FBRTFDO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQSxNQUFNO0FBQ047QUFDQTs7QUFFQTtBQUNBO0FBQ0EsS0FBSztBQUNMO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBOztBQUVBO0FBQ0E7O0FBRUE7O0FBRUE7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQSIsInNvdXJjZXMiOlsid2VicGFjazovL2dpdGh1YnN0cmVhbWluZy8uL25vZGVfbW9kdWxlcy9tdWx0aWNvaW4tYWRkcmVzcy12YWxpZGF0b3Ivc3JjL3Ryb25fdmFsaWRhdG9yLmpzPzYzNjgiXSwic291cmNlc0NvbnRlbnQiOlsidmFyIGNyeXB0b1V0aWxzID0gcmVxdWlyZSgnLi9jcnlwdG8vdXRpbHMnKTtcblxuZnVuY3Rpb24gZGVjb2RlQmFzZTU4QWRkcmVzcyhiYXNlNThTdGluZykge1xuICAgIGlmICh0eXBlb2YgKGJhc2U1OFN0aW5nKSAhPT0gJ3N0cmluZycpIHtcbiAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgIH1cbiAgICBpZiAoYmFzZTU4U3RpbmcubGVuZ3RoIDw9IDQpIHtcbiAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgIH1cblxuICAgIHRyeSB7XG4gICAgICAgIHZhciBhZGRyZXNzID0gY3J5cHRvVXRpbHMuYmFzZTU4KGJhc2U1OFN0aW5nKTtcbiAgICB9IGNhdGNoIChlKSB7XG4gICAgICAgIHJldHVybiBmYWxzZVxuICAgIH1cblxuICAgIC8qaWYgKGJhc2U1OFN0aW5nLmxlbmd0aCA8PSA0KSB7XG4gICAgICAgIHJldHVybiBmYWxzZTtcbiAgICB9Ki9cbiAgICB2YXIgbGVuID0gYWRkcmVzcy5sZW5ndGg7XG4gICAgdmFyIG9mZnNldCA9IGxlbiAtIDQ7XG4gICAgdmFyIGNoZWNrU3VtID0gYWRkcmVzcy5zbGljZShvZmZzZXQpO1xuICAgIGFkZHJlc3MgPSBhZGRyZXNzLnNsaWNlKDAsIG9mZnNldCk7XG4gICAgdmFyIGhhc2gwID0gY3J5cHRvVXRpbHMuc2hhMjU2KGNyeXB0b1V0aWxzLmJ5dGVBcnJheTJoZXhTdHIoYWRkcmVzcykpO1xuICAgIHZhciBoYXNoMSA9IGNyeXB0b1V0aWxzLmhleFN0cjJieXRlQXJyYXkoY3J5cHRvVXRpbHMuc2hhMjU2KGhhc2gwKSk7XG4gICAgdmFyIGNoZWNrU3VtMSA9IGhhc2gxLnNsaWNlKDAsIDQpO1xuICAgIGlmIChjaGVja1N1bVswXSA9PT0gY2hlY2tTdW0xWzBdICYmIGNoZWNrU3VtWzFdID09PSBjaGVja1N1bTFbMV0gJiYgY2hlY2tTdW1bMl1cbiAgICAgICAgPT09IGNoZWNrU3VtMVsyXSAmJiBjaGVja1N1bVszXSA9PT0gY2hlY2tTdW0xWzNdXG4gICAgKSB7XG4gICAgICAgIHJldHVybiBhZGRyZXNzO1xuICAgIH1cblxuICAgIHJldHVybiBmYWxzZTtcbn1cblxuZnVuY3Rpb24gZ2V0RW52KGN1cnJlbmN5LCBuZXR3b3JrVHlwZSkge1xuICAgIHZhciBldm4gPSBuZXR3b3JrVHlwZSB8fCAncHJvZCc7XG5cbiAgICBpZiAoZXZuICE9PSAncHJvZCcgJiYgZXZuICE9PSAndGVzdG5ldCcpIGV2biA9ICdwcm9kJztcblxuICAgIHJldHVybiBjdXJyZW5jeS5hZGRyZXNzVHlwZXNbZXZuXVswXVxufVxuXG5tb2R1bGUuZXhwb3J0cyA9IHtcbiAgICAvKipcbiAgICAgKiB0cm9uIGFkZHJlc3MgdmFsaWRhdGlvblxuICAgICAqL1xuICAgIGlzVmFsaWRBZGRyZXNzOiBmdW5jdGlvbiAobWFpbkFkZHJlc3MsIGN1cnJlbmN5LCBvcHRzKSB7XG4gICAgICAgIHZhciBuZXR3b3JrVHlwZSA9IG9wdHMgPyBvcHRzLm5ldHdvcmtUeXBlIDogJyc7XG4gICAgICAgIHZhciBhZGRyZXNzID0gZGVjb2RlQmFzZTU4QWRkcmVzcyhtYWluQWRkcmVzcyk7XG5cbiAgICAgICAgaWYgKCFhZGRyZXNzKSB7XG4gICAgICAgICAgICByZXR1cm4gZmFsc2U7XG4gICAgICAgIH1cblxuICAgICAgICBpZiAoYWRkcmVzcy5sZW5ndGggIT09IDIxKSB7XG4gICAgICAgICAgICByZXR1cm4gZmFsc2U7XG4gICAgICAgIH1cblxuICAgICAgICByZXR1cm4gZ2V0RW52KGN1cnJlbmN5LCBuZXR3b3JrVHlwZSkgPT09IGFkZHJlc3NbMF07XG4gICAgfVxufTtcbiJdLCJuYW1lcyI6W10sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/multicoin-address-validator/src/tron_validator.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/multicoin-address-validator/src/usdt_validator.js":
/*!************************************************************************!*\
  !*** ./node_modules/multicoin-address-validator/src/usdt_validator.js ***!
  \************************************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

eval("var BTCValidator = __webpack_require__(/*! ./bitcoin_validator */ \"(ssr)/./node_modules/multicoin-address-validator/src/bitcoin_validator.js\");\nvar ETHValidator = __webpack_require__(/*! ./ethereum_validator */ \"(ssr)/./node_modules/multicoin-address-validator/src/ethereum_validator.js\");\n\nfunction checkBothValidators(address, currency, networkType) {\n    var result = BTCValidator.isValidAddress(address, currency, networkType);\n    return result ? result :\n        ETHValidator.isValidAddress(address, currency, networkType);\n}\n\nmodule.exports = {\n    isValidAddress: function (address, currency, opts) {\n        if (opts) {\n            if (opts.chainType === 'erc20') {\n                return ETHValidator.isValidAddress(address, currency, opts.networkType);\n            } else if (opts.chainType === 'omni') {\n                return BTCValidator.isValidAddress(address, currency, opts.networkType);\n            }\n        }\n        return checkBothValidators(address, currency, opts);\n    }\n};\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvbXVsdGljb2luLWFkZHJlc3MtdmFsaWRhdG9yL3NyYy91c2R0X3ZhbGlkYXRvci5qcyIsIm1hcHBpbmdzIjoiQUFBQSxtQkFBbUIsbUJBQU8sQ0FBQyxzR0FBcUI7QUFDaEQsbUJBQW1CLG1CQUFPLENBQUMsd0dBQXNCOztBQUVqRDtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxjQUFjO0FBQ2Q7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vZ2l0aHVic3RyZWFtaW5nLy4vbm9kZV9tb2R1bGVzL211bHRpY29pbi1hZGRyZXNzLXZhbGlkYXRvci9zcmMvdXNkdF92YWxpZGF0b3IuanM/Mzc4NyJdLCJzb3VyY2VzQ29udGVudCI6WyJ2YXIgQlRDVmFsaWRhdG9yID0gcmVxdWlyZSgnLi9iaXRjb2luX3ZhbGlkYXRvcicpO1xudmFyIEVUSFZhbGlkYXRvciA9IHJlcXVpcmUoJy4vZXRoZXJldW1fdmFsaWRhdG9yJyk7XG5cbmZ1bmN0aW9uIGNoZWNrQm90aFZhbGlkYXRvcnMoYWRkcmVzcywgY3VycmVuY3ksIG5ldHdvcmtUeXBlKSB7XG4gICAgdmFyIHJlc3VsdCA9IEJUQ1ZhbGlkYXRvci5pc1ZhbGlkQWRkcmVzcyhhZGRyZXNzLCBjdXJyZW5jeSwgbmV0d29ya1R5cGUpO1xuICAgIHJldHVybiByZXN1bHQgPyByZXN1bHQgOlxuICAgICAgICBFVEhWYWxpZGF0b3IuaXNWYWxpZEFkZHJlc3MoYWRkcmVzcywgY3VycmVuY3ksIG5ldHdvcmtUeXBlKTtcbn1cblxubW9kdWxlLmV4cG9ydHMgPSB7XG4gICAgaXNWYWxpZEFkZHJlc3M6IGZ1bmN0aW9uIChhZGRyZXNzLCBjdXJyZW5jeSwgb3B0cykge1xuICAgICAgICBpZiAob3B0cykge1xuICAgICAgICAgICAgaWYgKG9wdHMuY2hhaW5UeXBlID09PSAnZXJjMjAnKSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIEVUSFZhbGlkYXRvci5pc1ZhbGlkQWRkcmVzcyhhZGRyZXNzLCBjdXJyZW5jeSwgb3B0cy5uZXR3b3JrVHlwZSk7XG4gICAgICAgICAgICB9IGVsc2UgaWYgKG9wdHMuY2hhaW5UeXBlID09PSAnb21uaScpIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gQlRDVmFsaWRhdG9yLmlzVmFsaWRBZGRyZXNzKGFkZHJlc3MsIGN1cnJlbmN5LCBvcHRzLm5ldHdvcmtUeXBlKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gY2hlY2tCb3RoVmFsaWRhdG9ycyhhZGRyZXNzLCBjdXJyZW5jeSwgb3B0cyk7XG4gICAgfVxufTtcbiJdLCJuYW1lcyI6W10sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/multicoin-address-validator/src/usdt_validator.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/multicoin-address-validator/src/wallet_address_validator.js":
/*!**********************************************************************************!*\
  !*** ./node_modules/multicoin-address-validator/src/wallet_address_validator.js ***!
  \**********************************************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

eval("var currencies = __webpack_require__(/*! ./currencies */ \"(ssr)/./node_modules/multicoin-address-validator/src/currencies.js\");\n\nvar DEFAULT_CURRENCY_NAME = 'bitcoin';\n\nmodule.exports = {\n    //validate: function (address, currencyNameOrSymbol, networkType) {\n    validate: function (address, currencyNameOrSymbol, opts) {\n        var currency = currencies.getByNameOrSymbol(currencyNameOrSymbol || DEFAULT_CURRENCY_NAME);\n\n        if (currency && currency.validator) {\n            if (opts && typeof opts === 'string') {\n                return currency.validator.isValidAddress(address, currency, { networkType: opts });\n            }\n            return currency.validator.isValidAddress(address, currency, opts);\n        }\n\n        throw new Error('Missing validator for currency: ' + currencyNameOrSymbol);\n    },\n    getCurrencies: function () {\n        return currencies.getAll();\n    },\n    findCurrency: function(symbol) {\n        return currencies.getByNameOrSymbol(symbol) || null ;\n    }\n};\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvbXVsdGljb2luLWFkZHJlc3MtdmFsaWRhdG9yL3NyYy93YWxsZXRfYWRkcmVzc192YWxpZGF0b3IuanMiLCJtYXBwaW5ncyI6IkFBQUEsaUJBQWlCLG1CQUFPLENBQUMsd0ZBQWM7O0FBRXZDOztBQUVBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQSw4RUFBOEUsbUJBQW1CO0FBQ2pHO0FBQ0E7QUFDQTs7QUFFQTtBQUNBLEtBQUs7QUFDTDtBQUNBO0FBQ0EsS0FBSztBQUNMO0FBQ0E7QUFDQTtBQUNBIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vZ2l0aHVic3RyZWFtaW5nLy4vbm9kZV9tb2R1bGVzL211bHRpY29pbi1hZGRyZXNzLXZhbGlkYXRvci9zcmMvd2FsbGV0X2FkZHJlc3NfdmFsaWRhdG9yLmpzP2ZkMmIiXSwic291cmNlc0NvbnRlbnQiOlsidmFyIGN1cnJlbmNpZXMgPSByZXF1aXJlKCcuL2N1cnJlbmNpZXMnKTtcblxudmFyIERFRkFVTFRfQ1VSUkVOQ1lfTkFNRSA9ICdiaXRjb2luJztcblxubW9kdWxlLmV4cG9ydHMgPSB7XG4gICAgLy92YWxpZGF0ZTogZnVuY3Rpb24gKGFkZHJlc3MsIGN1cnJlbmN5TmFtZU9yU3ltYm9sLCBuZXR3b3JrVHlwZSkge1xuICAgIHZhbGlkYXRlOiBmdW5jdGlvbiAoYWRkcmVzcywgY3VycmVuY3lOYW1lT3JTeW1ib2wsIG9wdHMpIHtcbiAgICAgICAgdmFyIGN1cnJlbmN5ID0gY3VycmVuY2llcy5nZXRCeU5hbWVPclN5bWJvbChjdXJyZW5jeU5hbWVPclN5bWJvbCB8fCBERUZBVUxUX0NVUlJFTkNZX05BTUUpO1xuXG4gICAgICAgIGlmIChjdXJyZW5jeSAmJiBjdXJyZW5jeS52YWxpZGF0b3IpIHtcbiAgICAgICAgICAgIGlmIChvcHRzICYmIHR5cGVvZiBvcHRzID09PSAnc3RyaW5nJykge1xuICAgICAgICAgICAgICAgIHJldHVybiBjdXJyZW5jeS52YWxpZGF0b3IuaXNWYWxpZEFkZHJlc3MoYWRkcmVzcywgY3VycmVuY3ksIHsgbmV0d29ya1R5cGU6IG9wdHMgfSk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICByZXR1cm4gY3VycmVuY3kudmFsaWRhdG9yLmlzVmFsaWRBZGRyZXNzKGFkZHJlc3MsIGN1cnJlbmN5LCBvcHRzKTtcbiAgICAgICAgfVxuXG4gICAgICAgIHRocm93IG5ldyBFcnJvcignTWlzc2luZyB2YWxpZGF0b3IgZm9yIGN1cnJlbmN5OiAnICsgY3VycmVuY3lOYW1lT3JTeW1ib2wpO1xuICAgIH0sXG4gICAgZ2V0Q3VycmVuY2llczogZnVuY3Rpb24gKCkge1xuICAgICAgICByZXR1cm4gY3VycmVuY2llcy5nZXRBbGwoKTtcbiAgICB9LFxuICAgIGZpbmRDdXJyZW5jeTogZnVuY3Rpb24oc3ltYm9sKSB7XG4gICAgICAgIHJldHVybiBjdXJyZW5jaWVzLmdldEJ5TmFtZU9yU3ltYm9sKHN5bWJvbCkgfHwgbnVsbCA7XG4gICAgfVxufTtcbiJdLCJuYW1lcyI6W10sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/multicoin-address-validator/src/wallet_address_validator.js\n");

/***/ })

};
;