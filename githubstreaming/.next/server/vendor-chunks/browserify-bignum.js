/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
exports.id = "vendor-chunks/browserify-bignum";
exports.ids = ["vendor-chunks/browserify-bignum"];
exports.modules = {

/***/ "(ssr)/./node_modules/browserify-bignum/bignumber.js":
/*!*****************************************************!*\
  !*** ./node_modules/browserify-bignum/bignumber.js ***!
  \*****************************************************/
/***/ ((module) => {

eval("/* bignumber.js v1.3.0 https://github.com/MikeMcl/bignumber.js/LICENCE */\n\n/*jslint bitwise: true, eqeq: true, plusplus: true, sub: true, white: true, maxerr: 500 */\n/*global module */\n\n/*\n  bignumber.js v1.3.0\n  A JavaScript library for arbitrary-precision arithmetic.\n  https://github.com/MikeMcl/bignumber.js\n  Copyright (c) 2012 Michael Mclaughlin <M8ch88l@gmail.com>\n  MIT Expat Licence\n*/\n\n/*********************************** DEFAULTS ************************************/\n\n/*\n * The default values below must be integers within the stated ranges (inclusive).\n * Most of these values can be changed during run-time using BigNumber.config().\n */\n\n/*\n * The limit on the value of DECIMAL_PLACES, TO_EXP_NEG, TO_EXP_POS, MIN_EXP,\n * MAX_EXP, and the argument to toFixed, toPrecision and toExponential, beyond\n * which an exception is thrown (if ERRORS is true).\n */\nvar MAX = 1E9,                                   // 0 to 1e+9\n\n    // Limit of magnitude of exponent argument to toPower.\n    MAX_POWER = 1E6,                             // 1 to 1e+6\n\n    // The maximum number of decimal places for operations involving division.\n    DECIMAL_PLACES = 20,                         // 0 to MAX\n\n    /*\n     * The rounding mode used when rounding to the above decimal places, and when\n     * using toFixed, toPrecision and toExponential, and round (default value).\n     * UP         0 Away from zero.\n     * DOWN       1 Towards zero.\n     * CEIL       2 Towards +Infinity.\n     * FLOOR      3 Towards -Infinity.\n     * HALF_UP    4 Towards nearest neighbour. If equidistant, up.\n     * HALF_DOWN  5 Towards nearest neighbour. If equidistant, down.\n     * HALF_EVEN  6 Towards nearest neighbour. If equidistant, towards even neighbour.\n     * HALF_CEIL  7 Towards nearest neighbour. If equidistant, towards +Infinity.\n     * HALF_FLOOR 8 Towards nearest neighbour. If equidistant, towards -Infinity.\n     */\n    ROUNDING_MODE = 4,                           // 0 to 8\n\n    // EXPONENTIAL_AT : [TO_EXP_NEG , TO_EXP_POS]\n\n    // The exponent value at and beneath which toString returns exponential notation.\n    // Number type: -7\n    TO_EXP_NEG = -7,                             // 0 to -MAX\n\n    // The exponent value at and above which toString returns exponential notation.\n    // Number type: 21\n    TO_EXP_POS = 21,                             // 0 to MAX\n\n    // RANGE : [MIN_EXP, MAX_EXP]\n\n    // The minimum exponent value, beneath which underflow to zero occurs.\n    // Number type: -324  (5e-324)\n    MIN_EXP = -MAX,                              // -1 to -MAX\n\n    // The maximum exponent value, above which overflow to Infinity occurs.\n    // Number type:  308  (1.7976931348623157e+308)\n    MAX_EXP = MAX,                               // 1 to MAX\n\n    // Whether BigNumber Errors are ever thrown.\n    // CHANGE parseInt to parseFloat if changing ERRORS to false.\n    ERRORS = true,                               // true or false\n    parse = parseInt,                            // parseInt or parseFloat\n\n/***********************************************************************************/\n\n    P = BigNumber.prototype,\n    DIGITS = '0123456789abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ$_',\n    outOfRange,\n    id = 0,\n    isValid = /^-?(\\d+(\\.\\d*)?|\\.\\d+)(e[+-]?\\d+)?$/i,\n    trim = String.prototype.trim || function () {return this.replace(/^\\s+|\\s+$/g, '')},\n    ONE = BigNumber(1);\n\n\n// CONSTRUCTOR\n\n\n/*\n * The exported function.\n * Create and return a new instance of a BigNumber object.\n *\n * n {number|string|BigNumber} A numeric value.\n * [b] {number} The base of n. Integer, 2 to 64 inclusive.\n */\nfunction BigNumber( n, b ) {\n    var e, i, isNum, digits, valid, orig,\n        x = this;\n\n    // Enable constructor usage without new.\n    if ( !(x instanceof BigNumber) ) {\n        return new BigNumber( n, b )\n    }\n\n    // Duplicate.\n    if ( n instanceof BigNumber ) {\n        id = 0;\n\n        // e is undefined.\n        if ( b !== e ) {\n            n += ''\n        } else {\n            x['s'] = n['s'];\n            x['e'] = n['e'];\n            x['c'] = ( n = n['c'] ) ? n.slice() : n;\n            return;\n        }\n    }\n\n    // If number, check if minus zero.\n    if ( typeof n != 'string' ) {\n        n = ( isNum = typeof n == 'number' ||\n            Object.prototype.toString.call(n) == '[object Number]' ) &&\n                n === 0 && 1 / n < 0 ? '-0' : n + '';\n    }\n\n    orig = n;\n\n    if ( b === e && isValid.test(n) ) {\n\n        // Determine sign.\n        x['s'] = n.charAt(0) == '-' ? ( n = n.slice(1), -1 ) : 1;\n\n    // Either n is not a valid BigNumber or a base has been specified.\n    } else {\n\n        // Enable exponential notation to be used with base 10 argument.\n        // Ensure return value is rounded to DECIMAL_PLACES as with other bases.\n        if ( b == 10 ) {\n\n            return setMode( n, DECIMAL_PLACES, ROUNDING_MODE );\n        }\n\n        n = trim.call(n).replace( /^\\+(?!-)/, '' );\n\n        x['s'] = n.charAt(0) == '-' ? ( n = n.replace( /^-(?!-)/, '' ), -1 ) : 1;\n\n        if ( b != null ) {\n\n            if ( ( b == (b | 0) || !ERRORS ) &&\n              !( outOfRange = !( b >= 2 && b < 65 ) ) ) {\n\n                digits = '[' + DIGITS.slice( 0, b = b | 0 ) + ']+';\n\n                // Before non-decimal number validity test and base conversion\n                // remove the `.` from e.g. '1.', and replace e.g. '.1' with '0.1'.\n                n = n.replace( /\\.$/, '' ).replace( /^\\./, '0.' );\n\n                // Any number in exponential form will fail due to the e+/-.\n                if ( valid = new RegExp(\n                  '^' + digits + '(?:\\\\.' + digits + ')?$', b < 37 ? 'i' : '' ).test(n) ) {\n\n                    if ( isNum ) {\n\n                        if ( n.replace( /^0\\.0*|\\./, '' ).length > 15 ) {\n\n                            // 'new BigNumber() number type has more than 15 significant digits: {n}'\n                            ifExceptionsThrow( orig, 0 );\n                        }\n\n                        // Prevent later check for length on converted number.\n                        isNum = !isNum;\n                    }\n                    n = convert( n, 10, b, x['s'] );\n\n                } else if ( n != 'Infinity' && n != 'NaN' ) {\n\n                    // 'new BigNumber() not a base {b} number: {n}'\n                    ifExceptionsThrow( orig, 1, b );\n                    n = 'NaN';\n                }\n            } else {\n\n                // 'new BigNumber() base not an integer: {b}'\n                // 'new BigNumber() base out of range: {b}'\n                ifExceptionsThrow( b, 2 );\n\n                // Ignore base.\n                valid = isValid.test(n);\n            }\n        } else {\n            valid = isValid.test(n);\n        }\n\n        if ( !valid ) {\n\n            // Infinity/NaN\n            x['c'] = x['e'] = null;\n\n            // NaN\n            if ( n != 'Infinity' ) {\n\n                // No exception on NaN.\n                if ( n != 'NaN' ) {\n\n                    // 'new BigNumber() not a number: {n}'\n                    ifExceptionsThrow( orig, 3 );\n                }\n                x['s'] = null;\n            }\n            id = 0;\n\n            return;\n        }\n    }\n\n    // Decimal point?\n    if ( ( e = n.indexOf('.') ) > -1 ) {\n        n = n.replace( '.', '' );\n    }\n\n    // Exponential form?\n    if ( ( i = n.search( /e/i ) ) > 0 ) {\n\n        // Determine exponent.\n        if ( e < 0 ) {\n            e = i;\n        }\n        e += +n.slice( i + 1 );\n        n = n.substring( 0, i );\n\n    } else if ( e < 0 ) {\n\n        // Integer.\n        e = n.length;\n    }\n\n    // Determine leading zeros.\n    for ( i = 0; n.charAt(i) == '0'; i++ ) {\n    }\n\n    b = n.length;\n\n    // Disallow numbers with over 15 significant digits if number type.\n    if ( isNum && b > 15 && n.slice(i).length > 15 ) {\n\n        // 'new BigNumber() number type has more than 15 significant digits: {n}'\n        ifExceptionsThrow( orig, 0 );\n    }\n    id = 0;\n\n    // Overflow?\n    if ( ( e -= i + 1 ) > MAX_EXP ) {\n\n        // Infinity.\n        x['c'] = x['e'] = null;\n\n    // Zero or underflow?\n    } else if ( i == b || e < MIN_EXP ) {\n\n        // Zero.\n        x['c'] = [ x['e'] = 0 ];\n    } else {\n\n        // Determine trailing zeros.\n        for ( ; n.charAt(--b) == '0'; ) {\n        }\n\n        x['e'] = e;\n        x['c'] = [];\n\n        // Convert string to array of digits (without leading and trailing zeros).\n        for ( e = 0; i <= b; x['c'][e++] = +n.charAt(i++) ) {\n        }\n    }\n}\n\n\n// CONSTRUCTOR PROPERTIES/METHODS\n\n\nBigNumber['ROUND_UP'] = 0;\nBigNumber['ROUND_DOWN'] = 1;\nBigNumber['ROUND_CEIL'] = 2;\nBigNumber['ROUND_FLOOR'] = 3;\nBigNumber['ROUND_HALF_UP'] = 4;\nBigNumber['ROUND_HALF_DOWN'] = 5;\nBigNumber['ROUND_HALF_EVEN'] = 6;\nBigNumber['ROUND_HALF_CEIL'] = 7;\nBigNumber['ROUND_HALF_FLOOR'] = 8;\n\n/*\n * Create an instance from a Buffer\n */\nBigNumber['fromBuffer'] = function (buf, opts) {\n\n    if (!opts) opts = {};\n\n    var endian = { 1 : 'big', '-1' : 'little' }[opts.endian]\n        || opts.endian || 'big'\n    ;\n\n    var size = opts.size === 'auto' ? Math.ceil(buf.length) : (opts.size || 1);\n\n    if (buf.length % size !== 0) {\n        throw new RangeError('Buffer length (' + buf.length + ')'\n            + ' must be a multiple of size (' + size + ')'\n        );\n    }\n\n    var hex = [];\n    for (var i = 0; i < buf.length; i += size) {\n        var chunk = [];\n        for (var j = 0; j < size; j++) {\n            chunk.push(buf[\n                i + (endian === 'big' ? j : (size - j - 1))\n            ]);\n        }\n\n        hex.push(chunk\n            .map(function (c) {\n                return (c < 16 ? '0' : '') + c.toString(16);\n            })\n            .join('')\n        );\n    }\n\n    return BigNumber(hex.join(''), 16);\n\n};\n\n/*\n * Configure infrequently-changing library-wide settings.\n *\n * Accept an object or an argument list, with one or many of the following\n * properties or parameters respectively:\n * [ DECIMAL_PLACES [, ROUNDING_MODE [, EXPONENTIAL_AT [, RANGE [, ERRORS ]]]]]\n *\n * E.g.\n * BigNumber.config(20, 4) is equivalent to\n * BigNumber.config({ DECIMAL_PLACES : 20, ROUNDING_MODE : 4 })\n * Ignore properties/parameters set to null or undefined.\n *\n * Return an object with the properties current values.\n */\nBigNumber['config'] = function () {\n    var v, p,\n        i = 0,\n        r = {},\n        a = arguments,\n        o = a[0],\n        c = 'config',\n        inRange = function ( n, lo, hi ) {\n          return !( ( outOfRange = n < lo || n > hi ) ||\n            parse(n) != n && n !== 0 );\n        },\n        has = o && typeof o == 'object'\n          ? function () {if ( o.hasOwnProperty(p) ) return ( v = o[p] ) != null}\n          : function () {if ( a.length > i ) return ( v = a[i++] ) != null};\n\n    // [DECIMAL_PLACES] {number} Integer, 0 to MAX inclusive.\n    if ( has( p = 'DECIMAL_PLACES' ) ) {\n\n        if ( inRange( v, 0, MAX ) ) {\n            DECIMAL_PLACES = v | 0;\n        } else {\n\n            // 'config() DECIMAL_PLACES not an integer: {v}'\n            // 'config() DECIMAL_PLACES out of range: {v}'\n            ifExceptionsThrow( v, p, c );\n        }\n    }\n    r[p] = DECIMAL_PLACES;\n\n    // [ROUNDING_MODE] {number} Integer, 0 to 8 inclusive.\n    if ( has( p = 'ROUNDING_MODE' ) ) {\n\n        if ( inRange( v, 0, 8 ) ) {\n            ROUNDING_MODE = v | 0;\n        } else {\n\n            // 'config() ROUNDING_MODE not an integer: {v}'\n            // 'config() ROUNDING_MODE out of range: {v}'\n            ifExceptionsThrow( v, p, c );\n        }\n    }\n    r[p] = ROUNDING_MODE;\n\n    /*\n     * [EXPONENTIAL_AT] {number|number[]} Integer, -MAX to MAX inclusive or\n     * [ integer -MAX to 0 inclusive, 0 to MAX inclusive ].\n     */\n    if ( has( p = 'EXPONENTIAL_AT' ) ) {\n\n        if ( inRange( v, -MAX, MAX ) ) {\n            TO_EXP_NEG = -( TO_EXP_POS = ~~( v < 0 ? -v : +v ) );\n        } else if ( !outOfRange && v && inRange( v[0], -MAX, 0 ) &&\n          inRange( v[1], 0, MAX ) ) {\n            TO_EXP_NEG = ~~v[0];\n            TO_EXP_POS = ~~v[1];\n        } else {\n\n            // 'config() EXPONENTIAL_AT not an integer or not [integer, integer]: {v}'\n            // 'config() EXPONENTIAL_AT out of range or not [negative, positive: {v}'\n            ifExceptionsThrow( v, p, c, 1 );\n        }\n    }\n    r[p] = [ TO_EXP_NEG, TO_EXP_POS ];\n\n    /*\n     * [RANGE][ {number|number[]} Non-zero integer, -MAX to MAX inclusive or\n     * [ integer -MAX to -1 inclusive, integer 1 to MAX inclusive ].\n     */\n    if ( has( p = 'RANGE' ) ) {\n\n        if ( inRange( v, -MAX, MAX ) && ~~v ) {\n            MIN_EXP = -( MAX_EXP = ~~( v < 0 ? -v : +v ) );\n        } else if ( !outOfRange && v && inRange( v[0], -MAX, -1 ) &&\n          inRange( v[1], 1, MAX ) ) {\n            MIN_EXP = ~~v[0], MAX_EXP = ~~v[1];\n        } else {\n\n            // 'config() RANGE not a non-zero integer or not [integer, integer]: {v}'\n            // 'config() RANGE out of range or not [negative, positive: {v}'\n            ifExceptionsThrow( v, p, c, 1, 1 );\n        }\n    }\n    r[p] = [ MIN_EXP, MAX_EXP ];\n\n    // [ERRORS] {boolean|number} true, false, 1 or 0.\n    if ( has( p = 'ERRORS' ) ) {\n\n        if ( v === !!v || v === 1 || v === 0 ) {\n            parse = ( outOfRange = id = 0, ERRORS = !!v )\n              ? parseInt\n              : parseFloat;\n        } else {\n\n            // 'config() ERRORS not a boolean or binary digit: {v}'\n            ifExceptionsThrow( v, p, c, 0, 0, 1 );\n        }\n    }\n    r[p] = ERRORS;\n\n    return r;\n};\n\n\n// PRIVATE FUNCTIONS\n\n\n// Assemble error messages. Throw BigNumber Errors.\nfunction ifExceptionsThrow( arg, i, j, isArray, isRange, isErrors) {\n\n    if ( ERRORS ) {\n        var error,\n            method = ['new BigNumber', 'cmp', 'div', 'eq', 'gt', 'gte', 'lt',\n                 'lte', 'minus', 'mod', 'plus', 'times', 'toFr'\n                ][ id ? id < 0 ? -id : id : 1 / id < 0 ? 1 : 0 ] + '()',\n            message = outOfRange ? ' out of range' : ' not a' +\n              ( isRange ? ' non-zero' : 'n' ) + ' integer';\n\n        message = ( [\n            method + ' number type has more than 15 significant digits',\n            method + ' not a base ' + j + ' number',\n            method + ' base' + message,\n            method + ' not a number' ][i] ||\n              j + '() ' + i + ( isErrors\n                ? ' not a boolean or binary digit'\n                : message + ( isArray\n                  ? ' or not [' + ( outOfRange\n                    ? ' negative, positive'\n                    : ' integer, integer' ) + ' ]'\n                  : '' ) ) ) + ': ' + arg;\n\n        outOfRange = id = 0;\n        error = new Error(message);\n        error['name'] = 'BigNumber Error';\n\n        throw error;\n    }\n}\n\n\n/*\n * Convert a numeric string of baseIn to a numeric string of baseOut.\n */\nfunction convert( nStr, baseOut, baseIn, sign ) {\n    var e, dvs, dvd, nArr, fracArr, fracBN;\n\n    // Convert string of base bIn to an array of numbers of baseOut.\n    // Eg. strToArr('255', 10) where baseOut is 16, returns [15, 15].\n    // Eg. strToArr('ff', 16)  where baseOut is 10, returns [2, 5, 5].\n    function strToArr( str, bIn ) {\n        var j,\n            i = 0,\n            strL = str.length,\n            arrL,\n            arr = [0];\n\n        for ( bIn = bIn || baseIn; i < strL; i++ ) {\n\n            for ( arrL = arr.length, j = 0; j < arrL; arr[j] *= bIn, j++ ) {\n            }\n\n            for ( arr[0] += DIGITS.indexOf( str.charAt(i) ), j = 0;\n                  j < arr.length;\n                  j++ ) {\n\n                if ( arr[j] > baseOut - 1 ) {\n\n                    if ( arr[j + 1] == null ) {\n                        arr[j + 1] = 0;\n                    }\n                    arr[j + 1] += arr[j] / baseOut ^ 0;\n                    arr[j] %= baseOut;\n                }\n            }\n        }\n\n        return arr.reverse();\n    }\n\n    // Convert array to string.\n    // E.g. arrToStr( [9, 10, 11] ) becomes '9ab' (in bases above 11).\n    function arrToStr( arr ) {\n        var i = 0,\n            arrL = arr.length,\n            str = '';\n\n        for ( ; i < arrL; str += DIGITS.charAt( arr[i++] ) ) {\n        }\n\n        return str;\n    }\n\n    if ( baseIn < 37 ) {\n        nStr = nStr.toLowerCase();\n    }\n\n    /*\n     * If non-integer convert integer part and fraction part separately.\n     * Convert the fraction part as if it is an integer than use division to\n     * reduce it down again to a value less than one.\n     */\n    if ( ( e = nStr.indexOf( '.' ) ) > -1 ) {\n\n        /*\n         * Calculate the power to which to raise the base to get the number\n         * to divide the fraction part by after it has been converted as an\n         * integer to the required base.\n         */\n        e = nStr.length - e - 1;\n\n        // Use toFixed to avoid possible exponential notation.\n        dvs = strToArr( new BigNumber(baseIn)['pow'](e)['toF'](), 10 );\n\n        nArr = nStr.split('.');\n\n        // Convert the base of the fraction part (as integer).\n        dvd = strToArr( nArr[1] );\n\n        // Convert the base of the integer part.\n        nArr = strToArr( nArr[0] );\n\n        // Result will be a BigNumber with a value less than 1.\n        fracBN = divide( dvd, dvs, dvd.length - dvs.length, sign, baseOut,\n          // Is least significant digit of integer part an odd number?\n          nArr[nArr.length - 1] & 1 );\n\n        fracArr = fracBN['c'];\n\n        // e can be <= 0  ( if e == 0, fracArr is [0] or [1] ).\n        if ( e = fracBN['e'] ) {\n\n            // Append zeros according to the exponent of the result.\n            for ( ; ++e; fracArr.unshift(0) ) {\n            }\n\n            // Append the fraction part to the converted integer part.\n            nStr = arrToStr(nArr) + '.' + arrToStr(fracArr);\n\n        // fracArr is [1].\n        // Fraction digits rounded up, so increment last digit of integer part.\n        } else if ( fracArr[0] ) {\n\n            if ( nArr[ e = nArr.length - 1 ] < baseOut - 1 ) {\n                ++nArr[e];\n                nStr = arrToStr(nArr);\n            } else {\n                nStr = new BigNumber( arrToStr(nArr),\n                  baseOut )['plus'](ONE)['toS'](baseOut);\n            }\n\n        // fracArr is [0]. No fraction digits.\n        } else {\n            nStr = arrToStr(nArr);\n        }\n    } else {\n\n        // Simple integer. Convert base.\n        nStr = arrToStr( strToArr(nStr) );\n    }\n\n    return nStr;\n}\n\n\n// Perform division in the specified base. Called by div and convert.\nfunction divide( dvd, dvs, exp, s, base, isOdd ) {\n    var dvsL, dvsT, next, cmp, remI,\n        dvsZ = dvs.slice(),\n        dvdI = dvsL = dvs.length,\n        dvdL = dvd.length,\n        rem = dvd.slice( 0, dvsL ),\n        remL = rem.length,\n        quo = new BigNumber(ONE),\n        qc = quo['c'] = [],\n        qi = 0,\n        dig = DECIMAL_PLACES + ( quo['e'] = exp ) + 1;\n\n    quo['s'] = s;\n    s = dig < 0 ? 0 : dig;\n\n    // Add zeros to make remainder as long as divisor.\n    for ( ; remL++ < dvsL; rem.push(0) ) {\n    }\n\n    // Create version of divisor with leading zero.\n    dvsZ.unshift(0);\n\n    do {\n\n        // 'next' is how many times the divisor goes into the current remainder.\n        for ( next = 0; next < base; next++ ) {\n\n            // Compare divisor and remainder.\n            if ( dvsL != ( remL = rem.length ) ) {\n                cmp = dvsL > remL ? 1 : -1;\n            } else {\n                for ( remI = -1, cmp = 0; ++remI < dvsL; ) {\n\n                    if ( dvs[remI] != rem[remI] ) {\n                        cmp = dvs[remI] > rem[remI] ? 1 : -1;\n                        break;\n                    }\n                }\n            }\n\n            // Subtract divisor from remainder (if divisor < remainder).\n            if ( cmp < 0 ) {\n\n                // Remainder cannot be more than one digit longer than divisor.\n                // Equalise lengths using divisor with extra leading zero?\n                for ( dvsT = remL == dvsL ? dvs : dvsZ; remL; ) {\n\n                    if ( rem[--remL] < dvsT[remL] ) {\n\n                        for ( remI = remL;\n                          remI && !rem[--remI];\n                            rem[remI] = base - 1 ) {\n                        }\n                        --rem[remI];\n                        rem[remL] += base;\n                    }\n                    rem[remL] -= dvsT[remL];\n                }\n                for ( ; !rem[0]; rem.shift() ) {\n                }\n            } else {\n                break;\n            }\n        }\n\n        // Add the 'next' digit to the result array.\n        qc[qi++] = cmp ? next : ++next;\n\n        // Update the remainder.\n        rem[0] && cmp\n          ? ( rem[remL] = dvd[dvdI] || 0 )\n          : ( rem = [ dvd[dvdI] ] );\n\n    } while ( ( dvdI++ < dvdL || rem[0] != null ) && s-- );\n\n    // Leading zero? Do not remove if result is simply zero (qi == 1).\n    if ( !qc[0] && qi != 1 ) {\n\n        // There can't be more than one zero.\n        --quo['e'];\n        qc.shift();\n    }\n\n    // Round?\n    if ( qi > dig ) {\n        rnd( quo, DECIMAL_PLACES, base, isOdd, rem[0] != null );\n    }\n\n    // Overflow?\n    if ( quo['e'] > MAX_EXP ) {\n\n        // Infinity.\n        quo['c'] = quo['e'] = null;\n\n    // Underflow?\n    } else if ( quo['e'] < MIN_EXP ) {\n\n        // Zero.\n        quo['c'] = [quo['e'] = 0];\n    }\n\n    return quo;\n}\n\n\n/*\n * Return a string representing the value of BigNumber n in normal or\n * exponential notation rounded to the specified decimal places or\n * significant digits.\n * Called by toString, toExponential (exp 1), toFixed, and toPrecision (exp 2).\n * d is the index (with the value in normal notation) of the digit that may be\n * rounded up.\n */\nfunction format( n, d, exp ) {\n\n    // Initially, i is the number of decimal places required.\n    var i = d - (n = new BigNumber(n))['e'],\n        c = n['c'];\n\n    // +-Infinity or NaN?\n    if ( !c ) {\n        return n['toS']();\n    }\n\n    // Round?\n    if ( c.length > ++d ) {\n        rnd( n, i, 10 );\n    }\n\n    // Recalculate d if toFixed as n['e'] may have changed if value rounded up.\n    i = c[0] == 0 ? i + 1 : exp ? d : n['e'] + i + 1;\n\n    // Append zeros?\n    for ( ; c.length < i; c.push(0) ) {\n    }\n    i = n['e'];\n\n    /*\n     * toPrecision returns exponential notation if the number of significant\n     * digits specified is less than the number of digits necessary to\n     * represent the integer part of the value in normal notation.\n     */\n    return exp == 1 || exp == 2 && ( --d < i || i <= TO_EXP_NEG )\n\n      // Exponential notation.\n      ? ( n['s'] < 0 && c[0] ? '-' : '' ) + ( c.length > 1\n        ? ( c.splice( 1, 0, '.' ), c.join('') )\n        : c[0] ) + ( i < 0 ? 'e' : 'e+' ) + i\n\n      // Normal notation.\n      : n['toS']();\n}\n\n\n// Round if necessary.\n// Called by divide, format, setMode and sqrt.\nfunction rnd( x, dp, base, isOdd, r ) {\n    var xc = x['c'],\n        isNeg = x['s'] < 0,\n        half = base / 2,\n        i = x['e'] + dp + 1,\n\n        // 'next' is the digit after the digit that may be rounded up.\n        next = xc[i],\n\n        /*\n         * 'more' is whether there are digits after 'next'.\n         * E.g.\n         * 0.005 (e = -3) to be rounded to 0 decimal places (dp = 0) gives i = -2\n         * The 'next' digit is zero, and there ARE 'more' digits after it.\n         * 0.5 (e = -1) dp = 0 gives i = 0\n         * The 'next' digit is 5 and there are no 'more' digits after it.\n         */\n        more = r || i < 0 || xc[i + 1] != null;\n\n    r = ROUNDING_MODE < 4\n      ? ( next != null || more ) &&\n        ( ROUNDING_MODE == 0 ||\n           ROUNDING_MODE == 2 && !isNeg ||\n             ROUNDING_MODE == 3 && isNeg )\n      : next > half || next == half &&\n        ( ROUNDING_MODE == 4 || more ||\n\n          /*\n           * isOdd is used in base conversion and refers to the least significant\n           * digit of the integer part of the value to be converted. The fraction\n           * part is rounded by this method separately from the integer part.\n           */\n          ROUNDING_MODE == 6 && ( xc[i - 1] & 1 || !dp && isOdd ) ||\n            ROUNDING_MODE == 7 && !isNeg ||\n              ROUNDING_MODE == 8 && isNeg );\n\n    if ( i < 1 || !xc[0] ) {\n        xc.length = 0;\n        xc.push(0);\n\n        if ( r ) {\n\n            // 1, 0.1, 0.01, 0.001, 0.0001 etc.\n            xc[0] = 1;\n            x['e'] = -dp;\n        } else {\n\n            // Zero.\n            x['e'] = 0;\n        }\n\n        return x;\n    }\n\n    // Remove any digits after the required decimal places.\n    xc.length = i--;\n\n    // Round up?\n    if ( r ) {\n\n        // Rounding up may mean the previous digit has to be rounded up and so on.\n        for ( --base; ++xc[i] > base; ) {\n            xc[i] = 0;\n\n            if ( !i-- ) {\n                ++x['e'];\n                xc.unshift(1);\n            }\n        }\n    }\n\n    // Remove trailing zeros.\n    for ( i = xc.length; !xc[--i]; xc.pop() ) {\n    }\n\n    return x;\n}\n\n\n// Round after setting the appropriate rounding mode.\n// Handles ceil, floor and round.\nfunction setMode( x, dp, rm ) {\n    var r = ROUNDING_MODE;\n\n    ROUNDING_MODE = rm;\n    x = new BigNumber(x);\n    x['c'] && rnd( x, dp, 10 );\n    ROUNDING_MODE = r;\n\n    return x;\n}\n\n\n// PROTOTYPE/INSTANCE METHODS\n\n\n/*\n * Return a new BigNumber whose value is the absolute value of this BigNumber.\n */\nP['abs'] = P['absoluteValue'] = function () {\n    var x = new BigNumber(this);\n\n    if ( x['s'] < 0 ) {\n        x['s'] = 1;\n    }\n\n    return x;\n};\n\n/*\n * Return the bit length of the number.\n */\nP['bitLength'] = function () {\n    return this.toString(2).length;\n};\n\n\n/*\n * Return a new BigNumber whose value is the value of this BigNumber\n * rounded to a whole number in the direction of Infinity.\n */\nP['ceil'] = function () {\n    return setMode( this, 0, 2 );\n};\n\n\n/*\n * Return\n * 1 if the value of this BigNumber is greater than the value of BigNumber(y, b),\n * -1 if the value of this BigNumber is less than the value of BigNumber(y, b),\n * 0 if they have the same value,\n * or null if the value of either is NaN.\n */\nP['comparedTo'] = P['cmp'] = function ( y, b ) {\n    var a,\n        x = this,\n        xc = x['c'],\n        yc = ( id = -id, y = new BigNumber( y, b ) )['c'],\n        i = x['s'],\n        j = y['s'],\n        k = x['e'],\n        l = y['e'];\n\n    // Either NaN?\n    if ( !i || !j ) {\n        return null;\n    }\n\n    a = xc && !xc[0], b = yc && !yc[0];\n\n    // Either zero?\n    if ( a || b ) {\n        return a ? b ? 0 : -j : i;\n    }\n\n    // Signs differ?\n    if ( i != j ) {\n        return i;\n    }\n\n    // Either Infinity?\n    if ( a = i < 0, b = k == l, !xc || !yc ) {\n        return b ? 0 : !xc ^ a ? 1 : -1;\n    }\n\n    // Compare exponents.\n    if ( !b ) {\n        return k > l ^ a ? 1 : -1;\n    }\n\n    // Compare digit by digit.\n    for ( i = -1,\n          j = ( k = xc.length ) < ( l = yc.length ) ? k : l;\n          ++i < j; ) {\n\n        if ( xc[i] != yc[i] ) {\n            return xc[i] > yc[i] ^ a ? 1 : -1;\n        }\n    }\n    // Compare lengths.\n    return k == l ? 0 : k > l ^ a ? 1 : -1;\n};\n\n\n/*\n *  n / 0 = I\n *  n / N = N\n *  n / I = 0\n *  0 / n = 0\n *  0 / 0 = N\n *  0 / N = N\n *  0 / I = 0\n *  N / n = N\n *  N / 0 = N\n *  N / N = N\n *  N / I = N\n *  I / n = I\n *  I / 0 = I\n *  I / N = N\n *  I / I = N\n *\n * Return a new BigNumber whose value is the value of this BigNumber\n * divided by the value of BigNumber(y, b), rounded according to\n * DECIMAL_PLACES and ROUNDING_MODE.\n */\nP['dividedBy'] = P['div'] = function ( y, b ) {\n    var xc = this['c'],\n        xe = this['e'],\n        xs = this['s'],\n        yc = ( id = 2, y = new BigNumber( y, b ) )['c'],\n        ye = y['e'],\n        ys = y['s'],\n        s = xs == ys ? 1 : -1;\n\n    // Either NaN/Infinity/0?\n    return !xe && ( !xc || !xc[0] ) || !ye && ( !yc || !yc[0] )\n\n      // Either NaN?\n      ? new BigNumber( !xs || !ys ||\n\n        // Both 0 or both Infinity?\n        ( xc ? yc && xc[0] == yc[0] : !yc )\n\n          // Return NaN.\n          ? NaN\n\n          // x is 0 or y is Infinity?\n          : xc && xc[0] == 0 || !yc\n\n            // Return +-0.\n            ? s * 0\n\n            // y is 0. Return +-Infinity.\n            : s / 0 )\n\n      : divide( xc, yc, xe - ye, s, 10 );\n};\n\n\n/*\n * Return true if the value of this BigNumber is equal to the value of\n * BigNumber(n, b), otherwise returns false.\n */\nP['equals'] = P['eq'] = function ( n, b ) {\n    id = 3;\n    return this['cmp']( n, b ) === 0;\n};\n\n\n/*\n * Return a new BigNumber whose value is the value of this BigNumber\n * rounded to a whole number in the direction of -Infinity.\n */\nP['floor'] = function () {\n    return setMode( this, 0, 3 );\n};\n\n\n/*\n * Return true if the value of this BigNumber is greater than the value of\n * BigNumber(n, b), otherwise returns false.\n */\nP['greaterThan'] = P['gt'] = function ( n, b ) {\n    id = 4;\n    return this['cmp']( n, b ) > 0;\n};\n\n\n/*\n * Return true if the value of this BigNumber is greater than or equal to\n * the value of BigNumber(n, b), otherwise returns false.\n */\nP['greaterThanOrEqualTo'] = P['gte'] = P['gt'] = function ( n, b ) {\n    id = 5;\n    return ( b = this['cmp']( n, b ) ) == 1 || b === 0;\n};\n\n\n/*\n * Return true if the value of this BigNumber is a finite number, otherwise\n * returns false.\n */\nP['isFinite'] = P['isF'] = function () {\n    return !!this['c'];\n};\n\n\n/*\n * Return true if the value of this BigNumber is NaN, otherwise returns\n * false.\n */\nP['isNaN'] = function () {\n    return !this['s'];\n};\n\n\n/*\n * Return true if the value of this BigNumber is negative, otherwise\n * returns false.\n */\nP['isNegative'] = P['isNeg'] = function () {\n    return this['s'] < 0;\n};\n\n\n/*\n * Return true if the value of this BigNumber is 0 or -0, otherwise returns\n * false.\n */\nP['isZero'] = P['isZ'] = function () {\n    return !!this['c'] && this['c'][0] == 0;\n};\n\n\n/*\n * Return true if the value of this BigNumber is less than the value of\n * BigNumber(n, b), otherwise returns false.\n */\nP['lessThan'] = P['lt'] = function ( n, b ) {\n    id = 6;\n    return this['cmp']( n, b ) < 0;\n};\n\n\n/*\n * Return true if the value of this BigNumber is less than or equal to the\n * value of BigNumber(n, b), otherwise returns false.\n */\nP['lessThanOrEqualTo'] = P['lte'] = P['le'] = function ( n, b ) {\n    id = 7;\n    return ( b = this['cmp']( n, b ) ) == -1 || b === 0;\n};\n\n\n/*\n *  n - 0 = n\n *  n - N = N\n *  n - I = -I\n *  0 - n = -n\n *  0 - 0 = 0\n *  0 - N = N\n *  0 - I = -I\n *  N - n = N\n *  N - 0 = N\n *  N - N = N\n *  N - I = N\n *  I - n = I\n *  I - 0 = I\n *  I - N = N\n *  I - I = N\n *\n * Return a new BigNumber whose value is the value of this BigNumber minus\n * the value of BigNumber(y, b).\n */\nP['minus'] = P['sub'] = function ( y, b ) {\n    var d, i, j, xLTy,\n        x = this,\n        a = x['s'];\n\n    b = ( id = 8, y = new BigNumber( y, b ) )['s'];\n\n    // Either NaN?\n    if ( !a || !b ) {\n        return new BigNumber(NaN);\n    }\n\n    // Signs differ?\n    if ( a != b ) {\n        return y['s'] = -b, x['plus'](y);\n    }\n\n    var xc = x['c'],\n        xe = x['e'],\n        yc = y['c'],\n        ye = y['e'];\n\n    if ( !xe || !ye ) {\n\n        // Either Infinity?\n        if ( !xc || !yc ) {\n            return xc ? ( y['s'] = -b, y ) : new BigNumber( yc ? x : NaN );\n        }\n\n        // Either zero?\n        if ( !xc[0] || !yc[0] ) {\n\n            // y is non-zero?\n            return yc[0]\n              ? ( y['s'] = -b, y )\n\n              // x is non-zero?\n              : new BigNumber( xc[0]\n                ? x\n\n                // Both are zero.\n                // IEEE 754 (2008) 6.3: n - n = -0 when rounding to -Infinity\n                : ROUNDING_MODE == 3 ? -0 : 0 );\n        }\n    }\n\n    // Determine which is the bigger number.\n    // Prepend zeros to equalise exponents.\n    if ( xc = xc.slice(), a = xe - ye ) {\n        d = ( xLTy = a < 0 ) ? ( a = -a, xc ) : ( ye = xe, yc );\n\n        for ( d.reverse(), b = a; b--; d.push(0) ) {\n        }\n        d.reverse();\n    } else {\n\n        // Exponents equal. Check digit by digit.\n        j = ( ( xLTy = xc.length < yc.length ) ? xc : yc ).length;\n\n        for ( a = b = 0; b < j; b++ ) {\n\n            if ( xc[b] != yc[b] ) {\n                xLTy = xc[b] < yc[b];\n                break;\n            }\n        }\n    }\n\n    // x < y? Point xc to the array of the bigger number.\n    if ( xLTy ) {\n        d = xc, xc = yc, yc = d;\n        y['s'] = -y['s'];\n    }\n\n    /*\n     * Append zeros to xc if shorter. No need to add zeros to yc if shorter\n     * as subtraction only needs to start at yc.length.\n     */\n    if ( ( b = -( ( j = xc.length ) - yc.length ) ) > 0 ) {\n\n        for ( ; b--; xc[j++] = 0 ) {\n        }\n    }\n\n    // Subtract yc from xc.\n    for ( b = yc.length; b > a; ){\n\n        if ( xc[--b] < yc[b] ) {\n\n            for ( i = b; i && !xc[--i]; xc[i] = 9 ) {\n            }\n            --xc[i];\n            xc[b] += 10;\n        }\n        xc[b] -= yc[b];\n    }\n\n    // Remove trailing zeros.\n    for ( ; xc[--j] == 0; xc.pop() ) {\n    }\n\n    // Remove leading zeros and adjust exponent accordingly.\n    for ( ; xc[0] == 0; xc.shift(), --ye ) {\n    }\n\n    /*\n     * No need to check for Infinity as +x - +y != Infinity && -x - -y != Infinity\n     * when neither x or y are Infinity.\n     */\n\n    // Underflow?\n    if ( ye < MIN_EXP || !xc[0] ) {\n\n        /*\n         * Following IEEE 754 (2008) 6.3,\n         * n - n = +0  but  n - n = -0 when rounding towards -Infinity.\n         */\n        if ( !xc[0] ) {\n            y['s'] = ROUNDING_MODE == 3 ? -1 : 1;\n        }\n\n        // Result is zero.\n        xc = [ye = 0];\n    }\n\n    return y['c'] = xc, y['e'] = ye, y;\n};\n\n\n/*\n *   n % 0 =  N\n *   n % N =  N\n *   0 % n =  0\n *  -0 % n = -0\n *   0 % 0 =  N\n *   0 % N =  N\n *   N % n =  N\n *   N % 0 =  N\n *   N % N =  N\n *\n * Return a new BigNumber whose value is the value of this BigNumber modulo\n * the value of BigNumber(y, b).\n */\nP['modulo'] = P['mod'] = function ( y, b ) {\n    var x = this,\n        xc = x['c'],\n        yc = ( id = 9, y = new BigNumber( y, b ) )['c'],\n        i = x['s'],\n        j = y['s'];\n\n    // Is x or y NaN, or y zero?\n    b = !i || !j || yc && !yc[0];\n\n    if ( b || xc && !xc[0] ) {\n        return new BigNumber( b ? NaN : x );\n    }\n\n    x['s'] = y['s'] = 1;\n    b = y['cmp'](x) == 1;\n    x['s'] = i, y['s'] = j;\n\n    return b\n      ? new BigNumber(x)\n      : ( i = DECIMAL_PLACES, j = ROUNDING_MODE,\n        DECIMAL_PLACES = 0, ROUNDING_MODE = 1,\n          x = x['div'](y),\n            DECIMAL_PLACES = i, ROUNDING_MODE = j,\n              this['minus']( x['times'](y) ) );\n};\n\n\n/*\n * Return a new BigNumber whose value is the value of this BigNumber\n * negated, i.e. multiplied by -1.\n */\nP['negated'] = P['neg'] = function () {\n    var x = new BigNumber(this);\n\n    return x['s'] = -x['s'] || null, x;\n};\n\n\n/*\n *  n + 0 = n\n *  n + N = N\n *  n + I = I\n *  0 + n = n\n *  0 + 0 = 0\n *  0 + N = N\n *  0 + I = I\n *  N + n = N\n *  N + 0 = N\n *  N + N = N\n *  N + I = N\n *  I + n = I\n *  I + 0 = I\n *  I + N = N\n *  I + I = I\n *\n * Return a new BigNumber whose value is the value of this BigNumber plus\n * the value of BigNumber(y, b).\n */\nP['plus'] = P['add'] = function ( y, b ) {\n    var d,\n        x = this,\n        a = x['s'];\n\n    b = ( id = 10, y = new BigNumber( y, b ) )['s'];\n\n    // Either NaN?\n    if ( !a || !b ) {\n        return new BigNumber(NaN);\n    }\n\n    // Signs differ?\n    if ( a != b ) {\n        return y['s'] = -b, x['minus'](y);\n    }\n\n    var xe = x['e'],\n        xc = x['c'],\n        ye = y['e'],\n        yc = y['c'];\n\n    if ( !xe || !ye ) {\n\n        // Either Infinity?\n        if ( !xc || !yc ) {\n\n            // Return +-Infinity.\n            return new BigNumber( a / 0 );\n        }\n\n        // Either zero?\n        if ( !xc[0] || !yc[0] ) {\n\n            // y is non-zero?\n            return yc[0]\n              ? y\n\n              // x is non-zero?\n              : new BigNumber( xc[0]\n                ? x\n\n                // Both are zero. Return zero.\n                : a * 0 );\n        }\n    }\n\n    // Prepend zeros to equalise exponents.\n    // Note: Faster to use reverse then do unshifts.\n    if ( xc = xc.slice(), a = xe - ye ) {\n        d = a > 0 ? ( ye = xe, yc ) : ( a = -a, xc );\n\n        for ( d.reverse(); a--; d.push(0) ) {\n        }\n        d.reverse();\n    }\n\n    // Point xc to the longer array.\n    if ( xc.length - yc.length < 0 ) {\n        d = yc, yc = xc, xc = d;\n    }\n\n    /*\n     * Only start adding at yc.length - 1 as the\n     * further digits of xc can be left as they are.\n     */\n    for ( a = yc.length, b = 0; a;\n         b = ( xc[--a] = xc[a] + yc[a] + b ) / 10 ^ 0, xc[a] %= 10 ) {\n    }\n\n    // No need to check for zero, as +x + +y != 0 && -x + -y != 0\n\n    if ( b ) {\n        xc.unshift(b);\n\n        // Overflow? (MAX_EXP + 1 possible)\n        if ( ++ye > MAX_EXP ) {\n\n            // Infinity.\n            xc = ye = null;\n        }\n    }\n\n     // Remove trailing zeros.\n    for ( a = xc.length; xc[--a] == 0; xc.pop() ) {\n    }\n\n    return y['c'] = xc, y['e'] = ye, y;\n};\n\n\n/*\n * Return a BigNumber whose value is the value of this BigNumber raised to\n * the power e. If e is negative round according to DECIMAL_PLACES and\n * ROUNDING_MODE.\n *\n * e {number} Integer, -MAX_POWER to MAX_POWER inclusive.\n */\nP['toPower'] = P['pow'] = function ( e ) {\n\n    // e to integer, avoiding NaN or Infinity becoming 0.\n    var i = e * 0 == 0 ? e | 0 : e,\n        x = new BigNumber(this),\n        y = new BigNumber(ONE);\n\n    // Use Math.pow?\n    // Pass +-Infinity for out of range exponents.\n    if ( ( ( ( outOfRange = e < -MAX_POWER || e > MAX_POWER ) &&\n      (i = e * 1 / 0) ) ||\n\n         /*\n          * Any exponent that fails the parse becomes NaN.\n          *\n          * Include 'e !== 0' because on Opera -0 == parseFloat(-0) is false,\n          * despite -0 === parseFloat(-0) && -0 == parseFloat('-0') is true.\n          */\n         parse(e) != e && e !== 0 && !(i = NaN) ) &&\n\n          // 'pow() exponent not an integer: {e}'\n          // 'pow() exponent out of range: {e}'\n          !ifExceptionsThrow( e, 'exponent', 'pow' ) ||\n\n            // Pass zero to Math.pow, as any value to the power zero is 1.\n            !i ) {\n\n        // i is +-Infinity, NaN or 0.\n        return new BigNumber( Math.pow( x['toS'](), i ) );\n    }\n\n    for ( i = i < 0 ? -i : i; ; ) {\n\n        if ( i & 1 ) {\n            y = y['times'](x);\n        }\n        i >>= 1;\n\n        if ( !i ) {\n            break;\n        }\n        x = x['times'](x);\n    }\n\n    return e < 0 ? ONE['div'](y) : y;\n};\n\n\n/*\n * Return a BigNumber whose value is the value of this BigNumber raised to\n * the power m modulo n.\n *\n * m {BigNumber} the value to take the power of\n * n {BigNumber} the value to modulo by\n */\nP['powm'] = function ( m, n ) {\n    return this.pow(m).mod(n);\n};\n\n\n/*\n * Return a new BigNumber whose value is the value of this BigNumber\n * rounded to a maximum of dp decimal places using rounding mode rm, or to\n * 0 and ROUNDING_MODE respectively if omitted.\n *\n * [dp] {number} Integer, 0 to MAX inclusive.\n * [rm] {number} Integer, 0 to 8 inclusive.\n */\nP['round'] = function ( dp, rm ) {\n\n    dp = dp == null || ( ( ( outOfRange = dp < 0 || dp > MAX ) ||\n      parse(dp) != dp ) &&\n\n        // 'round() decimal places out of range: {dp}'\n        // 'round() decimal places not an integer: {dp}'\n        !ifExceptionsThrow( dp, 'decimal places', 'round' ) )\n          ? 0\n          : dp | 0;\n\n    rm = rm == null || ( ( ( outOfRange = rm < 0 || rm > 8 ) ||\n\n      // Include '&& rm !== 0' because with Opera -0 == parseFloat(-0) is false.\n      parse(rm) != rm && rm !== 0 ) &&\n\n        // 'round() mode not an integer: {rm}'\n        // 'round() mode out of range: {rm}'\n        !ifExceptionsThrow( rm, 'mode', 'round' ) )\n          ? ROUNDING_MODE\n          : rm | 0;\n\n    return setMode( this, dp, rm );\n};\n\n\n/*\n *  sqrt(-n) =  N\n *  sqrt( N) =  N\n *  sqrt(-I) =  N\n *  sqrt( I) =  I\n *  sqrt( 0) =  0\n *  sqrt(-0) = -0\n *\n * Return a new BigNumber whose value is the square root of the value of\n * this BigNumber, rounded according to DECIMAL_PLACES and ROUNDING_MODE.\n */\nP['squareRoot'] = P['sqrt'] = function () {\n    var n, r, re, t,\n        x = this,\n        c = x['c'],\n        s = x['s'],\n        e = x['e'],\n        dp = DECIMAL_PLACES,\n        rm = ROUNDING_MODE,\n        half = new BigNumber('0.5');\n\n    // Negative/NaN/Infinity/zero?\n    if ( s !== 1 || !c || !c[0] ) {\n\n        return new BigNumber( !s || s < 0 && ( !c || c[0] )\n          ? NaN\n          : c ? x : 1 / 0 );\n    }\n\n    // Initial estimate.\n    s = Math.sqrt( x['toS']() );\n    ROUNDING_MODE = 1;\n\n    /*\n      Math.sqrt underflow/overflow?\n      Pass x to Math.sqrt as integer, then adjust the exponent of the result.\n     */\n    if ( s == 0 || s == 1 / 0 ) {\n        n = c.join('');\n\n        if ( !( n.length + e & 1 ) ) {\n            n += '0';\n        }\n        r = new BigNumber( Math.sqrt(n) + '' );\n\n        // r may still not be finite.\n        if ( !r['c'] ) {\n            r['c'] = [1];\n        }\n        r['e'] = ( ( ( e + 1 ) / 2 ) | 0 ) - ( e < 0 || e & 1 );\n    } else {\n        r = new BigNumber( n = s.toString() );\n    }\n    re = r['e'];\n    s = re + ( DECIMAL_PLACES += 4 );\n\n    if ( s < 3 ) {\n        s = 0;\n    }\n    e = s;\n\n    // Newton-Raphson iteration.\n    for ( ; ; ) {\n        t = r;\n        r = half['times']( t['plus']( x['div'](t) ) );\n\n        if ( t['c'].slice( 0, s ).join('') === r['c'].slice( 0, s ).join('') ) {\n            c = r['c'];\n\n            /*\n              The exponent of r may here be one less than the final result\n              exponent (re), e.g 0.0009999 (e-4) --> 0.001 (e-3), so adjust\n              s so the rounding digits are indexed correctly.\n             */\n            s = s - ( n && r['e'] < re );\n\n            /*\n              The 4th rounding digit may be in error by -1 so if the 4 rounding\n              digits are 9999 or 4999 (i.e. approaching a rounding boundary)\n              continue the iteration.\n             */\n            if ( c[s] == 9 && c[s - 1] == 9 && c[s - 2] == 9 &&\n                    ( c[s - 3] == 9 || n && c[s - 3] == 4 ) ) {\n\n                /*\n                  If 9999 on first run through, check to see if rounding up\n                  gives the exact result as the nines may infinitely repeat.\n                 */\n                if ( n && c[s - 3] == 9 ) {\n                    t = r['round']( dp, 0 );\n\n                    if ( t['times'](t)['eq'](x) ) {\n                        ROUNDING_MODE = rm;\n                        DECIMAL_PLACES = dp;\n\n                        return t;\n                    }\n                }\n                DECIMAL_PLACES += 4;\n                s += 4;\n                n = '';\n            } else {\n\n                /*\n                  If the rounding digits are null, 0000 or 5000, check for an\n                  exact result. If not, then there are further digits so\n                  increment the 1st rounding digit to ensure correct rounding.\n                 */\n                if ( !c[e] && !c[e - 1] && !c[e - 2] &&\n                        ( !c[e - 3] || c[e - 3] == 5 ) ) {\n\n                    // Truncate to the first rounding digit.\n                    if ( c.length > e - 2 ) {\n                        c.length = e - 2;\n                    }\n\n                    if ( !r['times'](r)['eq'](x) ) {\n\n                        while ( c.length < e - 3 ) {\n                            c.push(0);\n                        }\n                        c[e - 3]++;\n                    }\n                }\n                ROUNDING_MODE = rm;\n                rnd( r, DECIMAL_PLACES = dp, 10 );\n\n                return r;\n            }\n        }\n    }\n};\n\n\n/*\n *  n * 0 = 0\n *  n * N = N\n *  n * I = I\n *  0 * n = 0\n *  0 * 0 = 0\n *  0 * N = N\n *  0 * I = N\n *  N * n = N\n *  N * 0 = N\n *  N * N = N\n *  N * I = N\n *  I * n = I\n *  I * 0 = N\n *  I * N = N\n *  I * I = I\n *\n * Return a new BigNumber whose value is the value of this BigNumber times\n * the value of BigNumber(y, b).\n */\nP['times'] = P['mul'] = function ( y, b ) {\n    var c,\n        x = this,\n        xc = x['c'],\n        yc = ( id = 11, y = new BigNumber( y, b ) )['c'],\n        i = x['e'],\n        j = y['e'],\n        a = x['s'];\n\n    y['s'] = a == ( b = y['s'] ) ? 1 : -1;\n\n    // Either NaN/Infinity/0?\n    if ( !i && ( !xc || !xc[0] ) || !j && ( !yc || !yc[0] ) ) {\n\n        // Either NaN?\n        return new BigNumber( !a || !b ||\n\n          // x is 0 and y is Infinity  or  y is 0 and x is Infinity?\n          xc && !xc[0] && !yc || yc && !yc[0] && !xc\n\n            // Return NaN.\n            ? NaN\n\n            // Either Infinity?\n            : !xc || !yc\n\n              // Return +-Infinity.\n              ? y['s'] / 0\n\n              // x or y is 0. Return +-0.\n              : y['s'] * 0 );\n    }\n    y['e'] = i + j;\n\n    if ( ( a = xc.length ) < ( b = yc.length ) ) {\n        c = xc, xc = yc, yc = c, j = a, a = b, b = j;\n    }\n\n    for ( j = a + b, c = []; j--; c.push(0) ) {\n    }\n\n    // Multiply!\n    for ( i = b - 1; i > -1; i-- ) {\n\n        for ( b = 0, j = a + i;\n              j > i;\n              b = c[j] + yc[i] * xc[j - i - 1] + b,\n              c[j--] = b % 10 | 0,\n              b = b / 10 | 0 ) {\n        }\n\n        if ( b ) {\n            c[j] = ( c[j] + b ) % 10;\n        }\n    }\n\n    b && ++y['e'];\n\n    // Remove any leading zero.\n    !c[0] && c.shift();\n\n    // Remove trailing zeros.\n    for ( j = c.length; !c[--j]; c.pop() ) {\n    }\n\n    // No zero check needed as only x * 0 == 0 etc.\n\n    // Overflow?\n    y['c'] = y['e'] > MAX_EXP\n\n      // Infinity.\n      ? ( y['e'] = null )\n\n      // Underflow?\n      : y['e'] < MIN_EXP\n\n        // Zero.\n        ? [ y['e'] = 0 ]\n\n        // Neither.\n        : c;\n\n    return y;\n};\n\n/*\n * Return a buffer containing the \n */\nP['toBuffer'] = function ( opts ) {\n\n    if (typeof opts === 'string') {\n        if (opts !== 'mpint') return 'Unsupported Buffer representation';\n\n        var abs = this.abs();\n        var buf = abs.toBuffer({ size : 1, endian : 'big' });\n        var len = buf.length === 1 && buf[0] === 0 ? 0 : buf.length;\n        if (buf[0] & 0x80) len ++;\n\n        var ret = new Buffer(4 + len);\n        if (len > 0) buf.copy(ret, 4 + (buf[0] & 0x80 ? 1 : 0));\n        if (buf[0] & 0x80) ret[4] = 0;\n\n        ret[0] = len & (0xff << 24);\n        ret[1] = len & (0xff << 16);\n        ret[2] = len & (0xff << 8);\n        ret[3] = len & (0xff << 0);\n\n        // two's compliment for negative integers:\n        var isNeg = this.lt(0);\n        if (isNeg) {\n            for (var i = 4; i < ret.length; i++) {\n                ret[i] = 0xff - ret[i];\n            }\n        }\n        ret[4] = (ret[4] & 0x7f) | (isNeg ? 0x80 : 0);\n        if (isNeg) ret[ret.length - 1] ++;\n\n        return ret;\n    }\n\n    if (!opts) opts = {};\n\n    var endian = { 1 : 'big', '-1' : 'little' }[opts.endian]\n        || opts.endian || 'big'\n    ;\n\n    var hex = this.toString(16);\n    if (hex.charAt(0) === '-') throw new Error(\n        'converting negative numbers to Buffers not supported yet'\n    );\n\n    var size = opts.size === 'auto' ? Math.ceil(hex.length / 2) : (opts.size || 1);\n\n    var len = Math.ceil(hex.length / (2 * size)) * size;\n    var buf = new Buffer(len);\n\n    // zero-pad the hex string so the chunks are all `size` long\n    while (hex.length < 2 * len) hex = '0' + hex;\n\n    var hx = hex\n        .split(new RegExp('(.{' + (2 * size) + '})'))\n        .filter(function (s) { return s.length > 0 })\n    ;\n\n    hx.forEach(function (chunk, i) {\n        for (var j = 0; j < size; j++) {\n            var ix = i * size + (endian === 'big' ? j : size - j - 1);\n            buf[ix] = parseInt(chunk.slice(j*2,j*2+2), 16);\n        }\n    });\n\n    return buf;\n};\n\n/*\n * Return a string representing the value of this BigNumber in exponential\n * notation to dp fixed decimal places and rounded using ROUNDING_MODE if\n * necessary.\n *\n * [dp] {number} Integer, 0 to MAX inclusive.\n */\nP['toExponential'] = P['toE'] = function ( dp ) {\n\n    return format( this,\n      ( dp == null || ( ( outOfRange = dp < 0 || dp > MAX ) ||\n\n        /*\n         * Include '&& dp !== 0' because with Opera -0 == parseFloat(-0) is\n         * false, despite -0 == parseFloat('-0') && 0 == -0 being true.\n         */\n        parse(dp) != dp && dp !== 0 ) &&\n\n          // 'toE() decimal places not an integer: {dp}'\n          // 'toE() decimal places out of range: {dp}'\n          !ifExceptionsThrow( dp, 'decimal places', 'toE' ) ) && this['c']\n            ? this['c'].length - 1\n            : dp | 0, 1 );\n};\n\n\n/*\n * Return a string representing the value of this BigNumber in normal\n * notation to dp fixed decimal places and rounded using ROUNDING_MODE if\n * necessary.\n *\n * Note: as with JavaScript's number type, (-0).toFixed(0) is '0',\n * but e.g. (-0.00001).toFixed(0) is '-0'.\n *\n * [dp] {number} Integer, 0 to MAX inclusive.\n */\nP['toFixed'] = P['toF'] = function ( dp ) {\n    var n, str, d,\n        x = this;\n\n    if ( !( dp == null || ( ( outOfRange = dp < 0 || dp > MAX ) ||\n        parse(dp) != dp && dp !== 0 ) &&\n\n        // 'toF() decimal places not an integer: {dp}'\n        // 'toF() decimal places out of range: {dp}'\n        !ifExceptionsThrow( dp, 'decimal places', 'toF' ) ) ) {\n          d = x['e'] + ( dp | 0 );\n    }\n\n    n = TO_EXP_NEG, dp = TO_EXP_POS;\n    TO_EXP_NEG = -( TO_EXP_POS = 1 / 0 );\n\n    // Note: str is initially undefined.\n    if ( d == str ) {\n        str = x['toS']();\n    } else {\n        str = format( x, d );\n\n        // (-0).toFixed() is '0', but (-0.1).toFixed() is '-0'.\n        // (-0).toFixed(1) is '0.0', but (-0.01).toFixed(1) is '-0.0'.\n        if ( x['s'] < 0 && x['c'] ) {\n\n            // As e.g. -0 toFixed(3), will wrongly be returned as -0.000 from toString.\n            if ( !x['c'][0] ) {\n                str = str.replace(/^-/, '');\n\n            // As e.g. -0.5 if rounded to -0 will cause toString to omit the minus sign.\n            } else if ( str.indexOf('-') < 0 ) {\n                str = '-' + str;\n            }\n        }\n    }\n    TO_EXP_NEG = n, TO_EXP_POS = dp;\n\n    return str;\n};\n\n\n/*\n * Return a string array representing the value of this BigNumber as a\n * simple fraction with an integer numerator and an integer denominator.\n * The denominator will be a positive non-zero value less than or equal to\n * the specified maximum denominator. If a maximum denominator is not\n * specified, the denominator will be the lowest value necessary to\n * represent the number exactly.\n *\n * [maxD] {number|string|BigNumber} Integer >= 1 and < Infinity.\n */\nP['toFraction'] = P['toFr'] = function ( maxD ) {\n    var q, frac, n0, d0, d2, n, e,\n        n1 = d0 = new BigNumber(ONE),\n        d1 = n0 = new BigNumber('0'),\n        x = this,\n        xc = x['c'],\n        exp = MAX_EXP,\n        dp = DECIMAL_PLACES,\n        rm = ROUNDING_MODE,\n        d = new BigNumber(ONE);\n\n    // NaN, Infinity.\n    if ( !xc ) {\n        return x['toS']();\n    }\n\n    e = d['e'] = xc.length - x['e'] - 1;\n\n    // If max denominator is undefined or null...\n    if ( maxD == null ||\n\n         // or NaN...\n         ( !( id = 12, n = new BigNumber(maxD) )['s'] ||\n\n           // or less than 1, or Infinity...\n           ( outOfRange = n['cmp'](n1) < 0 || !n['c'] ) ||\n\n             // or not an integer...\n             ( ERRORS && n['e'] < n['c'].length - 1 ) ) &&\n\n               // 'toFr() max denominator not an integer: {maxD}'\n               // 'toFr() max denominator out of range: {maxD}'\n               !ifExceptionsThrow( maxD, 'max denominator', 'toFr' ) ||\n\n                 // or greater than the maxD needed to specify the value exactly...\n                 ( maxD = n )['cmp'](d) > 0 ) {\n\n        // d is e.g. 10, 100, 1000, 10000... , n1 is 1.\n        maxD = e > 0 ? d : n1;\n    }\n\n    MAX_EXP = 1 / 0;\n    n = new BigNumber( xc.join('') );\n\n    for ( DECIMAL_PLACES = 0, ROUNDING_MODE = 1; ; )  {\n        q = n['div'](d);\n        d2 = d0['plus']( q['times'](d1) );\n\n        if ( d2['cmp'](maxD) == 1 ) {\n            break;\n        }\n\n        d0 = d1, d1 = d2;\n\n        n1 = n0['plus']( q['times']( d2 = n1 ) );\n        n0 = d2;\n\n        d = n['minus']( q['times']( d2 = d ) );\n        n = d2;\n    }\n\n    d2 = maxD['minus'](d0)['div'](d1);\n    n0 = n0['plus']( d2['times'](n1) );\n    d0 = d0['plus']( d2['times'](d1) );\n\n    n0['s'] = n1['s'] = x['s'];\n\n    DECIMAL_PLACES = e * 2;\n    ROUNDING_MODE = rm;\n\n    // Determine which fraction is closer to x, n0 / d0 or n1 / d1?\n    frac = n1['div'](d1)['minus'](x)['abs']()['cmp'](\n      n0['div'](d0)['minus'](x)['abs']() ) < 1\n      ? [ n1['toS'](), d1['toS']() ]\n      : [ n0['toS'](), d0['toS']() ];\n\n    return MAX_EXP = exp, DECIMAL_PLACES = dp, frac;\n};\n\n\n/*\n * Return a string representing the value of this BigNumber to sd significant\n * digits and rounded using ROUNDING_MODE if necessary.\n * If sd is less than the number of digits necessary to represent the integer\n * part of the value in normal notation, then use exponential notation.\n *\n * sd {number} Integer, 1 to MAX inclusive.\n */\nP['toPrecision'] = P['toP'] = function ( sd ) {\n\n    /*\n     * ERRORS true: Throw if sd not undefined, null or an integer in range.\n     * ERRORS false: Ignore sd if not a number or not in range.\n     * Truncate non-integers.\n     */\n    return sd == null || ( ( ( outOfRange = sd < 1 || sd > MAX ) ||\n      parse(sd) != sd ) &&\n\n        // 'toP() precision not an integer: {sd}'\n        // 'toP() precision out of range: {sd}'\n        !ifExceptionsThrow( sd, 'precision', 'toP' ) )\n          ? this['toS']()\n          : format( this, --sd | 0, 2 );\n};\n\n\n/*\n * Return a string representing the value of this BigNumber in base b, or\n * base 10 if b is omitted. If a base is specified, including base 10,\n * round according to DECIMAL_PLACES and ROUNDING_MODE.\n * If a base is not specified, and this BigNumber has a positive exponent\n * that is equal to or greater than TO_EXP_POS, or a negative exponent equal\n * to or less than TO_EXP_NEG, return exponential notation.\n *\n * [b] {number} Integer, 2 to 64 inclusive.\n */\nP['toString'] = P['toS'] = function ( b ) {\n    var u, str, strL,\n        x = this,\n        xe = x['e'];\n\n    // Infinity or NaN?\n    if ( xe === null ) {\n        str = x['s'] ? 'Infinity' : 'NaN';\n\n    // Exponential format?\n    } else if ( b === u && ( xe <= TO_EXP_NEG || xe >= TO_EXP_POS ) ) {\n        return format( x, x['c'].length - 1, 1 );\n    } else {\n        str = x['c'].join('');\n\n        // Negative exponent?\n        if ( xe < 0 ) {\n\n            // Prepend zeros.\n            for ( ; ++xe; str = '0' + str ) {\n            }\n            str = '0.' + str;\n\n        // Positive exponent?\n        } else if ( strL = str.length, xe > 0 ) {\n\n            if ( ++xe > strL ) {\n\n                // Append zeros.\n                for ( xe -= strL; xe-- ; str += '0' ) {\n                }\n            } else if ( xe < strL ) {\n                str = str.slice( 0, xe ) + '.' + str.slice(xe);\n            }\n\n        // Exponent zero.\n        } else {\n            if ( u = str.charAt(0), strL > 1 ) {\n                str = u + '.' + str.slice(1);\n\n            // Avoid '-0'\n            } else if ( u == '0' ) {\n                return u;\n            }\n        }\n\n        if ( b != null ) {\n\n            if ( !( outOfRange = !( b >= 2 && b < 65 ) ) &&\n              ( b == (b | 0) || !ERRORS ) ) {\n                str = convert( str, b | 0, 10, x['s'] );\n\n                // Avoid '-0'\n                if ( str == '0' ) {\n                    return str;\n                }\n            } else {\n\n                // 'toS() base not an integer: {b}'\n                // 'toS() base out of range: {b}'\n                ifExceptionsThrow( b, 'base', 'toS' );\n            }\n        }\n\n    }\n\n    return x['s'] < 0 ? '-' + str : str;\n};\n\n\n/*\n * Return as toString, but do not accept a base argument.\n */\nP['valueOf'] = function () {\n    return this['toS']();\n};\n\n\n// Add aliases for BigDecimal methods.\n//P['add'] = P['plus'];\n//P['subtract'] = P['minus'];\n//P['multiply'] = P['times'];\n//P['divide'] = P['div'];\n//P['remainder'] = P['mod'];\n//P['compareTo'] = P['cmp'];\n//P['negate'] = P['neg'];\n\n\n// EXPORT\nmodule.exports = BigNumber;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/browserify-bignum/bignumber.js\n");

/***/ })

};
;